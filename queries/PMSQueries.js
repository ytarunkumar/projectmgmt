module.exports = {
    createProject: "INSERT INTO gnieprojectmanagement.GPM_PROJECTS (TENANT_ID," +
        "PROJECT_NAME,PROJECT_DESCRIPTION,PROJECT_TYPE_CODE,LOCATION_NAME," +
        "LOCATION_COORDINATES,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ACTUAL_START_DATE," +
        "ACTUAL_COMPLETION_DATE,PROJECT_STATUS_TYPE_CODE,CREATED_BY,UPDATED_BY,APPROVAL_REQUIRED) " +
        "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",

    // viewProjectsByManager: "SELECT ID AS PROJECT_ID,(SELECT IS_AUTOMATED FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID=GP.ID AND ID = (SELECT MAX(ID) FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID)) AS IS_AUTOMATED,"+
    //     "PROJECT_NAME,LOCATION_NAME, PROJECT_DESCRIPTION,PROJECT_TYPE_CODE,PROJECT_STATUS_TYPE_CODE,LOCATION_NAME,CREATION_DATE,LAST_UPDATED_DATE,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE, "+
    //     "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE PROJECT_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.TENANT_ID=GP.TENANT_ID  AND GL.LOOKUP_TYPE='PROJECT_STATUS'  GROUP BY GL.DISPLAY_VALUE) AS DISPLAY_VALUE, "+
    //     "(SELECT group_concat(distinct(SGU.FULL_NAME))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM SGPT,gnieplatform.GPF_USER SGU WHERE SGPT.PROJECT_ID = GP.ID AND SGPT.USER_ID = SGU.ID AND SGPT.EFFECTIVE_END_DATE IS NULL ) AS MEMBERS_NAME, "+
    //     "(SELECT COUNT(distinct(USER_ID))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID = GP.ID AND EFFECTIVE_END_DATE IS NULL ) AS TOTAL_MEMBERS, "+
    //     "(SELECT IFNULL(SUM(HOURS),0) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID IN (SELECT ID FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID ) AND UPPER(WORKLOG_STATUS) = 'ACTIVE') AS TOTAL_HOURS,"+
    //     "(SELECT group_concat(USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM LEFT JOIN gnieplatform.GPF_USER U ON U.ID=USER_ID WHERE PROJECT_ID = GP.ID AND UPPER(ROLE_TYPE_CODE) ='OWNER' AND (U.EFFECTIVE_END_DATE IS NULL OR U.EFFECTIVE_END_DATE > NOW() ) ) AS PROJECT_OWNERS "+
    //     "FROM gnieprojectmanagement.GPM_PROJECTS GP WHERE TENANT_ID=? AND (ESTIMATED_COMPLETION_DATE IS NULL OR "+
    //     "ESTIMATED_COMPLETION_DATE > CURRENT_DATE)  ORDER BY LAST_UPDATED_DATE DESC;",
    viewProjectsByManager:"SELECT GP.ID AS PROJECT_ID,"+
    "(SELECT IS_AUTOMATED FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID=GP.ID AND ID = (SELECT MAX(ID) FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID)) AS IS_AUTOMATED,"+
    "GP.PROJECT_NAME,GP.LOCATION_NAME, GP.PROJECT_DESCRIPTION,GP.PROJECT_TYPE_CODE,GP.PROJECT_STATUS_TYPE_CODE,GP.LOCATION_NAME,GP.CREATION_DATE,GP.LAST_UPDATED_DATE,GP.ESTIMATED_START_DATE,GP.ESTIMATED_COMPLETION_DATE,"+
    "(SELECT GC.CLIENT_NAME FROM gnieplatform.GPF_CLIENTS GC WHERE GC.ID IN (SELECT GPM.CLIENT_ID FROM gnieprojectmanagement.GPM_CLIENT_PROJECT_MAPPING GPM WHERE GPM.PROJECT_ID = GP.ID)) AS CLIENT_NAME,"+            
    "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE PROJECT_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.TENANT_ID=GP.TENANT_ID  AND GL.LOOKUP_TYPE='PROJECT_STATUS'  GROUP BY GL.DISPLAY_VALUE) AS DISPLAY_VALUE,"+
    "(SELECT group_concat(distinct(SGU.FULL_NAME))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM SGPT,gnieplatform.GPF_USER SGU WHERE SGPT.PROJECT_ID = GP.ID AND SGPT.USER_ID = SGU.ID AND SGPT.EFFECTIVE_END_DATE IS NULL ) AS MEMBERS_NAME,"+
    "(SELECT COUNT(distinct(USER_ID))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID = GP.ID AND EFFECTIVE_END_DATE IS NULL ) AS TOTAL_MEMBERS,"+
    "(SELECT IFNULL(SUM(HOURS),0) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID IN (SELECT ID FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID ) AND UPPER(WORKLOG_STATUS) = 'ACTIVE') AS TOTAL_HOURS,"+
    "(SELECT group_concat(USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT LEFT JOIN gnieplatform.GPF_USER U ON U.ID=USER_ID LEFT JOIN gnieplatform.GPF_FUNCTIONAL_ROLE FR ON GPT.FUNCTIONAL_ROLE_ID = FR.ID "+
    "WHERE GPT.PROJECT_ID = GP.ID AND UPPER(GPT.ROLE_TYPE_CODE) ='OWNER' AND GPT.EFFECTIVE_END_DATE IS NULL AND (U.EFFECTIVE_END_DATE IS NULL OR U.EFFECTIVE_END_DATE > NOW() ) AND FR.TENANT_ID = U.TENANT_ID AND LOWER(FR.ROLE_NAME) = 'project manager' ) AS PROJECT_OWNERS,"+
    "(SELECT IF((SELECT COUNT(ID) FROM gnieprojectmanagement.GPM_FAVOURITE_PROJECTS WHERE PROJECT_ID = GP.ID AND USER_ID = ? AND EFFECTIVE_END_DATE IS NULL  > 0), 'Y','N')) AS IS_FAVOURITE, GP.CREATED_BY, "+
    "case when GP.PROJECT_STATUS_TYPE_CODE in ('CLOSED','HOLD') then GP.LAST_UPDATED_DATE else null end as CLOSING_DATE, "+
    "(SELECT group_concat(FULL_NAME) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT LEFT JOIN gnieplatform.GPF_USER U ON U.ID=USER_ID LEFT JOIN gnieplatform.GPF_FUNCTIONAL_ROLE FR ON GPT.FUNCTIONAL_ROLE_ID = FR.ID "+
    "WHERE GPT.PROJECT_ID = GP.ID AND UPPER(GPT.ROLE_TYPE_CODE) ='OWNER' AND GPT.EFFECTIVE_END_DATE IS NULL AND (U.EFFECTIVE_END_DATE IS NULL OR U.EFFECTIVE_END_DATE > NOW() ) AND FR.TENANT_ID = U.TENANT_ID AND LOWER(FR.ROLE_NAME) = 'project manager' ) AS PROJECT_OWNERS_NAME,"+
    "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GPT.PROJECT_ID AND TASK_STATUS_TYPE_CODE != 'CLOSED' AND TASK_STATUS_TYPE_CODE != 'OBSOLETE') AS TOTAL_TASKS, "+
    "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE TASK_STATUS_TYPE_CODE = 'COM' AND TASK_STATUS_TYPE_CODE != 'CLOSED' AND TASK_STATUS_TYPE_CODE != 'OBSOLETE'  AND PROJECT_ID = GPT.PROJECT_ID ) AS COMPLETED_TASK "+ 
    "FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GP.TENANT_ID= ? AND GPT.USER_ID = ?  "+
    " AND GP.ID = GPT.PROJECT_ID  AND IS_ARCHIVED='N' AND GPT.EFFECTIVE_END_DATE is null "+
    "GROUP BY PROJECT_ID,IS_AUTOMATED,PROJECT_NAME,LOCATION_NAME,PROJECT_DESCRIPTION,PROJECT_DESCRIPTION,PROJECT_TYPE_CODE,PROJECT_STATUS_TYPE_CODE,LOCATION_NAME,CREATION_DATE,LAST_UPDATED_DATE,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,DISPLAY_VALUE,MEMBERS_NAME,TOTAL_MEMBERS,TOTAL_HOURS,PROJECT_OWNERS,IS_FAVOURITE "+
    "ORDER BY IS_FAVOURITE DESC,LAST_UPDATED_DATE DESC;",
    // viewAllProjectsOfUser: "SELECT GP.ID, GP.ESTIMATED_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_NAME, GP.PROJECT_DESCRIPTION,GP.PROJECT_TYPE_CODE, "+
    //     "GP.PROJECT_STATUS_TYPE_CODE,GP.LOCATION_NAME,GP.CREATION_DATE AS PROJECT_CREATION_DATE, "+
    //     "GP.LAST_UPDATED_DATE "+
    //     "FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, "+
    //     "gnieprojectmanagement.GPM_TASKS GT WHERE GP.TENANT_ID=? AND "+
    //     "(GP.ESTIMATED_COMPLETION_DATE IS NULL OR GP.ESTIMATED_COMPLETION_DATE > CURRENT_DATE) "+
    //     "AND GP.PROJECT_STATUS_TYPE_CODE != 'CLOSED' AND GP.TENANT_ID = GPT.TENANT_ID "+
    //     "AND GP.ID = GPT.PROJECT_ID AND GT.ASSIGNED_TO = ? AND GP.CREATED_BY=? AND "+
    //     "(GPT.EFFECTIVE_END_DATE IS NULL OR GPT.EFFECTIVE_END_DATE > CURRENT_DATE) "+
    //     "AND GPT.USER_ID = GT.ASSIGNED_TO AND GPT.PROJECT_ID=GT.PROJECT_ID "+
    //     "GROUP BY ID,PROJECT_NAME, PROJECT_DESCRIPTION,PROJECT_TYPE_CODE, "+
    //     "PROJECT_STATUS_TYPE_CODE,LOCATION_NAME,PROJECT_CREATION_DATE,LAST_UPDATED_DATE "+
    //     "ORDER BY GP.LAST_UPDATED_DATE DESC;",

    viewAllProjectsOfUser:"SELECT GP.ID, GP.ESTIMATED_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_NAME, GP.PROJECT_DESCRIPTION,GP.PROJECT_TYPE_CODE, "+
        "GP.PROJECT_STATUS_TYPE_CODE,GP.LOCATION_NAME,GP.CREATION_DATE AS PROJECT_CREATION_DATE, "+
        "GP.LAST_UPDATED_DATE "+
        "FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, "+
        "gnieprojectmanagement.GPM_TASKS GT WHERE GP.TENANT_ID=? AND "+
        "(GP.ESTIMATED_COMPLETION_DATE IS NULL OR GP.ESTIMATED_COMPLETION_DATE > CURRENT_DATE) "+
        " AND GP.TENANT_ID = GPT.TENANT_ID "+
        "AND GP.ID = GPT.PROJECT_ID AND "+
        "(GPT.EFFECTIVE_END_DATE IS NULL OR GPT.EFFECTIVE_END_DATE > CURRENT_DATE) "+
        "AND ((GPT.USER_ID = GT.ASSIGNED_TO AND GPT.PROJECT_ID=GT.PROJECT_ID AND GT.ASSIGNED_TO = ?) OR GP.CREATED_BY = ?)"+ 
        "GROUP BY ID,PROJECT_NAME, PROJECT_DESCRIPTION,PROJECT_TYPE_CODE, "+
        "PROJECT_STATUS_TYPE_CODE,LOCATION_NAME,PROJECT_CREATION_DATE,LAST_UPDATED_DATE "+
        "ORDER BY GP.LAST_UPDATED_DATE DESC;",
    viewAllTasks: "SELECT T.ID,T.TASK_NAME, T.TASK_DESCRIPTION,T.TASK_TYPE_CODE,T.PRIORITY_TYPE_CODE,T.TASK_STATUS_TYPE_CODE ," +
        "T.ASSIGNED_TO , T.ASSIGNED_BY, T.ESTIMATED_EFFORT, T.ACTUAL_EFFORT,T.ACTUAL_START_DATE,T.ACTUAL_COMPLETION_DATE,T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE  " +
        ",U.USER_NAME FROM gnieprojectmanagement.GPM_TASKS T,gnieplatform.GPF_USER U " +
        " WHERE T.TENANT_ID=? AND T.PROJECT_ID=? AND T.TASK_STATUS_TYPE_CODE NOT IN('CLOSED','OBSOLETE') " +
        "AND U.ID=T.ASSIGNED_BY",
    viewAllTasksByEmployee: "SELECT T.ID,T.TASK_NAME, T.TASK_DESCRIPTION,T.TASK_TYPE_CODE,T.PRIORITY_TYPE_CODE,T.TASK_STATUS_TYPE_CODE ," +
        "T.ASSIGNED_TO , T.ASSIGNED_BY, T.ESTIMATED_EFFORT, T.ACTUAL_EFFORT,T.ACTUAL_START_DATE,T.ACTUAL_COMPLETION_DATE,T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE  " +
        ",U.USER_NAME FROM gnieprojectmanagement.GPM_TASKS T,gnieplatform.GPF_USER U " +
        " WHERE T.TENANT_ID=? AND T.PROJECT_ID=? AND T.TASK_STATUS_TYPE_CODE NOT IN('CLOSED','OBSOLETE') " +
        "AND U.ID=T.ASSIGNED_BY and T.ASSIGNED_TO=?",

    // viewTaskDetails: "SELECT * FROM gnieprojectmanagement.GPM_TASKS WHERE TENANT_ID=? AND PROJECT_ID=? AND ID=?",
    viewTaskDetails:"SELECT T.ID, T.PROJECT_ID,P.PROJECT_NAME,P.APPROVAL_REQUIRED,T.TASK_NAME,T.TASK_DESCRIPTION,T.TYPE,T.MAIN_TASK_ID, T.TASK_TYPE_CODE,T.SUB_STATUS, "+
    "T.ASSIGNED_TO, T.ASSIGNED_BY, T.TASK_STATUS_TYPE_CODE,T.PRIORITY_TYPE_CODE,T.CAN_CONTINUE, "+
    "T.ORDER_OF_EXECUTION,T.IS_AUTOMATED,T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE,T.TAG, "+
    "(SELECT CASE WHEN EXISTS (SELECT WL.USER_ID  FROM gnieprojectmanagement.GPM_WATCH_LIST WL WHERE "+ 
    "WL.ENTITY_ID=T.ID  AND WL.STATUS='ACTIVE' ) THEN 'true' ELSE 'false' END ) ADDED_TO_WATCH_LIST, "+
    "(SELECT CASE WHEN EXISTS (SELECT TASK_ID FROM gnieprojectmanagement.GPM_RECURRING_TASK WHERE "+
    "END_DATE<=NOW() AND T.ID=TASK_ID)THEN 'true' ELSE 'false' END ) STOPPED, "+
    "T.ESTIMATED_EFFORT,T.ACTUAL_START_DATE,T.ACTUAL_COMPLETION_DATE,T.ACTUAL_EFFORT,T.CREATION_DATE,T.CREATED_BY,T.GROUP_ID, "+
    "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE=(case when T.TYPE = 'MAIN' then 'TASK' else 'SUBTASK' end) AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE=(case when T.TYPE = 'MAIN' then 'TASK' else 'SUBTASK' end) AND TENANT_ID=T.TENANT_ID) end AS BUDGET_AMOUNT_MIN, "+
    "case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE=(case when T.TYPE = 'MAIN' then 'TASK' else 'SUBTASK' end) AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE=(case when T.TYPE = 'MAIN' then 'TASK' else 'SUBTASK' end) AND TENANT_ID=T.TENANT_ID) end AS BUDGET_AMOUNT_MAX, "+
    "(SELECT G.NAME FROM gnieprojectmanagement.GPM_GROUPS G WHERE G.ID=T.GROUP_ID AND G.TENANT_ID=T.TENANT_ID) AS GROUP_NAME,"+
    "CASE WHEN (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = T.PROJECT_ID and GPT.USER_ID = T.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) IS NULL THEN 'EMPLOYEE' ELSE (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = T.PROJECT_ID and GPT.USER_ID = T.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) END ROLE_NAME, "+
    "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.CREATED_BY AND T.TENANT_ID=U.TENANT_ID) AS CREATED_BY_NAME,"+
    "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.ASSIGNED_TO AND T.TENANT_ID=U.TENANT_ID) AS ASSIGNED_TO_NAME, "+
    "(SELECT EMAIL FROM gnieplatform.GPF_USER U  WHERE U.ID=T.ASSIGNED_TO AND T.TENANT_ID=U.TENANT_ID) AS ASSIGNED_TO_EMAIL, "+
    "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.ASSIGNED_BY AND T.TENANT_ID=U.TENANT_ID) AS ASSIGNED_BY_NAME, "+
    "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE T.TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY GL.DISPLAY_VALUE LIMIT 1) AS DISPLAY_VALUE, "+
    " (SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.CREATED_BY AND T.TENANT_ID=U.TENANT_ID) AS CREATED_BY_NAME,"+
    "(SELECT gm.NAME FROM gnieprojectmanagement.GPM_MILESTONE gm,gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING MTM1 WHERE gm.ID = MTM1.MILESTONE_ID AND MTM1.TASK_ID = T.ID AND MTM1.EFFECTIVE_END_DATE IS NULL ) AS MILESONE_NAME,"+
    "(SELECT MILESTONE_ID FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING  WHERE TASK_ID=T.ID AND TENANT_ID=T.TENANT_ID AND EFFECTIVE_END_DATE IS NULL) AS MILESTONE_ID ,"+
    "(SELECT GROUP_CONCAT(PT.USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM PT  WHERE P.ID=PT.PROJECT_ID AND P.TENANT_ID=PT.TENANT_ID AND PT.ROLE_TYPE_CODE='OWNER') AS PROJECT_OWNERS,"+
    "DATEDIFF(NOW(),T.ESTIMATED_COMPLETION_DATE) AS DUE_IN ,"+
    "(SELECT CASE WHEN EXISTS (SELECT G.ID FROM gnieplatform.GPF_RULES G,gnieprojectmanagement.GPM_RECURRING_TASK R WHERE G.ID =R.RULE_ID AND R.TASK_ID=T.ID AND R.TENANT_ID=T.TENANT_ID AND R.END_DATE > NOW()) "+
    "THEN 'true' ELSE 'false' END ) IS_RECURRING, "+
    "(SELECT R.END_DATE FROM gnieprojectmanagement.GPM_RECURRING_TASK R WHERE T.ID=R.TASK_ID AND R.TENANT_ID=T.TENANT_ID) AS RECURRING_END_DATE, "+
    "(SELECT G.ID FROM gnieplatform.GPF_RULES G,gnieprojectmanagement.GPM_RECURRING_TASK R WHERE G.ID =R.RULE_ID AND R.TASK_ID=T.ID AND R.TENANT_ID=T.TENANT_ID ) AS RULE_ID, "+
    "(SELECT G.NAME FROM gnieplatform.GPF_RULES G,gnieprojectmanagement.GPM_RECURRING_TASK R WHERE G.ID =R.RULE_ID AND R.TASK_ID=T.ID AND R.TENANT_ID=T.TENANT_ID ) AS RULE_NAME, "+
    "(SELECT G.VALUE FROM gnieplatform.GPF_RULES G,gnieprojectmanagement.GPM_RECURRING_TASK R WHERE G.ID =R.RULE_ID AND R.TASK_ID=T.ID AND R.TENANT_ID=T.TENANT_ID ) AS RULE_VALUE, "+
    "(SELECT CASE WHEN EXISTS (SELECT ST.ID FROM gnieprojectmanagement.GPM_TASKS ST WHERE "+
    "T.ID = ST.MAIN_TASK_ID )THEN 'true' ELSE 'false' END ) HAS_SUB_TASK, "+
    "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER U  WHERE U.ID=T.CREATED_BY AND T.TENANT_ID=U.TENANT_ID) AS WHATSAPP_NO, "+
    "(SELECT WHATSAPP_ID FROM gnieplatform.GPF_TENANTS WHERE T.TENANT_ID=ID) AS WHATSAPP_ID, "+
    "(SELECT GROUP_CONCAT(DISTINCT GN.SENT_TO) FROM gnieplatform.GPF_NOTIFICATIONS GN WHERE T.ID = GN.UNIT_ID AND GN.UNIT_TYPE = 'TASK' AND GN.MESSAGE LIKE '%pending approval of task%' )AS APPROVERS, "+
    "(CASE WHEN T.SUB_STATUS = 'Awaiting Approval' THEN (SELECT GC.COMMENTS FROM gnieplatform.GPF_COMMENTS GC WHERE GC.ACTION_CODE = 'A1008' AND GC.ACTION_ID = T.ID ORDER BY GC.ID DESC LIMIT 1) END) AS COMMENTS, "+
    "(CASE WHEN T.SUB_STATUS = 'Rejected' THEN (SELECT GC.COMMENTS FROM gnieplatform.GPF_COMMENTS GC WHERE GC.ACTION_CODE = 'A1007' AND GC.ACTION_ID = T.ID ORDER BY GC.ID DESC LIMIT 1) END) AS REJECTED_REASON "+
    "FROM gnieprojectmanagement.GPM_TASKS T, gnieprojectmanagement.GPM_PROJECTS P WHERE T.TENANT_ID=? AND T.PROJECT_ID=?  AND T.ID=? AND "+
    "P.ID=T.PROJECT_ID",

    deleteTask: "UPDATE gnieprojectmanagement.GPM_TASKS SET TASK_STATUS_TYPE_CODE =?, ACTUAL_COMPLETION_DATE =NOW() WHERE TENANT_ID=? AND PROJECT_ID=? AND ID=?",

    updateTask: "UPDATE  gnieprojectmanagement.GPM_TASKS SET  TASK_NAME=?, TASK_DESCRIPTION=?,"+
        "ESTIMATED_START_DATE=?, ESTIMATED_COMPLETION_DATE=?, ACTUAL_START_DATE=?, ACTUAL_COMPLETION_DATE=?, PROJECT_ID=?, "+
        "ESTIMATED_EFFORT=?, UPDATED_BY=?, GROUP_ID = ? , ASSIGNED_TO=?,PRIORITY_TYPE_CODE=? WHERE TENANT_ID=? AND PROJECT_ID=? AND ID=?",
    getAllLookups: "SELECT LOOKUP_TYPE,LOOKUP_CODE,DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE TENANT_ID=?;",

    getSpecificLookup: "SELECT LOOKUP_TYPE,LOOKUP_CODE,DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE TENANT_ID=? and LOOKUP_TYPE IN (?);",

    assignProjectOwnerQuery: "INSERT INTO gnieprojectmanagement.GPM_PROJECT_TEAM(TENANT_ID,USER_ID,PROJECT_ID,EFFECTIVE_START_DATE,ROLE_TYPE_CODE,CREATED_BY,UPDATED_BY,FUNCTIONAL_ROLE_ID) VALUES(?,?,?,?,?,?,?,?);",

    deleteProject: "UPDATE gnieprojectmanagement.GPM_PROJECTS SET ACTUAL_COMPLETION_DATE = ?, PROJECT_STATUS_TYPE_CODE = ?,LAST_UPDATED_DATE = now() WHERE ID = ? and TENANT_ID=?;",

    createTask: "INSERT INTO gnieprojectmanagement.GPM_TASKS  (PROJECT_ID,TENANT_ID,TASK_NAME," +
        " TASK_DESCRIPTION,TASK_TYPE_CODE,ASSIGNED_BY,TASK_STATUS_TYPE_CODE,PRIORITY_TYPE_CODE," +
        " ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ESTIMATED_EFFORT,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE, " +
        " ACTUAL_EFFORT,CREATED_BY,UPDATED_BY,TYPE,MAIN_TASK_ID,GROUP_ID,ASSIGNED_TO,TAG) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ",

    createTaskByEmp: "INSERT INTO gnieprojectmanagement.GPM_TASKS  (PROJECT_ID,TENANT_ID,TASK_NAME," +
        " TASK_DESCRIPTION,TASK_TYPE_CODE,ASSIGNED_TO,ASSIGNED_BY,TASK_STATUS_TYPE_CODE,PRIORITY_TYPE_CODE," +
        " ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ESTIMATED_EFFORT,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE, " +
        " ACTUAL_EFFORT,CREATED_BY,UPDATED_BY,TYPE,MAIN_TASK_ID,GROUP_ID,TAG) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ",    
    createTasks: "INSERT INTO gnieprojectmanagement.GPM_TASKS  (PROJECT_ID,TENANT_ID,TASK_NAME," +
        " TASK_DESCRIPTION,TASK_TYPE_CODE,ASSIGNED_TO,ASSIGNED_BY,TASK_STATUS_TYPE_CODE,PRIORITY_TYPE_CODE,CAN_CONTINUE,ORDER_OF_EXECUTION,IS_AUTOMATED, " +
        " ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ESTIMATED_EFFORT,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE, " +
        " ACTUAL_EFFORT,CREATED_BY,UPDATED_BY,TYPE,MAIN_TASK_ID,GROUP_ID) VALUES ? ",

    updateProject: "UPDATE  gnieprojectmanagement.GPM_PROJECTS  SET " +
        "PROJECT_NAME=?,PROJECT_DESCRIPTION=?,PROJECT_TYPE_CODE=?,LOCATION_NAME=?," +
        "LOCATION_COORDINATES=?,ESTIMATED_START_DATE=?,ESTIMATED_COMPLETION_DATE=?,ACTUAL_START_DATE=?," +
        "ACTUAL_COMPLETION_DATE=?,PROJECT_STATUS_TYPE_CODE=?,UPDATED_BY=?,LAST_UPDATED_DATE=NOW() WHERE TENANT_ID=? AND ID=?",

    getProjectDetails: "SELECT ID,PROJECT_NAME, PROJECT_DESCRIPTION,PROJECT_TYPE_CODE,LOCATION_NAME,LOCATION_COORDINATES, " +
        "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE PROJECT_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.TENANT_ID=TENANT_ID  AND GL.LOOKUP_TYPE='PROJECT_STATUS'  GROUP BY GL.DISPLAY_VALUE) AS DISPLAY_VALUE,"+
        "ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,PROJECT_STATUS_TYPE_CODE,CREATED_BY FROM gnieprojectmanagement.GPM_PROJECTS WHERE TENANT_ID=? and ID=?",

    taskNameExistsQuery: "SELECT * FROM gnieprojectmanagement.GPM_TASKS WHERE TENANT_ID=? AND PROJECT_ID=? AND TASK_NAME=? AND TASK_STATUS_TYPE_CODE!='CLOSED' AND TASK_STATUS_TYPE_CODE != 'OBSOLETE' ",

    projectNameExistsQuery: "SELECT * FROM gnieprojectmanagement.GPM_PROJECTS WHERE TENANT_ID=? AND PROJECT_NAME=? ",

    // getAllUsers: "SELECT ID,FULL_NAME FROM gnieplatform.GPF_USER WHERE EFFECTIVE_END_DATE IS NULL AND TENANT_ID=?",
    getAllUsers:"SELECT GU.ID,GU.FULL_NAME,GU.EMAIL,GPT.FUNCTIONAL_ROLE_ID ROLE_ID,CASE WHEN GPT.FUNCTIONAL_ROLE_ID IS NULL THEN 'EMPLOYEE' ELSE GFR.ROLE_NAME END ROLE_NAME "
        +"FROM gnieplatform.GPF_USER GU,gnieprojectmanagement.GPM_PROJECT_TEAM GPT LEFT JOIN gnieplatform.GPF_FUNCTIONAL_ROLE GFR ON GPT.FUNCTIONAL_ROLE_ID = GFR.ID "
        +"WHERE GU.EFFECTIVE_END_DATE IS NULL AND GU.TENANT_ID=? AND GU.ID = GPT.USER_ID AND GPT.PROJECT_ID=? AND GPT.EFFECTIVE_END_DATE IS NULL GROUP BY GU.ID,GU.FULL_NAME,GU.EMAIL,GPT.FUNCTIONAL_ROLE_ID,ROLE_NAME ORDER BY GU.FULL_NAME",
    updateTaskAssignedTo: "UPDATE gnieprojectmanagement.GPM_TASKS SET ASSIGNED_TO = ?, ASSIGNED_BY=?,UPDATED_BY = ? WHERE ID=?;",
    reassignTaskEndDate: "update gnieprojectmanagement.GPM_PROJECT_TEAM SET EFFECTIVE_END_DATE = DATE(NOW()),LAST_UPDATED_DATE = NOW() WHERE USER_ID = ? AND TASK_ID = ?;",
    assignTaskToOwner: "update gnieprojectmanagement.GPM_PROJECT_TEAM SET USER_ID = ? WHERE TASK_ID = ?;",
    assignUserToTask: " INSERT INTO  gnieprojectmanagement.GPM_PROJECT_TEAM (TENANT_ID,USER_ID,PROJECT_ID," +
        "TASK_ID,EFFECTIVE_START_DATE,ROLE_TYPE_CODE,CREATED_BY,UPDATED_BY)" +
        "VALUES(?,?,?,?,?,?,?,?)",

    viewActiveTasks: "SELECT * FROM gnieprojectmanagement.GPM_TASKS WHERE TENANT_ID=? AND PROJECT_ID=?  AND  upper(TASK_STATUS_TYPE_CODE)  !='COMP'  AND  upper(TASK_STATUS_TYPE_CODE)  !='CLOSED' AND upper(TASK_STATUS_TYPE_CODE) !='OBSOLETE' ",
    closeAllTasksQuery: "UPDATE gnieprojectmanagement.GPM_TASKS SET TASK_STATUS_TYPE_CODE=?,ACTUAL_COMPLETION_DATE = now() WHERE PROJECT_ID=?;",
    closeProjectTeamQuery: "update gnieprojectmanagement.GPM_PROJECT_TEAM set EFFECTIVE_END_DATE=NOW() WHERE PROJECT_ID=?;",

    deleteAllLookup: "UPDATE gnieprojectmanagement.GPF_LOOKUP SET EFFECTIVE_END_DATE = NOW() ,UPDATED_BY =? WHERE TENANT_ID=? AND EFFECTIVE_END_DATE IS NULL;",

    deleteLookupType: "UPDATE gnieprojectmanagement.GPF_LOOKUP SET EFFECTIVE_END_DATE =now() WHERE TENANT_ID =? AND LOOKUP_TYPE =? AND EFFECTIVE_END_DATE IS NULL",

    deleteLookupTypeField: "UPDATE gnieprojectmanagement.GPF_LOOKUP SET EFFECTIVE_END_DATE =now() WHERE TENANT_ID =? AND LOOKUP_TYPE =? AND LOOKUP_CODE = ? AND EFFECTIVE_END_DATE IS NULL",

    updateLookupType: "UPDATE gnieprojectmanagement.GPF_LOOKUP SET LOOKUP_CODE=?,DISPLAY_VALUE=? ,UPDATED_BY=? WHERE TENANT_ID =? AND LOOKUP_TYPE =? ",

    lookupExistsQuery: "SELECT * FROM  gnieprojectmanagement.GPF_LOOKUP WHERE TENANT_ID=? AND LOOKUP_TYPE=? AND LOOKUP_CODE IN (?)",

    addLookups: "INSERT INTO gnieprojectmanagement.GPF_LOOKUP (TENANT_ID,LOOKUP_TYPE,LOOKUP_CODE,DISPLAY_VALUE,EFFECTIVE_START_DATE,CREATED_BY,UPDATED_BY) VALUES (?)",

    getUserId: " SELECT U.ID,U.MANAGER_ID,REPLACE(U.FULL_NAME,',',''),T.TENANT_NAME,T.WHATSAPP_ID,U.WHATSAPP_NUMBER " +
        "FROM  gnieplatform.GPF_USER U,gnieplatform.GPF_TENANTS T " +
        "WHERE T.ID = U.TENANT_ID AND U.EMAIL =? " +
        "AND sysdate() BETWEEN U.EFFECTIVE_START_DATE AND IFNULL(U.EFFECTIVE_END_DATE,'4712/12/12') AND upper(U.STATUS)='ACTIVE';",

    createLookupField: "INSERT INTO gnieprojectmanagement.GPF_LOOKUP (TENANT_ID,LOOKUP_TYPE,LOOKUP_CODE,DISPLAY_VALUE,EFFECTIVE_START_DATE,CREATED_BY,UPDATED_BY) VALUES (?,?,?,?,NOW(),?,?)",

    completeTask: "UPDATE gnieprojectmanagement.GPM_TASKS SET PROGRESS=? ,ACTUAL_COMPLETION_DATE= ? , TASK_STATUS_TYPE_CODE='COM',UPDATED_BY=?, SUB_STATUS = ? WHERE TENANT_ID=? AND " +
        " PROJECT_ID=? AND ID=?",


    closeTaskAssigned: "UPDATE gnieprojectmanagement.GPM_PROJECT_TEAM SET EFFECTIVE_END_DATE= NOW() WHERE TENANT_ID=? AND " +
        " PROJECT_ID=? AND TASK_ID=? AND UPDATED_BY=?",

    getLookups: "SELECT GT.ID AS TENANT_ID, GT.TENANT_NAME, GL.ID AS LOOKUP_ID, GL.LOOKUP_TYPE, GL.LOOKUP_CODE, GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL RIGHT JOIN gnieplatform.GPF_TENANTS GT ON sysdate() BETWEEN GL.EFFECTIVE_START_DATE AND IFNULL(GL.EFFECTIVE_END_DATE,'4712/12/12') AND GT.ID = GL.TENANT_ID",

    completeAllTask: "UPDATE gnieprojectmanagement.GPM_TASKS SET ACTUAL_COMPLETION_DATE= NOW() AND TASK_STATUS_TYPE_CODE='COM' " +
        " WHERE TENANT_ID=? AND " +
        " PROJECT_ID=?  AND UPDATED_BY=? AND NOW() <= ACTUAL_COMPLETION_DATE",

    closeAllTaskAssigned: "UPDATE gnieprojectmanagement.GPM_PROJECT_TEAM SET EFFECTIVE_END_DATE= NOW() WHERE TENANT_ID=? AND " +
        " PROJECT_ID=?  AND UPDATED_BY=? AND NOW() < EFFECTIVE_END_DATE",

    setActualStartDate: "UPDATE gnieprojectmanagement.GPM_TASKS SET ASSIGNED_TO=? ,TASK_STATUS_TYPE_CODE='OPEN', ACTUAL_START_DATE= NOW() , UPDATED_BY=? WHERE TENANT_ID=? AND " +
        " PROJECT_ID=? AND ID=? ",
    updateProjectStatus: "UPDATE gnieprojectmanagement.GPM_PROJECTS SET PROJECT_STATUS_TYPE_CODE='IP' WHERE ID = ?",

    // isTaskAssigned: "SELECT * FROM gnieprojectmanagement.GPM_TASK WHERE USER_ID=? " +
    //     " AND TASK_ID=? AND PROJECT_ID=? AND (ACTUAL_COMPLETION_DATE IS NULL OR NOW() < ACTUAL_COMPLETION_DATE ) AND TENANT_ID=?",

    isTaskAssigned:"SELECT * FROM gnieprojectmanagement.GPM_TASKS WHERE ASSIGNED_TO=? "+
        "AND ID=? AND PROJECT_ID=? AND (ACTUAL_COMPLETION_DATE IS NULL OR NOW() < ACTUAL_COMPLETION_DATE ) AND TENANT_ID=?",

    getProjectsByStatusManager: "SELECT ID,PROJECT_NAME, PROJECT_DESCRIPTION,PROJECT_TYPE_CODE,PROJECT_STATUS_TYPE_CODE,LOCATION_NAME,LAST_UPDATED_DATE " +
        "FROM gnieprojectmanagement.GPM_PROJECTS WHERE TENANT_ID=? AND (ESTIMATED_COMPLETION_DATE IS NULL OR " +
        "ESTIMATED_COMPLETION_DATE > CURRENT_DATE) AND PROJECT_STATUS_TYPE_CODE =? AND CREATED_BY = ? ORDER BY LAST_UPDATED_DATE DESC;",
    getProjectsByStatusEmp: "SELECT GP.ID,PROJECT_NAME, GP.PROJECT_DESCRIPTION,GP.PROJECT_TYPE_CODE," +
        "GP.PROJECT_STATUS_TYPE_CODE,GP.LOCATION_NAME,GP.LAST_UPDATED_DATE " +
        "FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECT_TEAM GPT " +
        "WHERE GP.TENANT_ID=? " +
        "AND (GP.ESTIMATED_COMPLETION_DATE IS NULL OR GP.ESTIMATED_COMPLETION_DATE > CURRENT_DATE) " +
        "AND GP.PROJECT_STATUS_TYPE_CODE =? AND GP.ID = GT.PROJECT_ID AND GT.ASSIGNED_TO=? " +
        "AND GT.ASSIGNED_TO = GPT.USER_ID AND GT.PROJECT_ID=GPT.PROJECT_ID "+
        "GROUP BY ID,PROJECT_NAME,PROJECT_DESCRIPTION,PROJECT_TYPE_CODE,"+
        "PROJECT_STATUS_TYPE_CODE,LOCATION_NAME,LAST_UPDATED_DATE " +
        "ORDER BY GP.LAST_UPDATED_DATE DESC;",
    getProjectTeam: "SELECT GU.ID,GU.FULL_NAME,GU.EMPLOYEE_NUMBER,GU.EMAIL, IFNULL((SELECT SUM(HOURS) FROM gnietimemanagement.GPMS_TIMECARD_DETAIL " +
        "WHERE TASK_ID IN (SELECT ID FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID=?) AND " +
        "USER_ID = GU.ID ),0) AS TOTAL_HOURS FROM gnieplatform.GPF_USER GU " +
        "WHERE GU.ID IN ( SELECT USER_ID FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID = ?) " +
        "GROUP BY ID,FULL_NAME,EMAIL,TOTAL_HOURS;",
    getTaskList:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "CASE WHEN (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = GT.PROJECT_ID and GPT.USER_ID = GT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) IS NULL THEN 'EMPLOYEE' ELSE (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = GT.PROJECT_ID and GPT.USER_ID = GT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) END ROLE_NAME, "+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL,"+
        "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE GT.TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY GL.DISPLAY_VALUE LIMIT 1) AS DISPLAY_VALUE, "+
        "(SELECT CASE WHEN EXISTS (SELECT ST.ID FROM gnieprojectmanagement.GPM_TASKS ST WHERE "+
        "GT.ID = ST.MAIN_TASK_ID )THEN 'true' ELSE 'false' END ) HAS_SUB_TASK, "+
        "(select APPROVAL_REQUIRED from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS APPROVAL_REQUIRED,"+
        "GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,"+
        "GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE, GT.TYPE AS TASK_TYPE ,GT.SUB_STATUS,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.ACTUAL_COMPLETION_DATE,GT.LAST_UPDATED_DATE FROM gnieprojectmanagement.GPM_TASKS GT "+
        "WHERE GT.TENANT_ID = ? AND PROJECT_ID=? AND TASK_STATUS_TYPE_CODE IN (?) ORDER BY LAST_UPDATED_DATE DESC ;",
    getTaskListEmp:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.TYPE"+
        "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE GT.TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE GROUP BY GL.DISPLAY_VALUE LIMIT 1) AS DISPLAY_VALUE, "+
        "(select APPROVAL_REQUIRED from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS APPROVAL_REQUIRED,"+
        "GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.SUB_STATUS, "+
        "FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? AND GT.PROJECT_ID=? AND GT.ASSIGNED_TO=? "+
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) ORDER BY LAST_UPDATED_DATE DESC;",
    getAllTasksOfEmployee:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER,"+
        "(select ID from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_ID, "+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL,"+
        "(select APPROVAL_REQUIRED from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS APPROVAL_REQUIRED,"+
        "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_NAME,"+
        "(select PROJECT_DESCRIPTION from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_DESCRIPTION,"+
        "(select PROJECT_TYPE_CODE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_TYPE_CODE, "+
        "(select ESTIMATED_START_DATE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ESTIMATED_START_DATE, "+
        "(select ESTIMATED_COMPLETION_DATE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ESTIMATED_COMPLETION_DATE,"+
        "(select PROJECT_STATUS_TYPE_CODE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_STATUS_TYPE_CODE,"+
        "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ID,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,"+
        "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE GT.TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY GL.DISPLAY_VALUE LIMIT 1) AS DISPLAY_VALUE, "+
        "(SELECT IFNULL(SUM(HOURS),0) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID = GT.ID AND WORKLOG_STATUS = 'ACTIVE' ) AS TOTAL_HOURS,"+
        "(SELECT group_concat(USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID = GT.PROJECT_ID AND UPPER(ROLE_TYPE_CODE) ='OWNER' ) AS PROJECT_OWNERS,"+
        "GT.ASSIGNED_TO,GT.ASSIGNED_BY,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,GT.ACTUAL_COMPLETION_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.CREATED_BY,GT.SUB_STATUS FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID =? AND GT.ASSIGNED_TO=? AND GT.TASK_STATUS_TYPE_CODE IN ? ORDER BY ID DESC;",
        
    
        sendNotification:"INSERT INTO gnieplatform.GPF_NOTIFICATIONS (SENT_FROM,SENT_TO,MESSAGE,UNIT_ID,UNIT_TYPE,CREATED_BY,UPDATED_BY,TENANT_ID,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE)"+
        "VALUES(?,?,?,?,?,?,?,?,?,?)",
    getNotification: "SELECT SENT_FROM,MESSAGE,VIEWED FROM gnieprojectmanagement.GPM_NOTIFICATIONS WHERE SENT_TO=? " +
        "AND VIEWED=false and TENANT_ID=?",
    taskDueDateExpiredByPM:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL,"+
        "GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "ESTIMATED_EFFORT,ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? " +
        "AND GT.PROJECT_ID=? AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND DATE(NOW())>GT.ESTIMATED_COMPLETION_DATE;",
    taskDueDateExpiredByEmp:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL,"+
        "GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "ESTIMATED_EFFORT,ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? " +
        "AND GT.PROJECT_ID=? AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ASSIGNED_TO = ? AND DATE(NOW())>GT.ESTIMATED_COMPLETION_DATE;",
    allTasksDueDateExpiredByEmp:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER,"+
        "(select ID from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_ID, "+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL,"+
        "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_NAME,"+
        "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_ID,GT.ID,GT.TASK_NAME,"+
        "GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,"+
        "GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,ESTIMATED_EFFORT,ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? "+
        "AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ASSIGNED_TO = ? AND DATE(NOW())>GT.ESTIMATED_COMPLETION_DATE;",
    taskDueDateTodayPM:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,"+
        "GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? "+
        "AND GT.PROJECT_ID=? AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND DATE(NOW())=GT.ESTIMATED_COMPLETION_DATE;",
    taskDueDateTodayEmp:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,"+
        "GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? "+
        "AND GT.PROJECT_ID=? AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ASSIGNED_TO =? AND DATE(NOW())=GT.ESTIMATED_COMPLETION_DATE;",
    allTaskDueDateTodayEmp: "SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER," +
        "(select ID from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_ID, "+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME," +
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL," +
        "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_NAME,GT.ID,GT.TASK_NAME," +
        "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_ID, "+
        "GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE," +
        "GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,ESTIMATED_EFFORT,ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? " +
        "AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ASSIGNED_TO = ? AND DATE(NOW())=GT.ESTIMATED_COMPLETION_DATE;",
    taskDueDateInDayPM:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,"+
        "GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? "+
        "AND GT.PROJECT_ID=? AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ESTIMATED_COMPLETION_DATE "+
        "BETWEEN DATE_ADD(DATE(NOW()), INTERVAL 1 DAY) AND DATE_ADD(DATE(NOW()), INTERVAL ? DAY);",
    taskDueDateInDayEmp:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,"+
        "GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE," +
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? " +
        "AND GT.PROJECT_ID=? AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ASSIGNED_TO = ? AND GT.ESTIMATED_COMPLETION_DATE " +
        "BETWEEN DATE_ADD(DATE(NOW()), INTERVAL 1 DAY) AND DATE_ADD(DATE(NOW()), INTERVAL ? DAY);",
    allTaskDueDateInDayEmp: "SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER," +
        "(select ID from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_ID, "+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME," +
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL,"+
        "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_NAME,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO," +
        "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_ID, "+
        "GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? "+
        "AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ASSIGNED_TO = ? AND GT.ESTIMATED_COMPLETION_DATE "+
        "BETWEEN DATE_ADD(DATE(NOW()), INTERVAL 1 DAY) AND DATE_ADD(DATE(NOW()), INTERVAL ? DAY);",
    taskEffortsExeedsPM:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL, GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,"+
        "GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? "+
        "AND GT.PROJECT_ID=23 AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ACTUAL_EFFORT>GT.ESTIMATED_EFFORT;",
    taskEffortsExeedsEmp:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL, GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,"+
        "GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? "+
        "AND GT.PROJECT_ID=? AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ASSIGNED_TO = ? AND GT.ACTUAL_EFFORT>GT.ESTIMATED_EFFORT;",
    allTaskEffortsExeedsEmp: "SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER," +
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME," +
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL, GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,"+
        "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_NAME,"+
        "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_ID, "+
        "GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID = ? "+
        "AND GT.TASK_STATUS_TYPE_CODE IN ('NS','IP') AND GT.ASSIGNED_TO = ? AND GT.ACTUAL_EFFORT>GT.ESTIMATED_EFFORT;" ,  
    
    taskNotStartedPM:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL, "+
        "GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,"+
        "GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT "+
        "WHERE GT.TENANT_ID = ? AND GT.PROJECT_ID=? AND GT.TASK_STATUS_TYPE_CODE ='NS';",
    taskNotStartedEmp:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL, "+
        "GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,"+
        "GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT " +
        "WHERE GT.TENANT_ID = ? AND GT.PROJECT_ID=? AND GT.ASSIGNED_TO = ? AND GT.TASK_STATUS_TYPE_CODE ='NS';",
    allTaskNotStartedEmp: "SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER," +
        "(select ID from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_ID, "+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL, "+
        "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_NAME,"+
        "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_ID, "+
        "GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,"+
        "GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT "+
        "WHERE GT.TENANT_ID = ? AND GT.ASSIGNED_TO = ? AND GT.TASK_STATUS_TYPE_CODE ='NS';",
    projectDueDateExpiredByPM:"SELECT ID,PROJECT_NAME,PROJECT_TYPE_CODE,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,PROJECT_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_PROJECTS WHERE CREATED_BY=? AND ESTIMATED_COMPLETION_DATE < NOW() AND "+
        "PROJECT_STATUS_TYPE_CODE IN('IP','NS','HOLD') AND TENANT_ID=?"    ,
    projectDueDateExpiredByEmp:"SELECT P.ID,P.PROJECT_NAME,P.PROJECT_TYPE_CODE,P.ESTIMATED_START_DATE,P.ESTIMATED_COMPLETION_DATE,P.ACTUAL_START_DATE,P.ACTUAL_COMPLETION_DATE,P.PROJECT_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_PROJECTS P, gnieprojectmanagement.GPM_TASKS T WHERE "+
        "P.ESTIMATED_COMPLETION_DATE < NOW() AND "+
        " P.PROJECT_STATUS_TYPE_CODE IN('IP','NS','HOLD') AND P.TENANT_ID=?  AND  P.ID =T.PROJECT_ID AND T.ASSIGNED_TO=?",
    
    projectDueDateTodayPM:"SELECT ID,PROJECT_NAME,PROJECT_TYPE_CODE,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,PROJECT_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_PROJECTS WHERE CREATED_BY=? AND ESTIMATED_COMPLETION_DATE = NOW() AND "+
        "PROJECT_STATUS_TYPE_CODE IN('IP','NS','HOLD') AND TENANT_ID=?"    ,

    projectDueDateTodayEmp:"SELECT P.ID,P.PROJECT_NAME,P.PROJECT_TYPE_CODE,P.ESTIMATED_START_DATE,P.ESTIMATED_COMPLETION_DATE,P.ACTUAL_START_DATE,P.ACTUAL_COMPLETION_DATE,P.PROJECT_STATUS_TYPE_CODE  FROM gnieprojectmanagement.GPM_PROJECTS P, gnieprojectmanagement.GPM_TASKS T WHERE "+
        "P.ESTIMATED_COMPLETION_DATE = NOW() AND "+
        " P.PROJECT_STATUS_TYPE_CODE IN('IP','NS','HOLD') AND P.TENANT_ID=?  AND  P.ID =T.PROJECT_ID AND T.ASSIGNED_TO=?",
    
    projectDueDateInDayPM:" SELECT ID,PROJECT_NAME,PROJECT_TYPE_CODE,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,PROJECT_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_PROJECTS WHERE CREATED_BY=? AND "+
        "PROJECT_STATUS_TYPE_CODE IN('IP','NS','HOLD') AND TENANT_ID=? AND "+
        "ESTIMATED_COMPLETION_DATE  BETWEEN DATE_ADD(DATE(NOW()), INTERVAL 1 DAY) AND DATE_ADD(DATE(NOW()), INTERVAL ? DAY)",
    
    projectDueDateInDayEmp:"SELECT P.ID,P.PROJECT_NAME,P.PROJECT_TYPE_CODE,P.ESTIMATED_START_DATE,P.ESTIMATED_COMPLETION_DATE,P.ACTUAL_START_DATE,P.ACTUAL_COMPLETION_DATE,P.PROJECT_STATUS_TYPE_CODE  FROM gnieprojectmanagement.GPM_PROJECTS P, gnieprojectmanagement.GPM_TASKS T WHERE "+
        "P.PROJECT_STATUS_TYPE_CODE IN('IP','NS','HOLD') AND P.TENANT_ID=?  AND  P.ID =T.PROJECT_ID AND T.ASSIGNED_TO=? "+
        "AND  P.ESTIMATED_COMPLETION_DATE  BETWEEN DATE_ADD(DATE(NOW()), INTERVAL 1 DAY) AND DATE_ADD(DATE(NOW()), INTERVAL ? DAY) ;",
    
    projectNotStartedPM:"SELECT ID,PROJECT_NAME,PROJECT_TYPE_CODE,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,PROJECT_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_PROJECTS WHERE CREATED_BY=? AND "+
        "PROJECT_STATUS_TYPE_CODE ='NS' AND TENANT_ID=?",
    projectNotStartedEmp:"SELECT P.ID,P.PROJECT_NAME,P.PROJECT_TYPE_CODE,P.ESTIMATED_START_DATE,P.ESTIMATED_COMPLETION_DATE,P.ACTUAL_START_DATE,P.ACTUAL_COMPLETION_DATE,P.PROJECT_STATUS_TYPE_CODE  FROM gnieprojectmanagement.GPM_PROJECTS P, gnieprojectmanagement.GPM_TASKS T WHERE "+
        "P.PROJECT_STATUS_TYPE_CODE ='NS' AND P.TENANT_ID=?  AND  P.ID =T.PROJECT_ID AND T.ASSIGNED_TO=?;",
    getTotalHours:" SELECT SUM(HOURS) AS TOTAL_HOURS FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE USER_ID = ? AND LOG_DATE = ? AND TENANT_ID = ? AND WORKLOG_STATUS='ACTIVE' ",
    checkTimeCardDetail:"SELECT * FROM gnietimemanagement.GPMS_TIMECARD_DETAIL WHERE TIMECARD_ID=? AND  USER_ID=?  AND TENANT_ID=?",
    updateLogWork:"UPDATE gnieprojectmanagement.GPM_WORK_LOGS SET  HOURS=?, TASK_DESCRIPTION=?,LOG_DATE=? WHERE ID=?",
    startTask:"UPDATE gnieprojectmanagement.GPM_TASKS set TASK_STATUS_TYPE_CODE = ?,UPDATED_BY=?, ACTUAL_START_DATE = ? WHERE ID=?;",
    holdTask:"UPDATE gnieprojectmanagement.GPM_TASKS set TASK_STATUS_TYPE_CODE = ? WHERE ID=?;",
    logWorkQuery:"INSERT INTO gnieprojectmanagement.GPM_WORK_LOGS (TASK_ID,TENANT_ID,USER_ID,LOG_DATE,TASK_DESCRIPTION,HOURS,WORKLOG_STATUS,BILLABLE_FLAG,CREATED_BY,UPDATED_BY) "+
        "VALUES(?,?,?,?,?,?,?,?,?,?);",
    getHourDetails:"select sum(HOURS) AS TOTAL_HOURS,(SELECT HOURS FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE ID = ?) AS CURRENT_HOUR FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE LOG_DATE = ? AND USER_ID = ? AND WORKLOG_STATUS='ACTIVE';",
    viewWorkLogsQuery : "SELECT ID,TASK_ID,(SELECT TASK_NAME FROM gnieprojectmanagement.GPM_TASKS WHERE ID = GWL.TASK_ID) AS TASK_NAME,TENANT_ID,USER_ID,LOG_DATE,TASK_DESCRIPTION,HOURS FROM gnieprojectmanagement.GPM_WORK_LOGS GWL WHERE USER_ID=? AND WORKLOG_STATUS = 'ACTIVE';",
    getAutomatedTasks:"SELECT GU.USER_NAME,GU.FULL_NAME,(SELECT USER_NAME FROM gnieplatform.GPF_USER WHERE ID=GT.ASSIGNED_BY) AS ASSIGNED_USER_NAME, "+
    "(SELECT WHATSAPP_ID FROM gnieplatform.GPF_TENANTS WHERE ID=GT.TENANT_ID) AS WHATSAPP_ID,"+
    "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=GT.PROJECT_ID) AS PROJECT_NAME,GU.ID AS USER_ID,GU.EMAIL,GU.WHATSAPP_NUMBER,GT.ID AS TASK_ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_BY,GT.ASSIGNED_TO,GT.ORDER_OF_EXECUTION "+
        "FROM gnieplatform.GPF_USER GU,gnieprojectmanagement.GPM_TASKS GT WHERE GT.PROJECT_ID = ? AND GT.IS_AUTOMATED = TRUE AND GT.ASSIGNED_TO = GU.ID;",
    startAutomatedProject:"UPDATE gnieprojectmanagement.GPM_PROJECTS SET PROJECT_STATUS_TYPE_CODE = ?,ACTUAL_START_DATE = DATE(NOW()) WHERE ID=?;",
    startAutomatedTask:"UPDATE gnieprojectmanagement.GPM_TASKS SET TASK_STATUS_TYPE_CODE = ?,ACTUAL_START_DATE = DATE(NOW()) WHERE ID IN ?;",
    getTasksDataToNotify:"SELECT GU.FULL_NAME,(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID=GT.ASSIGNED_BY) AS ASSIGNED_USER_NAME,"+
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=GT.PROJECT_ID) AS PROJECT_NAME,"+
        "(SELECT APPROVAL_REQUIRED FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=GT.PROJECT_ID) AS subStatus,"+
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID=GT.TENANT_ID) AS TENANT_NAME,"+
        "(SELECT WHATSAPP_ID FROM gnieplatform.GPF_TENANTS WHERE ID=GT.TENANT_ID) AS WHATSAPP_ID,"+
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE AND TENANT_ID=? AND LOOKUP_TYPE = 'PROJECT_STATUS') AS STATUS,"+
        "GU.ID AS USER_ID,GU.EMAIL,GU.WHATSAPP_NUMBER,GT.ID AS TASK_ID,GT.PROJECT_ID,GT.ESTIMATED_COMPLETION_DATE,"+
        "GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_BY "+
        "FROM gnieplatform.GPF_USER GU,gnieprojectmanagement.GPM_TASKS GT WHERE GT.ID = ? AND GT.ASSIGNED_TO = GU.ID;",
    getProjectDataToNotify:"SELECT GU.FULL_NAME,"+
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID=GPT.USER_ID) AS USER_EMAIL,"+
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID=GPT.TENANT_ID) AS TENANT_NAME,"+
        "(SELECT WHATSAPP_ID FROM gnieplatform.GPF_TENANTS WHERE ID=GPT.TENANT_ID) AS WHATSAPP_ID,"+
        "(SELECT PROJECT_DESCRIPTION FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=GP.ID) AS PROJECT_DESCRIPTION,"+
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=GP.ID) AS PROJECT_NAME,"+
        "GU.ID AS USER_ID,GU.WHATSAPP_NUMBER,GP.ID AS PROJECT_ID,GP.TENANT_ID "+
        "FROM gnieplatform.GPF_USER GU,gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
        "WHERE GP.ID = ? AND GP.ID = GPT.PROJECT_ID AND GPT.USER_ID = GU.ID AND GU.ID = ?;",
    onHoldEmp: "SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER," +
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME," +
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL, " +
        "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_NAME," +
        "(select ID FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=GT.PROJECT_ID) PROJECT_ID," +
        "GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE," +
        "GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE," +
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT " +
        "WHERE GT.TENANT_ID = ? AND GT.ASSIGNED_TO = ? AND GT.TASK_STATUS_TYPE_CODE ='HOLD';",
    deleteWorkLog: "update gnieprojectmanagement.GPM_WORK_LOGS SET WORKLOG_STATUS='INACTIVE' WHERE ID=?",
    assignTeamFromTemplate:"SELECT ID,PROJECT_ID,TENANT_ID,ASSIGNED_TO FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = ?;",
    addBulkTeam:"INSERT INTO gnieprojectmanagement.GPM_PROJECT_TEAM (TENANT_ID,USER_ID,PROJECT_ID,EFFECTIVE_START_DATE,ROLE_TYPE_CODE,CREATED_BY,UPDATED_BY) VALUES ? ",

    addNotification:"INSERT INTO  gnieplatform.GPF_NOTIFICATIONS (TENANT_ID,SENT_FROM,SENT_TO,MESSAGE,UNIT_ID,UNIT_TYPE,CREATION_DATE,CREATED_BY,LAST_UPDATED_DATE,UPDATED_BY,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE) VALUES(?,?,?,?,?,?,now(),?, now(),?,now(),now())",

    getUserProjectDetails : "SELECT GU.EMPLOYEE_NUMBER,GU.ID,GU.FULL_NAME,GU.EMAIL,"+
    "(SELECT GPFU.NAME FROM gnieplatform.GPF_ORGANIZATION_UNIT GPFU,gnieplatform.GPF_USER_ORGANIZATION_UNIT_MAPPING GPFM WHERE GPFU.TYPE = 'DESIGNATION'"+
    " AND GPFU.ID = GPFM.ORG_UNIT_ID AND GPFM.USER_ID = GU.ID) AS DESIGNATION,"+
    "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GP.ID = GPT.PROJECT_ID AND GPT.USER_ID = GU.ID AND GPT.EFFECTIVE_END_DATE IS NULL"+
    " AND PROJECT_STATUS_TYPE_CODE NOT IN ('COM','CLOSED')"+
    ") AS ACTIVE_PROJECTS FROM gnieplatform.GPF_USER GU"+
    " WHERE GU.TENANT_ID = ? AND GU.ID NOT IN (SELECT USER_ID FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GPT.PROJECT_ID = ? AND GPT.EFFECTIVE_END_DATE IS NULL ) AND GU.EFFECTIVE_END_DATE IS NULL "+
    "AND GU.ID NOT IN (SELECT USER_ID FROM gnieplatform.GPF_CLIENT_USER_MAPPING WHERE TENANT_ID = GU.TENANT_ID) "+
    " GROUP BY EMPLOYEE_NUMBER,ID,FULL_NAME,EMAIL,DESIGNATION,ACTIVE_PROJECTS ORDER BY FULL_NAME",

    addProjectTeam:"INSERT INTO gnieprojectmanagement.GPM_PROJECT_TEAM (TENANT_ID,USER_ID,PROJECT_ID,EFFECTIVE_START_DATE,ROLE_TYPE_CODE,FUNCTIONAL_ROLE_ID,CREATED_BY,UPDATED_BY) VALUES ? ",

    getProjectTeamDetails : "SELECT GU.EMPLOYEE_NUMBER,GU.ID,GU.FULL_NAME,GU.EMAIL,GU.EFFECTIVE_END_DATE,GU.TENANT_ID,GU.WHATSAPP_NUMBER,GT.WHATSAPP_ID,"+
    "(SELECT GPFU.NAME FROM gnieplatform.GPF_ORGANIZATION_UNIT GPFU,gnieplatform.GPF_USER_ORGANIZATION_UNIT_MAPPING GPFM WHERE GPFU.TYPE = 'DESIGNATION' "+
    "AND GPFU.ID = GPFM.ORG_UNIT_ID AND GPFM.USER_ID = GU.ID) AS DESIGNATION, "+
    "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE ASSIGNED_TO = GU.ID AND PROJECT_ID = ? AND TASK_STATUS_TYPE_CODE NOT IN ('CLOSED','OBSOLETE')) AS TOTAL_TASKS, "+
    "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE ASSIGNED_TO = GU.ID AND TASK_STATUS_TYPE_CODE = 'COM' AND TASK_STATUS_TYPE_CODE != 'CLOSED' AND TASK_STATUS_TYPE_CODE != 'OBSOLETE'  AND PROJECT_ID = ? ) AS COMPLETED_TASK,"+
    "(SELECT GROUP_CONCAT(ROLE_TYPE_CODE) FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE USER_ID = GU.ID AND PROJECT_ID = ? AND EFFECTIVE_END_DATE IS NULL) AS ROLE_CODE,"+
    "(SELECT SUM(HOURS) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID IN (SELECT ID FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = ? AND USER_ID = GU.ID) AND WORKLOG_STATUS = 'ACTIVE' ) AS TOTAL_HOURS, "+
    "GPT.FUNCTIONAL_ROLE_ID,CASE WHEN GPT.FUNCTIONAL_ROLE_ID IS NULL THEN 'EMPLOYEE' ELSE (SELECT UPPER(ROLE_NAME) FROM gnieplatform.GPF_FUNCTIONAL_ROLE WHERE ID=GPT.FUNCTIONAL_ROLE_ID) END FUNCTIONAL_ROLE_NAME "+
    "FROM gnieplatform.GPF_USER GU, gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_TENANTS GT "+
    "WHERE GU.ID = GPT.USER_ID AND GPT.PROJECT_ID = ? AND GPT.EFFECTIVE_END_DATE IS NULL AND GT.ID = GU.TENANT_ID "+
    "GROUP BY EMPLOYEE_NUMBER,ID,FULL_NAME,EMAIL,DESIGNATION,FUNCTIONAL_ROLE_ID,FUNCTIONAL_ROLE_NAME ORDER BY EFFECTIVE_END_DATE,CASE WHEN FUNCTIONAL_ROLE_NAME like '%PROJECT MANAGER%' THEN 0 ELSE 1 END,CASE WHEN ROLE_CODE like '%OWNER%' THEN 0 ELSE 1 END, FULL_NAME ASC",
    
    changeProjectStatus:"UPDATE  gnieprojectmanagement.GPM_PROJECTS  SET PROJECT_STATUS_TYPE_CODE=?,LAST_UPDATED_DATE = now()  WHERE ID= ? AND TENANT_ID=?",
    
    changeTaskStatusHold:"UPDATE  gnieprojectmanagement.GPM_TASKS  SET TASK_STATUS_TYPE_CODE=? WHERE PROJECT_ID= ? AND TENANT_ID=? AND TASK_STATUS_TYPE_CODE ='IP' ",

    allTaskOpenEmp:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER," +
    "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME,"+
    "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL, "+
    "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_NAME,"+
    "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) PROJECT_ID, "+
    "GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,"+
    "GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
    "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS GT "+
    "WHERE GT.TENANT_ID = ? AND GT.ASSIGNED_TO = ? AND GT.TASK_STATUS_TYPE_CODE ='OP';",
    setProjectInProgress:"UPDATE gnieprojectmanagement.GPM_PROJECTS SET PROJECT_STATUS_TYPE_CODE=? ,ACTUAL_START_DATE=? WHERE "+
        "TENANT_ID=? AND UPDATED_BY=? AND ID=(SELECT PROJECT_ID FROM gnieprojectmanagement.GPM_TASKS WHERE ID=?) ;",
    checkStatusOfProject:"SELECT PROJECT_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_PROJECTS  WHERE ID= "+
        "(SELECT PROJECT_ID FROM gnieprojectmanagement.GPM_TASKS WHERE ID=?) AND TENANT_ID=?;",
    // getMainTasks:"SELECT DISTINCT T.ID,T.TASK_NAME, T.TASK_DESCRIPTION,T.TASK_TYPE_CODE,T.PRIORITY_TYPE_CODE,T.TASK_STATUS_TYPE_CODE, L.DISPLAY_VALUE,"+
    //     "T.ASSIGNED_TO , T.ASSIGNED_BY, T.ESTIMATED_EFFORT, T.ACTUAL_EFFORT,T.ACTUAL_START_DATE,T.ACTUAL_COMPLETION_DATE,"+
    //     "T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE,"+
    //     "U.FULL_NAME,T.IS_AUTOMATED,T.ORDER_OF_EXECUTION,(SELECT CASE WHEN T.ID  = ST.TASK_ID THEN 'true' ELSE 'False'  END  FROM gnieprojectmanagement.GPM_SUB_TASKS ST WHERE T.ID=ST.TASK_ID) HAS_SUB_TASK "+
    //     "FROM gnieprojectmanagement.GPM_TASKS  T ,gnieplatform.GPF_USER U ,gnieplatform.GPF_LOOKUP L "+
    //     "WHERE T.PROJECT_ID=? AND T.TENANT_ID=? AND  U.ID=T.ASSIGNED_TO AND T.TASK_STATUS_TYPE_CODE=L.LOOKUP_CODE AND L.LOOKUP_TYPE = 'PROJECT_STATUS' "+
    //     "GROUP BY T.ID,T.TASK_NAME,T.TASK_DESCRIPTION,T.TASK_TYPE_CODE,T.PRIORITY_TYPE_CODE,T.TASK_STATUS_TYPE_CODE, L.DISPLAY_VALUE , "+
    //     "T.ASSIGNED_TO , T.ASSIGNED_BY, T.ESTIMATED_EFFORT, T.ACTUAL_EFFORT,T.ACTUAL_START_DATE,T.ACTUAL_COMPLETION_DATE, "+
    //     "T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE,"+
    //     "U.FULL_NAME,HAS_SUB_TASK,T.IS_AUTOMATED,T.ORDER_OF_EXECUTION",
    getMainTasks:"SELECT T.ID,T.TASK_NAME,T.TASK_DESCRIPTION,T.TASK_TYPE_CODE,T.PRIORITY_TYPE_CODE,T.TASK_STATUS_TYPE_CODE,L.DISPLAY_VALUE,T.ASSIGNED_TO, "+
    "T.ASSIGNED_BY,T.ESTIMATED_EFFORT,T.ACTUAL_EFFORT,T.ACTUAL_START_DATE, "+
    "T.ACTUAL_COMPLETION_DATE,T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE,T.PROGRESS,U.FULL_NAME, "+
    "T.IS_AUTOMATED,T.ORDER_OF_EXECUTION,  T.TYPE,T.CREATION_DATE,T.GROUP_ID,"+
    "(SELECT CASE WHEN EXISTS (SELECT WL.USER_ID  FROM gnieprojectmanagement.GPM_WATCH_LIST WL WHERE "+ 
    "WL.ENTITY_ID=T.ID  AND WL.STATUS='ACTIVE' ) THEN 'true' ELSE 'false' END ) ADDED_TO_WATCH_LIST, "+
    "(SELECT GROUP_CONCAT(USER_ID)  FROM gnieprojectmanagement.GPM_WATCH_LIST "+
    "WHERE TYPE='TASK' AND ENTITY_ID=T.ID AND TENANT_ID=T.TENANT_ID AND STATUS='ACTIVE') AS WATCHING_USERS ,"+
    "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE TYPE='SUB' && MAIN_TASK_ID = T.ID && TASK_STATUS_TYPE_CODE NOT IN ('CLOSED','OBSOLETE')) AS TOTAL_SUB_COUNT, "+
    "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE TYPE='SUB' && MAIN_TASK_ID = T.ID && TASK_STATUS_TYPE_CODE='COM') AS COM_SUB_COUNT, " +
    "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.ASSIGNED_TO AND T.TENANT_ID=U.TENANT_ID) AS ASSIGNED_TO_NAME, "+
    "(SELECT GFR.ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = T.PROJECT_ID and GPT.USER_ID = T.ASSIGNED_TO AND T.ASSIGNED_TO=U.ID AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) AS ROLE_NAME, "+
    "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.CREATED_BY AND T.TENANT_ID=U.TENANT_ID) AS CREATED_BY_NAME, "+
    "(SELECT G.NAME FROM gnieprojectmanagement.GPM_GROUPS G WHERE G.ID=T.GROUP_ID AND G.TENANT_ID=T.TENANT_ID) AS GROUP_NAME,"+
    "(SELECT G.GROUP_ORDER FROM gnieprojectmanagement.GPM_GROUPS G WHERE G.ID=T.GROUP_ID AND G.TENANT_ID=T.TENANT_ID) AS GROUP_ORDER,"+
    "(SELECT G.START_DATE FROM gnieprojectmanagement.GPM_GROUPS G WHERE G.ID=T.GROUP_ID AND G.TENANT_ID=T.TENANT_ID) AS START_DATE,"+
    "(SELECT G.END_DATE FROM gnieprojectmanagement.GPM_GROUPS G WHERE G.ID=T.GROUP_ID AND G.TENANT_ID=T.TENANT_ID) AS END_DATE,"+
    "(SELECT L.DISPLAY_VALUE FROM gnieprojectmanagement.GPM_GROUPS G,gnieplatform.GPF_LOOKUP L "+
    "WHERE G.ID=T.GROUP_ID AND G.TENANT_ID=T.TENANT_ID AND G.TENANT_ID=L.TENANT_ID AND L.LOOKUP_CODE=G.STATUS "+
    "AND L.LOOKUP_TYPE='PROJECT_STATUS') AS GROUP_STATUS,"+
    "(SELECT GROUP_CONCAT(PT.USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM PT  WHERE PT.PROJECT_ID=T.PROJECT_ID AND PT.TENANT_ID=T.TENANT_ID AND PT.ROLE_TYPE_CODE='OWNER') AS PROJECT_OWNERS ,"+
    "(SELECT U.ID FROM gnieplatform.GPF_USER U  WHERE U.ID=T.CREATED_BY AND U.TENANT_ID=T.TENANT_ID)  AS CREATED_BY , "+
    "(SELECT GROUP_CONCAT(D.PREDECESSOR_TASK_ID) FROM gnieprojectmanagement.GPM_DEPENDENT_TASKS D WHERE D.TASK_ID=T.ID) AS PREDECESSOR_TASKS ,"+
    "(SELECT GROUP_CONCAT(D.SUCCESSOR_TASK_ID) FROM gnieprojectmanagement.GPM_DEPENDENT_TASKS D WHERE D.TASK_ID=T.ID) AS SUCCESSOR_TASKS,"+
    "(SELECT CASE WHEN EXISTS (SELECT ST.ID FROM gnieprojectmanagement.GPM_TASKS ST WHERE "+
    "T.ID = ST.MAIN_TASK_ID AND TASK_STATUS_TYPE_CODE !='CLOSED' AND TASK_STATUS_TYPE_CODE !='OBSOLETE' )THEN 'true' ELSE 'false' END ) HAS_SUB_TASK, "+
    "(SELECT CASE WHEN EXISTS (SELECT MTM.ID FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING MTM WHERE "+
    "T.ID = MTM.TASK_ID AND MTM.EFFECTIVE_END_DATE IS NULL ) THEN 'true' ELSE 'false' END ) ADDED_TO_MILESTONE, "+
    "(SELECT gm.NAME FROM gnieprojectmanagement.GPM_MILESTONE gm,gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING MTM1 WHERE gm.ID = MTM1.MILESTONE_ID AND MTM1.TASK_ID = T.ID AND MTM1.EFFECTIVE_END_DATE IS NULL group by gm.NAME ) AS MILESONE_NAME,"+
    "(SELECT gm.ID FROM gnieprojectmanagement.GPM_MILESTONE gm,gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING MTM1 WHERE gm.ID = MTM1.MILESTONE_ID AND MTM1.TASK_ID = T.ID AND MTM1.EFFECTIVE_END_DATE IS NULL group by gm.ID) AS MILESTONE_ID,"+
    "(SELECT CASE WHEN EXISTS (SELECT G.ID FROM gnieplatform.GPF_RULES G,gnieprojectmanagement.GPM_RECURRING_TASK R WHERE G.ID =R.RULE_ID AND R.TASK_ID=T.ID AND R.TENANT_ID=T.TENANT_ID AND R.END_DATE > DATE_FORMAT(NOW(), '%Y-%m-%d')) "+
        "THEN 'true' ELSE 'false' END ) IS_RECURRING, "+
    "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) end AS GROUP_MIN_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) end AS GROUP_MAX_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) end AS TASK_MIN_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) end AS TASK_MAX_AMT, "+
    "(SELECT GC.SYMBOL FROM gnieplatform.GPF_CURRENCY GC, gnieprojectmanagement.GPM_BUDGET GB WHERE CLASS_ID=T.PROJECT_ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=T.TENANT_ID AND GC.CODE = GB.CURRENCY_CODE) AS CURRENCY_CODE "+
    " FROM gnieprojectmanagement.GPM_TASKS T LEFT JOIN  gnieplatform.GPF_USER U  ON T.ASSIGNED_TO=U.ID LEFT JOIN "+
     "gnieplatform.GPF_LOOKUP L  ON T.TASK_STATUS_TYPE_CODE = L.LOOKUP_CODE AND L.LOOKUP_TYPE = 'PROJECT_STATUS' "+
    "WHERE "+
    "T.PROJECT_ID =?  AND T.TYPE='MAIN' "+
    "AND T.TENANT_ID =? AND T.TASK_STATUS_TYPE_CODE NOT IN ('COM','CLOSED','OBSOLETE') "+
    "GROUP BY "+
    "T.ID, T.TASK_NAME, T.TASK_DESCRIPTION, T.TASK_TYPE_CODE, T.PRIORITY_TYPE_CODE, ROLE_NAME,  "+
    "T.TASK_STATUS_TYPE_CODE, L.DISPLAY_VALUE , T.ASSIGNED_TO , T.ASSIGNED_BY, T.ESTIMATED_EFFORT, "+
    "T.ACTUAL_EFFORT, T.ACTUAL_START_DATE, T.ACTUAL_COMPLETION_DATE, T.ESTIMATED_START_DATE, "+ 
    "T.ESTIMATED_COMPLETION_DATE, U.FULL_NAME, HAS_SUB_TASK, T.IS_AUTOMATED, T.ORDER_OF_EXECUTION,PREDECESSOR_TASKS,SUCCESSOR_TASKS  ORDER BY START_DATE,T.CREATION_DATE,GROUP_NAME  " ,
    		
    getSubTasks:"SELECT  ST.ID,ST.TASK_NAME AS SUB_TASK_NAME, ST.TASK_DESCRIPTION,ST.PRIORITY_TYPE_CODE,ST.TASK_STATUS_TYPE_CODE ,L.DISPLAY_VALUE, "+
    "ST.ASSIGNED_TO , ST.ASSIGNED_BY, ST.ESTIMATED_EFFORT, ST.ACTUAL_EFFORT,ST.ACTUAL_START_DATE, 'Sub Task' AS TASK_TYPE,ST.TYPE,ST.MAIN_TASK_ID, "+
    "ST.ACTUAL_COMPLETION_DATE,ST.ESTIMATED_START_DATE,ST.ESTIMATED_COMPLETION_DATE,ST.PROGRESS, "+
    "(SELECT GROUP_CONCAT(USER_ID)  FROM gnieprojectmanagement.GPM_WATCH_LIST "+
    "WHERE TYPE='TASK' AND ENTITY_ID=ST.ID AND TENANT_ID=ST.TENANT_ID AND STATUS='ACTIVE') AS WATCHING_USERS ,"+
    "(SELECT  U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=ST.CREATED_BY AND U.TENANT_ID=ST.TENANT_ID) AS CREATED_BY_NAME,"+
    "(SELECT  U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=ST.ASSIGNED_BY AND U.TENANT_ID=ST.TENANT_ID) AS FULL_NAME, "+
    "(SELECT  U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=ST.ASSIGNED_TO AND U.TENANT_ID=ST.TENANT_ID) AS ASSIGNED_TO_NAME, "+
    "(SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = ST.PROJECT_ID and GPT.USER_ID = ST.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) AS ROLE_NAME, "+
    "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=ST.ID AND CLASS_TYPE='SUBTASK' AND TENANT_ID=ST.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=ST.ID AND CLASS_TYPE='SUBTASK' AND TENANT_ID=ST.TENANT_ID) end AS TASK_MIN_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=ST.ID AND CLASS_TYPE='SUBTASK' AND TENANT_ID=ST.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=ST.ID AND CLASS_TYPE='SUBTASK' AND TENANT_ID=ST.TENANT_ID) end AS TASK_MAX_AMT, "+
    "(SELECT GC.SYMBOL FROM gnieplatform.GPF_CURRENCY GC, gnieprojectmanagement.GPM_BUDGET GB WHERE CLASS_ID=ST.PROJECT_ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=ST.TENANT_ID AND GC.CODE = GB.CURRENCY_CODE) AS CURRENCY_CODE "+
    "FROM gnieprojectmanagement.GPM_TASKS ST,gnieplatform.GPF_LOOKUP L "+ 
    "WHERE ST.MAIN_TASK_ID=? AND  ST.TENANT_ID=? AND L.TENANT_ID=ST.TENANT_ID  AND TASK_STATUS_TYPE_CODE!='CLOSED' AND TASK_STATUS_TYPE_CODE!='OBSOLETE' AND L.LOOKUP_CODE=ST.TASK_STATUS_TYPE_CODE AND LOOKUP_TYPE='PROJECT_STATUS'  "+
    "GROUP BY ST.ID,ST.TASK_NAME, ST.TASK_DESCRIPTION,ST.PRIORITY_TYPE_CODE,ST.TASK_STATUS_TYPE_CODE ,L.DISPLAY_VALUE, "+
    "ST.ASSIGNED_TO , ST.ASSIGNED_BY, ST.ESTIMATED_EFFORT, ST.ACTUAL_EFFORT,ST.ACTUAL_START_DATE,ST.ACTUAL_COMPLETION_DATE, "+
    "ST.ESTIMATED_START_DATE,ST.ESTIMATED_COMPLETION_DATE,TASK_TYPE,FULL_NAME",

    subTaskNameExistsQuery: "SELECT * FROM gnieprojectmanagement.GPM_SUB_TASKS WHERE TASK_ID=? AND SUB_TASK_NAME=?",

    createSubTask : "INSERT INTO gnieprojectmanagement.GPM_SUB_TASKS (TENANT_ID,TASK_ID,SUB_TASK_NAME,SUB_TASK_DESCRIPTION,ASSIGNED_BY,TASK_STATUS_TYPE_CODE, " +
        "PRIORITY_TYPE_CODE,CAN_CONTINUE,ORDER_OF_EXECUTION,IS_AUTOMATED,ESTIMATED_START_DATE," +
        "ESTIMATED_COMPLETION_DATE,ESTIMATED_EFFORT,CREATED_BY,UPDATED_BY)" + 
        "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",

    getProjectsAssigned : "SELECT GP.ID,PROJECT_NAME,PROJECT_TYPE_CODE FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GP.ID = GPT.PROJECT_ID AND GPT.USER_ID = ? "+
    " AND GPT.EFFECTIVE_END_DATE IS NULL  AND "+
    "GPT.TENANT_ID=? AND UPPER(PROJECT_STATUS_TYPE_CODE) != 'CLOSED' GROUP BY GP.ID,PROJECT_NAME;",

    getProjectOwnerDetails : "SELECT EMPLOYEE_NUMBER,FULL_NAME,EMAIL FROM gnieplatform.GPF_USER WHERE ID IN (?);",

    getEmployeeProjectTasks:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER,"+
    "(select ID from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_ID, "+
    "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME,"+
    "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL,"+
    "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_NAME,"+
    "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ID,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,"+
    "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE GT.TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY GL.DISPLAY_VALUE LIMIT 1) AS DISPLAY_VALUE, "+
    "(SELECT IFNULL(SUM(HOURS),0) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID = GT.ID AND WORKLOG_STATUS = 'ACTIVE' ) AS TOTAL_HOURS,"+
    "GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,"+
    "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.CREATED_BY,GT.ACTUAL_COMPLETION_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.PROJECT_ID = ? AND GT.TENANT_ID =? AND GT.ASSIGNED_TO=? AND GT.TASK_STATUS_TYPE_CODE IN ? ORDER BY LAST_UPDATED_DATE DESC;",
   
    projectStatusQuery:"SELECT ID,PROJECT_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=? AND TENANT_ID=?;",
    
    setProjectStatusIP:"UPDATE gnieprojectmanagement.GPM_PROJECTS SET PROJECT_STATUS_TYPE_CODE='IP',UPDATED_BY=? WHERE ID=? AND TENANT_ID=?",
    estimatedEndDateInBetween: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO,"+
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE " +
        "FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ESTIMATED_COMPLETION_DATE BETWEEN ? AND ? " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?);",
    estimatedEndDateInBetweenOfProject: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE " +
        "FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ESTIMATED_COMPLETION_DATE BETWEEN ? AND ? " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) AND GT.PROJECT_ID=?;",
    taskStartedOn: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO,"+
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME,"+
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS,"+
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ACTUAL_START_DATE = ?" +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?);",
    taskStartedOnOfProject: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ACTUAL_START_DATE = ?" +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) AND GT.PROJECT_ID=?;",
    estimatedEndDateOn: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ESTIMATED_COMPLETION_DATE = ?" +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?);",
    estimatedEndDateOnOfProject: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ESTIMATED_COMPLETION_DATE = ?" +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) AND GT.PROJECT_ID=?;",
    tasksAssignedTo: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT APPROVAL_REQUIRED FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS AWAITING_APPROVAL,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ASSIGNED_TO in (SELECT ID FROM gnieplatform.GPF_USER WHERE EMAIL  = ?)" +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?)",
    tasksAssignedToOfProject: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ASSIGNED_TO = (SELECT ID FROM gnieplatform.GPF_USER WHERE EMAIL  = ?)" +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) AND GT.PROJECT_ID=?;",
    tasksExpired: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE DATE(NOW())>GT.ESTIMATED_COMPLETION_DATE " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?);",
    tasksExpiredOfProject: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE DATE(NOW())>GT.ESTIMATED_COMPLETION_DATE " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) AND GT.PROJECT_ID = ?;",
    tasksExpireInDays: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO,"+
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME,"+
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS,"+
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE,"+
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ESTIMATED_COMPLETION_DATE "+
        "BETWEEN DATE_ADD(DATE(NOW()), INTERVAL 1 DAY) AND DATE_ADD(DATE(NOW()), INTERVAL ? DAY) " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?);",
    tasksExpireInDaysOfProject: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ESTIMATED_COMPLETION_DATE " +
        "BETWEEN DATE_ADD(DATE(NOW()), INTERVAL 1 DAY) AND DATE_ADD(DATE(NOW()), INTERVAL ? DAY) " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) AND GT.PROJECT_ID = ?;",
    tasksExpiringToday: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE DATE(NOW())=GT.ESTIMATED_COMPLETION_DATE " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?);",
    tasksExpiringTodayOfProject: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE DATE(NOW())=GT.ESTIMATED_COMPLETION_DATE " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) AND GT.PROJECT_ID = ?;",
    taskStartedBeforeDate: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ACTUAL_START_DATE < ? " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?);",
    taskStartedBeforeDateOfProject: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ACTUAL_START_DATE < ? " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) and GT.PROJECT_ID = ?;",
    taskStartedAfterDate: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ACTUAL_START_DATE > ? " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?);",
    taskStartedAfterDateOfProject: "SELECT GT.ID,GT.PROJECT_ID,GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, GT.ASSIGNED_TO," +
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID = GT.PROJECT_ID) AS PROJECT_NAME," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS ASSIGNED_USER_NAME,GT.ASSIGNED_BY," +
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_BY) AS ASSIGNED_BY_USER_NAME," +
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE LIMIT 1) AS STATUS," +
        "(SELECT WHATSAPP_NUMBER FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS WHATSAPP_NUMBER," +
        "(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE ID = GT.ASSIGNED_TO) AS USER_EMAIL," +
        "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID = GT.TENANT_ID) AS TENANT_NAME," +
        "GT.CAN_CONTINUE,GT.IS_AUTOMATED,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GT.ACTUAL_COMPLETION_DATE," +
        "GT.ACTUAL_START_DATE FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.ACTUAL_START_DATE > ? " +
        "AND GT.TASK_STATUS_TYPE_CODE IN (?) AND GT.PROJECT_ID = ?;",
    changeTaskStatusIP:"UPDATE  gnieprojectmanagement.GPM_TASKS  SET TASK_STATUS_TYPE_CODE=? WHERE PROJECT_ID= ? AND TENANT_ID=? AND TASK_STATUS_TYPE_CODE ='HOLD' ",
    getTaskWorkLog:"SELECT  L.ID,L.LOG_DATE,L.USER_ID,L.TASK_DESCRIPTION,L.CREATION_DATE,L.HOURS,L.BILLABLE_FLAG,U.FULL_NAME,U.EMPLOYEE_NUMBER,U.EMAIL "+
        "FROM gnieprojectmanagement.GPM_WORK_LOGS L ,"+
        " gnieplatform.GPF_USER U WHERE L.TASK_ID=? AND  L.TENANT_ID=? "+
        " AND L.WORKLOG_STATUS='ACTIVE'  AND U.ID=L.USER_ID ORDER BY L.CREATION_DATE DESC;  ",
    
    isTaskAssignedToMember:"SELECT  ID FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID=? AND ASSIGNED_TO=? AND TENANT_ID=? "+
        "AND TASK_STATUS_TYPE_CODE IN('IP','OPEN','HOLD','COM');",

    removeFromProjectTeam:"UPDATE  gnieprojectmanagement.GPM_PROJECT_TEAM SET EFFECTIVE_END_DATE=NOW() WHERE PROJECT_ID=? AND USER_ID=? AND TENANT_ID=?;",

    // getTeamProjects : "SELECT GU.ID AS USER_ID,GU.EMPLOYEE_NUMBER, GU.FULL_NAME, GU.FIRST_NAME, GU.EMAIL,GP.PROJECT_NAME,GP.ID AS PROJECT_ID,GP.PROJECT_DESCRIPTION,GP.ACTUAL_START_DATE,GP.ACTUAL_COMPLETION_DATE,"+
    // "(SELECT GPO.NAME FROM gnieplatform.GPF_ORGANIZATION_UNIT GPO,gnieplatform.GPF_USER_ORGANIZATION_UNIT_MAPPING GPOM WHERE GPO.ID = GPOM.ORG_UNIT_ID AND GPOM.USER_ID = GU.ID AND GPO.TYPE ='DESIGNATION' ) AS DESIGNATION,"+
    // "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GPT.ROLE_TYPE_CODE AND LOOKUP_TYPE ='ROLE_TYPE' AND TENANT_ID = GU.TENANT_ID ) AS ROLE,"+
    // "datediff(GP.ACTUAL_COMPLETION_DATE,sysdate()) AS PENDING_DAYS FROM gnieplatform.GPF_USER GU,gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
    // "WHERE GP.PROJECT_STATUS_TYPE_CODE IN ('IP') AND GP.ID = GPT.PROJECT_ID AND GPT.USER_ID = GU.ID AND GU.MANAGER_ID = ? "+
    // "GROUP BY USER_ID,EMPLOYEE_NUMBER,FULL_NAME,EMAIL,PROJECT_NAME,PROJECT_ID,PROJECT_DESCRIPTION,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,PENDING_DAYS  order by FULL_NAME;"
    // getTeamProjects:"SELECT GU.ID AS USER_ID,GU.EMPLOYEE_NUMBER, GU.FULL_NAME, GU.FIRST_NAME, GU.EMAIL,GP.PROJECT_NAME,GP.ID AS PROJECT_ID,GP.PROJECT_DESCRIPTION,GP.ACTUAL_START_DATE,GP.ACTUAL_COMPLETION_DATE,GP.ESTIMATED_START_DATE,"+
    //     "GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_TYPE_CODE,GP.PROJECT_STATUS_TYPE_CODE,GP.CREATION_DATE,GP.LAST_UPDATED_DATE,"+
    //     "(SELECT GPO.NAME FROM gnieplatform.GPF_ORGANIZATION_UNIT GPO,gnieplatform.GPF_USER_ORGANIZATION_UNIT_MAPPING GPOM WHERE GPO.ID = GPOM.ORG_UNIT_ID AND GPOM.USER_ID = GU.ID AND GPO.TYPE ='DESIGNATION' ) AS DESIGNATION, "+
    //     "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GPT.ROLE_TYPE_CODE AND LOOKUP_TYPE ='ROLE_TYPE' AND TENANT_ID = GU.TENANT_ID ) AS ROLE,"+ 
    //     "(SELECT SUM(ACTUAL_EFFORT)  FROM gnieprojectmanagement.GPM_TASKS  GT WHERE GP.ID=GT.PROJECT_ID AND GT.ASSIGNED_TO=GU.ID) AS HOURS, "+
    //     "(SELECT GROUP_CONCAT(DISTINCT(GPT.USER_ID)) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT  WHERE GPT.PROJECT_ID=GP.ID AND GPT.ROLE_TYPE_CODE='OWNER' ) AS ROLE_CODE, "+
    //     "(SELECT MAX( datediff(GT.ACTUAL_COMPLETION_DATE,sysdate()))  FROM gnieprojectmanagement.GPM_TASKS  GT, gnieprojectmanagement.GPM_PROJECTS GP1 WHERE GT.ASSIGNED_TO = GU.ID AND GP1.ID = GT.PROJECT_ID AND GP1.ID = GP.ID  ) AS PENDING_DAYS "+
    //     "FROM gnieplatform.GPF_USER GU, gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
    //     "WHERE GP.PROJECT_STATUS_TYPE_CODE IN ('IP') AND GP.ID = GPT.PROJECT_ID AND GPT.USER_ID = GU.ID  AND GPT.EFFECTIVE_END_DATE IS NULL  AND GP.TENANT_ID=?"+ 
    //     "GROUP BY USER_ID,EMPLOYEE_NUMBER,FULL_NAME,EMAIL,PROJECT_NAME,PROJECT_ID,PROJECT_DESCRIPTION,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,PENDING_DAYS,GPT.ROLE_TYPE_CODE  ORDER BY  FULL_NAME",
        getTeamProjects:"SELECT GU.ID AS USER_ID,GU.EMPLOYEE_NUMBER,GU.FULL_NAME,GU.FIRST_NAME,GU.EMAIL,GP.PROJECT_NAME,GP.ID AS PROJECT_ID, "+
        "GP.PROJECT_DESCRIPTION,GP.ACTUAL_START_DATE,GP.ACTUAL_COMPLETION_DATE,GP.ESTIMATED_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_TYPE_CODE,GP.PROJECT_STATUS_TYPE_CODE, "+
        "GP.CREATION_DATE,GP.LAST_UPDATED_DATE, "+
        "(SELECT GPFU.NAME FROM gnieplatform.GPF_ORGANIZATION_UNIT GPFU, "+
        "gnieplatform.GPF_USER_ORGANIZATION_UNIT_MAPPING GPFM WHERE GPFU.TYPE = 'DESIGNATION' AND GPFU.ID = GPFM.ORG_UNIT_ID "+
        "AND GPFM.USER_ID = GU.ID) AS DESIGNATION  , "+
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GPT.ROLE_TYPE_CODE "+
        "AND LOOKUP_TYPE = 'ROLE_TYPE' "+
        "AND TENANT_ID = GU.TENANT_ID )AS ROLE, "+
        "(SELECT SUM(ACTUAL_EFFORT) FROM gnieprojectmanagement.GPM_TASKS GT WHERE GP.ID = GT.PROJECT_ID "+
         "AND GT.ASSIGNED_TO = GU.ID)AS HOURS, "+
         "(SELECT COUNT(GT.TASK_NAME) FROM gnieprojectmanagement.GPM_TASKS GT WHERE  GT.PROJECT_ID=GP.ID "+
         "AND GT.ASSIGNED_TO = GU.ID  AND GT.TASK_STATUS_TYPE_CODE IN('COM')) AS TASK_COMPLETED,"+
          "(SELECT COUNT(GT.TASK_NAME) FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.PROJECT_ID=GP.ID "+
         "AND GT.ASSIGNED_TO = GU.ID  AND GT.TASK_STATUS_TYPE_CODE IN('IP','OPEN','HOLD','COM')) AS ACTIVE_TASK,"+
        "( SELECT "+
        "GROUP_CONCAT(DISTINCT(GPT.USER_ID)) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
        "WHERE GPT.PROJECT_ID = GP.ID AND GPT.ROLE_TYPE_CODE = 'OWNER' AND GPT.EFFECTIVE_END_DATE IS NULL)"+
        " AS ROLE_CODE,"+
        "datediff((SELECT MAX(GT.ACTUAL_COMPLETION_DATE) FROM gnieprojectmanagement.GPM_TASKS GT "+
         "WHERE GT.ASSIGNED_TO = GU.ID AND GT.TASK_STATUS_TYPE_CODE NOT IN ('COM','NS','CLOSED','OBSOLETE') "+
         "AND GT.PROJECT_ID = GP.ID ),sysdate()) AS AVAILABLE_IN "+
        "FROM gnieplatform.GPF_USER GU   LEFT JOIN gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
        "ON GU.ID = GPT.USER_ID AND GPT.EFFECTIVE_END_DATE IS NULL  "+
        "LEFT JOIN gnieprojectmanagement.GPM_PROJECTS GP ON GPT.PROJECT_ID = GP.ID "+ 
        "WHERE GU.TENANT_ID = ? AND GP.PROJECT_STATUS_TYPE_CODE ='IP' " +
        "GROUP BY GU.ID,GU.EMPLOYEE_NUMBER,GU.FULL_NAME,"+
        "GU.FIRST_NAME,GU.EMAIL,GP.PROJECT_NAME,GP.ID ,GP.PROJECT_DESCRIPTION , "+
        "GP.ACTUAL_START_DATE,GP.ACTUAL_COMPLETION_DATE,GP.ESTIMATED_START_DATE,GP.ESTIMATED_COMPLETION_DATE, "+
        "GP.PROJECT_TYPE_CODE,GP.PROJECT_STATUS_TYPE_CODE,GP.CREATION_DATE,GP.LAST_UPDATED_DATE,GPT.ROLE_TYPE_CODE ORDER BY FULL_NAME",
        getAttachments: "SELECT ACTION_ID,ACTION_CODE,FILE_NAME,DESCRIPTION,FILE_URL FROM gnieplatform.GPF_ATTACHMENTS WHERE ACTION_ID = ? AND ACTION_CODE  IN ('A1001','A1002') "
        +"UNION ALL "
        +"SELECT ACTION_ID,ACTION_CODE,FILE_NAME,DESCRIPTION,FILE_URL FROM gnieplatform.GPF_ATTACHMENTS WHERE ACTION_ID IN ( " 
        +"SELECT ID FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID = ?) AND ACTION_CODE ='A1003'",

        getTaskAttachments: "SELECT ACTION_CODE,FILE_NAME,DESCRIPTION,FILE_URL FROM gnieplatform.GPF_ATTACHMENTS WHERE ACTION_ID IN (?) AND ACTION_CODE =? ",
        getTaskForDependancy:"SELECT ID AS TASK_ID, TASK_NAME,TASK_DESCRIPTION FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID=? AND TENANT_ID=? AND TYPE='MAIN'  AND TASK_STATUS_TYPE_CODE IN('OPEN','NS') AND ID <> ?;",


        createDependencyTask:"INSERT INTO gnieprojectmanagement.GPM_DEPENDENT_TASKS (TENANT_ID,TASK_ID,PREDECESSOR_TASK_ID,SUCCESSOR_TASK_ID, "+
            "EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,CREATED_BY,UPDATED_BY)  VALUES ?;",
        
        
        addProjectOwner:"INSERT INTO gnieprojectmanagement.GPM_PROJECT_TEAM(TENANT_ID,USER_ID,ROLE_TYPE_CODE,PROJECT_ID,EFFECTIVE_START_DATE,CREATION_DATE,CREATED_BY,LAST_UPDATED_DATE,UPDATED_BY) VALUES(?,?,'OWNER',?,?,now(),?,now(),?)",

        updateProjectRole:"UPDATE gnieprojectmanagement.GPM_PROJECT_TEAM set ROLE_TYPE_CODE = ?, FUNCTIONAL_ROLE_ID=? where USER_ID = ? AND PROJECT_ID = ?",

        removeProjectOwnerQuery:"UPDATE gnieprojectmanagement.GPM_PROJECT_TEAM SET ROLE_TYPE_CODE = 'EMP' where USER_ID =? AND PROJECT_ID=? AND TENANT_ID=?",

        addIssue:"INSERT INTO gnieprojectmanagement.GPM_ISSUE_TRACKER (`TENANT_ID`,`PROJECT_ID`,`ISSUE_NAME`,`DESCRIPTION`,`PRIORITY`,`SEVERITY`,`ASSIGNED_TO`,`ASSIGNED_BY`,`STATUS`,"
         +"`ASSIGNEE_COMMENT`,`CREATION_DATE`,`CREATED_BY`,`LAST_UPDATED_DATE`,`UPDATED_BY`,`MODULE_ID`,`TAG`) VALUES (?,?,?,?,?,?,?,?,?,?,now(),? ,now(),?,?,?)",

        updateIssue : "UPDATE gnieprojectmanagement.GPM_ISSUE_TRACKER SET STATUS='OBSOLETE',UPDATED_BY=? WHERE ID = ?",

        getAllIssue : "SELECT GIT.ID,GIT.TENANT_ID,GIT.PROJECT_ID , GP.PROJECT_NAME,GIT.ISSUE_NAME, GIT.DESCRIPTION, GIT.PRIORITY, GIT.SEVERITY,GIT.ASSIGNED_TO, "
            +"(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_TO = ID) AS ASSIGNED_TO_NAME,GIT.ASSIGNED_BY, "
            +"(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_BY = ID) AS ASSIGNED_BY_NAME,GIT.STATUS AS STATUS_CODE, GIT.ASSIGNEE_COMMENT, GIT.ASSIGNED_BY_COMMENT,GIT.MODULE_ID, (case when GM.NAME is null then 'General' else GM.NAME end) as NAME,"
            +"(select DISPLAY_VALUE from gnieplatform.GPF_LOOKUP where LOOKUP_TYPE = 'ISSUE_STATUS' and TENANT_ID = GIT.TENANT_ID AND GIT.STATUS = LOOKUP_CODE) as STATUS, "
            +"GIT.CREATION_DATE FROM gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_ISSUE_TRACKER GIT left join gnieprojectmanagement.GPM_MODULES GM on GIT.MODULE_ID = GM.ID where GIT.PROJECT_ID = GP.ID AND GIT.STATUS not in ('OBSOLETE') order by GIT.CREATION_DATE desc",
        
        getAllOpenIssue: "SELECT GIT.ID,GIT.TENANT_ID,GIT.PROJECT_ID , GP.PROJECT_NAME as projectName,GIT.ISSUE_NAME as issueName, GIT.DESCRIPTION, GIT.PRIORITY, GIT.SEVERITY as severity,GIT.ASSIGNED_TO, "
        +"(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_TO = ID) AS ASSIGNED_TO_NAME,GIT.ASSIGNED_BY, "
        +"(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.CREATED_BY = ID) AS createdBy,GIT.CREATED_BY, "
        +"(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_BY = ID) AS ASSIGNED_BY_NAME,GIT.STATUS AS STATUS_CODE, GIT.ASSIGNEE_COMMENT, GIT.ASSIGNED_BY_COMMENT,GIT.MODULE_ID, (case when GM.NAME is null then 'General' else GM.NAME end) as NAME,"
        +"(select DISPLAY_VALUE from gnieplatform.GPF_LOOKUP where LOOKUP_TYPE = 'ISSUE_STATUS' and TENANT_ID = GIT.TENANT_ID AND GIT.STATUS = LOOKUP_CODE) as STATUS, "
        +"GIT.CREATION_DATE as creationDate FROM gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_ISSUE_TRACKER GIT left join gnieprojectmanagement.GPM_MODULES GM on GIT.MODULE_ID = GM.ID where GIT.PROJECT_ID = GP.ID AND GIT.STATUS in ('OPEN','IP','REOPEN','NS') AND GIT.ASSIGNED_TO = ? order by GIT.CREATION_DATE desc",

        getIssueByProject: "SELECT GIT.ID,GIT.TENANT_ID,GIT.PROJECT_ID , GP.PROJECT_NAME,GIT.ISSUE_NAME, GIT.DESCRIPTION, GIT.PRIORITY, GIT.SEVERITY,GIT.ASSIGNED_TO,GIT.STATUS,GIT.TAG, "
        +"(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_TO = ID) AS ASSIGNED_TO_NAME,GIT.ASSIGNED_BY, "
        +"(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_TO = ID) AS ASSIGNED_TO_EMAIL, "
        +"CASE WHEN (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = GIT.PROJECT_ID and GPT.USER_ID = GIT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) IS NULL THEN 'EMPLOYEE' ELSE (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = GIT.PROJECT_ID and GPT.USER_ID = GIT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) END ROLE_NAME, "
        +"(SELECT EMAIL FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_BY = ID) AS ASSIGNED_BY_EMAIL, "
        +"(SELECT group_concat(GU.FULL_NAME) FROM gnieplatform.GPF_USER GU, gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GPT.PROJECT_ID=GIT.PROJECT_ID AND GPT.TENANT_ID=GIT.TENANT_ID AND GPT.ROLE_TYPE_CODE='OWNER' AND GPT.USER_ID=GU.ID) AS OWNER_NAME, "
        +"(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_BY = ID) AS ASSIGNED_BY_NAME,GIT.STATUS AS STATUS_CODE, GIT.ASSIGNEE_COMMENT, GIT.ASSIGNED_BY_COMMENT,GIT.MODULE_ID, (case when GM.NAME is null then 'General' else GM.NAME end) as NAME,"
        +"(SELECT group_concat(GU.ID) FROM gnieplatform.GPF_USER GU, gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GPT.PROJECT_ID=GIT.PROJECT_ID AND GPT.TENANT_ID=GIT.TENANT_ID AND GPT.ROLE_TYPE_CODE='OWNER' AND GPT.USER_ID=GU.ID) AS OWNER_ID, "
        +"(SELECT DISPLAY_VALUE from gnieplatform.GPF_LOOKUP where LOOKUP_TYPE = 'ISSUE_STATUS' and TENANT_ID = GIT.TENANT_ID AND GIT.STATUS = LOOKUP_CODE) as STATUS, "
        +"(SELECT EMAIL from gnieplatform.GPF_USER where ID= GIT.CREATED_BY and TENANT_ID = GIT.TENANT_ID ) AS CREATED_BY_EMAIL, "
        +"GIT.CREATED_BY, (SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.CREATED_BY = ID) AS CREATED_BY_NAME, GIT.CREATION_DATE,"
        +"(SELECT CASE WHEN EXISTS (SELECT MIM.ID FROM gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING MIM WHERE "
        +"GIT.ID = MIM.ISSUE_ID AND MIM.EFFECTIVE_END_DATE IS NULL ) THEN 'true' ELSE 'false' END ) ADDED_TO_MILESTONE, "
        +"(SELECT MIM.ID FROM gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING MIM WHERE GIT.ID = MIM.ISSUE_ID AND MIM.EFFECTIVE_END_DATE IS NULL) MILESTONE_ID, "
        +"(SELECT GM.NAME FROM gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING MIM,gnieprojectmanagement.GPM_MILESTONE GM WHERE "
        +"GIT.ID = MIM.ISSUE_ID AND MIM.MILESTONE_ID = GM.ID AND MIM.EFFECTIVE_END_DATE IS NULL) MILESTONE_NAME, "
        +"case  when GIT.STATUS = 'NS' then 0 when GIT.STATUS = 'OPEN' then 1 when GIT.STATUS = 'REOPEN' then 2 when GIT.STATUS = 'IP' then 3 when GIT.STATUS = 'RESOLVED' then 4 when GIT.STATUS = 'RFT' then 5 "
        +"when GIT.STATUS = 'NR' then 6 when GIT.STATUS = 'AD' then 7 when GIT.STATUS = 'DUPLICATE' then 8 when GIT.STATUS = 'NI' then 9 when GIT.STATUS = 'VC' then 10  end GRADE " 
        +"FROM gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_ISSUE_TRACKER GIT left join gnieprojectmanagement.GPM_MODULES GM on GIT.MODULE_ID = GM.ID where GIT.PROJECT_ID = GP.ID AND GIT.PROJECT_ID = ? AND GIT.STATUS not in ('OBSOLETE') order by GRADE, GIT.CREATION_DATE desc",

        getIssueByUser:"SELECT GIT.ID,GIT.TENANT_ID,GIT.PROJECT_ID , GP.PROJECT_NAME,GIT.ISSUE_NAME, GIT.DESCRIPTION, GIT.PRIORITY, GIT.SEVERITY,GIT.ASSIGNED_TO, "
        +"(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_TO = ID) AS ASSIGNED_TO_NAME,GIT.ASSIGNED_BY, "
        +"(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE GIT.ASSIGNED_BY = ID) AS ASSIGNED_BY_NAME,GIT.STATUS AS STATUS_CODE, GIT.ASSIGNEE_COMMENT, GIT.ASSIGNED_BY_COMMENT,GIT.MODULE_ID, (case when GM.NAME is null then 'General' else GM.NAME end) as NAME,"
        +"(select DISPLAY_VALUE from gnieplatform.GPF_LOOKUP where LOOKUP_TYPE = 'ISSUE_STATUS' and TENANT_ID = GIT.TENANT_ID AND GIT.STATUS = LOOKUP_CODE) as STATUS, "
        +"GIT.CREATION_DATE FROM gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_ISSUE_TRACKER GIT left join gnieprojectmanagement.GPM_MODULES GM on GIT.MODULE_ID = GM.ID  where GIT.PROJECT_ID = GP.ID AND GIT.ASSIGNED_TO = ? AND GIT.STATUS not in ('OBSOLETE') order by GIT.CREATION_DATE desc",

        editIssue:"UPDATE gnieprojectmanagement.GPM_ISSUE_TRACKER SET `ISSUE_NAME` = ?,`DESCRIPTION` = ?,`PRIORITY` = ?,`SEVERITY` = ?,`ASSIGNED_TO` = ?,`STATUS` =?,`ASSIGNEE_COMMENT` = ?,`ASSIGNED_BY_COMMENT` = ?,`MODULE_ID` = ? WHERE `ID` = ?",

        getWorkLog:"SELECT SUM(HOURS) AS TOTAL_HOURS FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID =? "+
            "AND USER_ID=? AND TENANT_ID=? AND WORKLOG_STATUS='ACTIVE';" ,
        updateActualEffort:"UPDATE  gnieprojectmanagement.GPM_TASKS SET ACTUAL_EFFORT=?, UPDATED_BY=? WHERE ID=? AND TENANT_ID=?;",

        getDependencyTask:"SELECT D.TASK_ID,D.PREDECESSOR_TASK_ID,D.SUCCESSOR_TASK_ID,T.TASK_NAME,T.TASK_DESCRIPTION ,T.TASK_STATUS_TYPE_CODE,D.CANNOT_START, "+
        "D.CANNOT_COMPLETE FROM gnieprojectmanagement.GPM_DEPENDENT_TASKS D "+
        "LEFT JOIN "+
        "gnieprojectmanagement.GPM_TASKS T ON T.ID=D.PREDECESSOR_TASK_ID OR T.ID=D.SUCCESSOR_TASK_ID "+
        "WHERE D.TASK_ID=? AND D.TENANT_ID=? AND T.TASK_STATUS_TYPE_CODE !='CLOSED' AND TYPE='MAIN' AND STATUS ='ACTIVE';",

        getIssueDetails:"SELECT IT.ISSUE_NAME,IT.DESCRIPTION,IT.PRIORITY,IT.SEVERITY,IT.ASSIGNED_TO,IT.ASSIGNED_BY,IT.STATUS AS STATUS_CODE,IT.TAG,"+
        "(select DISPLAY_VALUE from gnieplatform.GPF_LOOKUP where LOOKUP_TYPE = 'ISSUE_STATUS' and TENANT_ID = IT.TENANT_ID AND IT.STATUS = LOOKUP_CODE) as STATUS, "+
        "IT.CREATION_DATE,IT.CREATED_BY,IT.PROJECT_ID, "+
        "(SELECT group_concat(GU.FULL_NAME) FROM gnieplatform.GPF_USER GU, gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GPT.PROJECT_ID=IT.PROJECT_ID AND GPT.TENANT_ID=IT.TENANT_ID AND GPT.ROLE_TYPE_CODE='OWNER' AND GPT.USER_ID=GU.ID AND GPT.EFFECTIVE_END_DATE IS NULL) AS OWNER_NAME, "+
        "(SELECT group_concat(GU.ID) FROM gnieplatform.GPF_USER GU, gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GPT.PROJECT_ID=IT.PROJECT_ID AND GPT.TENANT_ID=IT.TENANT_ID AND GPT.ROLE_TYPE_CODE='OWNER' AND GPT.USER_ID=GU.ID AND GPT.EFFECTIVE_END_DATE IS NULL) AS OWNER_ID, "+
        "(SELECT GP.PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS GP WHERE GP.ID=IT.PROJECT_ID AND GP.TENANT_ID=IT.TENANT_ID) AS PROJECT_NAME, "+
        "CASE WHEN (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = IT.PROJECT_ID and GPT.USER_ID = IT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) IS NULL THEN 'EMPLOYEE' ELSE (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = IT.PROJECT_ID and GPT.USER_ID = IT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) END ROLE_NAME, "+
        "(SELECT GU.FULL_NAME FROM gnieplatform.GPF_USER GU WHERE GU.ID=IT.CREATED_BY AND GU.TENANT_ID=IT.TENANT_ID) AS CREATED_BY_NAME,"+
        "(SELECT GU.FULL_NAME FROM gnieplatform.GPF_USER GU WHERE GU.ID=IT.ASSIGNED_TO AND GU.TENANT_ID=IT.TENANT_ID) AS ASSIGNED_TO_NAME,"+
        "(SELECT GU.FULL_NAME FROM gnieplatform.GPF_USER GU WHERE GU.ID=IT.ASSIGNED_BY AND GU.TENANT_ID=IT.TENANT_ID) AS ASSIGNED_BY_NAME,"+
        "(SELECT GU.EMAIL FROM gnieplatform.GPF_USER GU WHERE GU.ID=IT.ASSIGNED_TO AND GU.TENANT_ID=IT.TENANT_ID) AS ASSIGNED_TO_EMAIL, " +
        "(SELECT GU.EMAIL FROM gnieplatform.GPF_USER GU WHERE GU.ID=IT.ASSIGNED_BY AND GU.TENANT_ID=IT.TENANT_ID) AS ASSIGNED_BY_EMAIL,"+
        "(SELECT GU.EMAIL FROM gnieplatform.GPF_USER GU WHERE GU.ID=IT.CREATED_BY AND GU.TENANT_ID=IT.TENANT_ID) AS CREATED_BY_EMAIL,"+
        "case when IT.MODULE_ID is null then 'General' else (SELECT MD.NAME FROM gnieprojectmanagement.GPM_MODULES MD WHERE MD.ID=IT.MODULE_ID AND MD.TENANT_ID=IT.TENANT_ID) end AS MODULE_NAME ,"+
        "(SELECT MD.ID FROM gnieprojectmanagement.GPM_MODULES MD WHERE MD.ID=IT.MODULE_ID AND MD.TENANT_ID=IT.TENANT_ID) AS MODULE_ID,"+
        "(SELECT MILESTONE_ID FROM gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING  WHERE ISSUE_ID=IT.ID AND TENANT_ID=IT.TENANT_ID AND EFFECTIVE_END_DATE IS NULL) AS MILESTONE_ID ,"+
        "(SELECT gm.NAME FROM gnieprojectmanagement.GPM_MILESTONE gm,gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING MTM1 WHERE gm.ID = MTM1.MILESTONE_ID AND MTM1.ISSUE_ID = IT.ID AND MTM1.EFFECTIVE_END_DATE IS NULL ) AS MILESTONE_NAME"+
        " FROM gnieprojectmanagement.GPM_ISSUE_TRACKER IT  WHERE IT.ID=? AND IT.TENANT_ID=?",
		

        assignTasks: "UPDATE gnieprojectmanagement.GPM_ISSUE_TRACKER SET `ASSIGNED_TO` = ?, `ASSIGNED_BY` = ?, STATUS = 'OPEN'  WHERE `ID` = ?",

        getAutomateTask :"SELECT case when GT.ASSIGNED_TO is null then 'false' else 'true' end as isAssigned,group_concat(GPT.USER_ID) as owner,GT.TASK_NAME, GP.PROJECT_NAME, GT.ID, "
            +"case when (SELECT TASK_STATUS_TYPE_CODE from gnieprojectmanagement.GPM_TASKS where PROJECT_ID = ? and IS_AUTOMATED = 1 and ORDER_OF_EXECUTION = ? ) = 'COM' then 'true' else 'false' end as isPrevClosed "
            +"FROM gnieprojectmanagement.GPM_TASKS GT ,gnieprojectmanagement.GPM_PROJECT_TEAM GPT ,gnieprojectmanagement.GPM_PROJECTS GP where GT.PROJECT_ID = ? and GT.IS_AUTOMATED = 1 and GT.ORDER_OF_EXECUTION = ? "
            +"and GT.PROJECT_ID = GPT.PROJECT_ID and GPT.ROLE_TYPE_CODE = 'OWNER' and GT.PROJECT_ID = GP.ID",
        checkCompletedOrNot:"SELECT TASK_STATUS_TYPE_CODE,ID "+
            "FROM gnieprojectmanagement.GPM_TASKS WHERE ID IN(?) AND TENANT_ID=?;",
        predecessorOrNot:"SELECT TASK_ID, PREDECESSOR_TASK_ID FROM gnieprojectmanagement.GPM_DEPENDENT_TASKS WHERE "+
        "PREDECESSOR_TASK_ID =? AND TENANT_ID=?;" ,
        // isDependencyExist:"SELECT * FROM gnieprojectmanagement.GPM_DEPENDENT_TASKS WHERE TASK_ID=? "+
        //     "AND (PREDECESSOR_TASK_ID IN(?) OR SUCCESSOR_TASK_ID IN (?) ) AND TENANT_ID=?;"

        isDependencyExist:"SELECT PREDECESSOR_TASK_ID,SUCCESSOR_TASK_ID FROM gnieprojectmanagement.GPM_DEPENDENT_TASKS "+
            "WHERE TASK_ID=? AND TENANT_ID=? AND STATUS = 'ACTIVE';",

        addFavouriteProject:"INSERT INTO  gnieprojectmanagement.GPM_FAVOURITE_PROJECTS (TENANT_ID,USER_ID,PROJECT_ID,EFFECTIVE_START_DATE, "+
            "CREATED_BY,UPDATED_BY) VALUES (?,?,?,?,?,?);",

        removeFavouriteProject:"UPDATE gnieprojectmanagement.GPM_FAVOURITE_PROJECTS SET EFFECTIVE_END_DATE=NOW(),  UPDATED_BY=? "+
            "WHERE PROJECT_ID=? AND USER_ID=? AND TENANT_ID=? AND (EFFECTIVE_END_DATE IS NULL OR EFFECTIVE_END_DATE > NOW()) ",
        changeIssueStatus:"UPDATE  gnieprojectmanagement.GPM_ISSUE_TRACKER SET STATUS=?, "+
            "UPDATED_BY=? WHERE ID=? AND TENANT_ID=?;",
        isAddedToFavourites:"SELECT PROJECT_ID FROM gnieprojectmanagement.GPM_FAVOURITE_PROJECTS WHERE USER_ID=? AND PROJECT_ID=? AND "+
            "EFFECTIVE_END_DATE IS NULL AND TENANT_ID=?;",
        
        
        milestoneExistsQuery: "SELECT * FROM gnieprojectmanagement.GPM_MILESTONE WHERE TENANT_ID=? AND UPPER(NAME)=? AND PROJECT_ID =?  AND STATUS='ACTIVE' ",

        createMilestone: "INSERT INTO gnieprojectmanagement.GPM_MILESTONE (TENANT_ID,PROJECT_ID,NAME,DESCRIPTION,START_DATE,END_DATE,CREATED_BY,UPDATED_BY) " +
        " VALUES (?,?,?,?,?,?,?,?) ",

        // getMilestones:"SELECT ID,NAME,DESCRIPTION,START_DATE,END_DATE, "+
        //     "(SELECT COUNT(MTM.TASK_ID) FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING MTM,gnieprojectmanagement.GPM_MILESTONE M "+
        //     "WHERE  M.ID=MTM.MILESTONE_ID) AS TASK_COUNT "+
        //     "FROM gnieprojectmanagement.GPM_MILESTONE WHERE PROJECT_ID =? AND (END_DATE IS NULL OR END_DATE > NOW())",
        getMilestones:"SELECT M.ID,M.NAME,M.DESCRIPTION,M.START_DATE,M.END_DATE, "+
            "case when M.END_DATE >= DATE_FORMAT(NOW(), '%Y-%m-%d') then 'true' else 'false' end as IS_ENDATED,"+
            "(SELECT COUNT(MTM.TASK_ID) AS COMPLETED_TASK FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING MTM, "+
            "gnieprojectmanagement.GPM_TASKS T "+
            "WHERE MTM.TASK_ID=T.ID AND T.TASK_STATUS_TYPE_CODE='COM' AND MTM.EFFECTIVE_END_DATE IS NULL AND M.ID=MTM.MILESTONE_ID AND T.TYPE='MAIN' AND T.TASK_STATUS_TYPE_CODE!='CLOSED' AND T.TASK_STATUS_TYPE_CODE!='OBSOLETE') AS COMPLETED_COUNT ,"+
            "(SELECT COUNT(MTM.TASK_ID) AS COMPLETED_TASK FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING MTM, "+
            "gnieprojectmanagement.GPM_TASKS T "+
            "WHERE MTM.TASK_ID=T.ID AND MTM.EFFECTIVE_END_DATE IS NULL AND M.ID=MTM.MILESTONE_ID AND T.TYPE='MAIN' AND T.TASK_STATUS_TYPE_CODE!='CLOSED' AND T.TASK_STATUS_TYPE_CODE!='CLOSED'AND T.TASK_STATUS_TYPE_CODE!='OBSOLETE') AS TASK_COUNT "+
            "FROM gnieprojectmanagement.GPM_MILESTONE M "+
            "LEFT JOIN gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING MTM ON M.ID=MTM.MILESTONE_ID AND MTM.EFFECTIVE_END_DATE IS NULL "+
            "LEFT JOIN gnieprojectmanagement.GPM_TASKS T ON MTM.TASK_ID=T.ID "+
            "WHERE M.PROJECT_ID=? "+
            "AND M.STATUS='ACTIVE' GROUP BY M.ID,M.NAME,M.DESCRIPTION,M.START_DATE,M.END_DATE order by M.START_DATE desc",

        editMilestone: "UPDATE gnieprojectmanagement.GPM_MILESTONE SET NAME = ? , DESCRIPTION = ?, START_DATE=?, END_DATE=? WHERE ID = ? ",

        getTaskNotInMilestones : "SELECT GPT.ID,GPT.TASK_NAME,GPT.TASK_DESCRIPTION,GPT.ASSIGNED_TO,GPT.ASSIGNED_BY,GPT.ESTIMATED_START_DATE, "+
            "GPT.ESTIMATED_COMPLETION_DATE,GPT.ACTUAL_START_DATE,GPT.ACTUAL_COMPLETION_DATE, "+
            "GPT.ESTIMATED_EFFORT,GPT.ACTUAL_EFFORT, "+
            "GPT.TYPE, "+
            "(SELECT CASE WHEN EXISTS (SELECT ST.ID FROM gnieprojectmanagement.GPM_TASKS ST WHERE "+
            "GPT.ID = ST.MAIN_TASK_ID AND ST.TASK_STATUS_TYPE_CODE !='CLOSED' AND ST.TASK_STATUS_TYPE_CODE !='OBSOLETE' )THEN 'true' ELSE 'false' END ) HAS_SUB_TASK , "+
            "(SELECT FULL_NAME FROM gnieplatform .GPF_USER WHERE ID=GPT.ASSIGNED_TO) AS ASSIGNED_TO_NAME, "+
            "(SELECT FULL_NAME FROM gnieplatform .GPF_USER WHERE ID=GPT.ASSIGNED_BY) AS ASSIGNED_BY_NAME, "+
            "(SELECT DISPLAY_VALUE FROM gnieplatform .GPF_LOOKUP WHERE LOOKUP_TYPE='PROJECT_STATUS' "+
            "AND LOOKUP_CODE=GPT.TASK_STATUS_TYPE_CODE AND TENANT_ID=GPT.TENANT_ID) AS DISPLAY_VALUE "+
            "FROM gnieprojectmanagement.GPM_TASKS GPT WHERE GPT.ID NOT IN (SELECT GMTM.TASK_ID FROM "+
            "gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING GMTM  "+
            ") AND "+
            "GPT.PROJECT_ID = ?  AND GPT.TENANT_ID=? AND GPT.TASK_STATUS_TYPE_CODE!='CLOSED' GPT.TASK_STATUS_TYPE_CODE!='OBSOLETE' AND GPT.TYPE='MAIN'  ",

        moduleExistsQuery: "SELECT * FROM gnieprojectmanagement.GPM_MODULES WHERE TENANT_ID=? AND UPPER(NAME)=? AND PROJECT_ID =? ",

        createModule: "INSERT INTO gnieprojectmanagement.GPM_MODULES (TENANT_ID,PROJECT_ID,NAME,DESCRIPTION,CREATED_BY,UPDATED_BY) " +
        "VALUES(?,?,?,?,?,?)",

        editModule: "UPDATE gnieprojectmanagement.GPM_MODULES SET NAME = ? , DESCRIPTION = ? WHERE ID = ? ",

        deleteModule: "UPDATE gnieprojectmanagement.GPM_MODULES SET STATUS = 'INACTIVE' WHERE ID = ? ",

        getModules:"SELECT ID,NAME,DESCRIPTION FROM gnieprojectmanagement.GPM_MODULES WHERE PROJECT_ID = ?;",

        fetchAllTaskForEmployee:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER,"+
        "(select ID from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_ID, "+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) ASSIGNED_BY_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL,"+
        "(select APPROVAL_REQUIRED from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS APPROVAL_REQUIRED,"+
        "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_NAME,"+
        "(select PROJECT_DESCRIPTION from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_DESCRIPTION,"+
        "(select PROJECT_TYPE_CODE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_TYPE_CODE, "+
        "(select ESTIMATED_START_DATE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ESTIMATED_START_DATE, "+
        "(select ESTIMATED_COMPLETION_DATE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ESTIMATED_COMPLETION_DATE,"+
        "(select PROJECT_STATUS_TYPE_CODE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_STATUS_TYPE_CODE,"+
        "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ID,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,"+
        "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE GT.TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY GL.DISPLAY_VALUE LIMIT 1) AS DISPLAY_VALUE, "+
        "(SELECT IFNULL(SUM(HOURS),0) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID = GT.ID AND WORKLOG_STATUS = 'ACTIVE' ) AS TOTAL_HOURS,"+
        "(SELECT group_concat(USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID = GT.PROJECT_ID AND UPPER(ROLE_TYPE_CODE) ='OWNER' ) AS PROJECT_OWNERS,"+
        "GT.ASSIGNED_TO,GT.ASSIGNED_BY,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,GT.ACTUAL_COMPLETION_DATE,GT.CREATION_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.CREATED_BY,GT.SUB_STATUS FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.TENANT_ID =? AND GT.ASSIGNED_TO=? AND GT.TASK_STATUS_TYPE_CODE in (?) ORDER BY CREATION_DATE DESC;",

        fetchAllTaskForManager:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_NUMBER,"+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) FULL_NAME,"+
        "CASE WHEN (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = GT.PROJECT_ID and GPT.USER_ID = GT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) IS NULL THEN 'EMPLOYEE' ELSE (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = GT.PROJECT_ID and GPT.USER_ID = GT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) END ROLE_NAME, "+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) ASSIGNED_BY_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMAIL,"+
        "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE GT.TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY GL.DISPLAY_VALUE LIMIT 1) AS DISPLAY_VALUE, "+
        "(SELECT CASE WHEN EXISTS (SELECT ST.ID FROM gnieprojectmanagement.GPM_TASKS ST WHERE "+
        "GT.ID = ST.MAIN_TASK_ID )THEN 'true' ELSE 'false' END ) HAS_SUB_TASK, "+
        "GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_TO,GT.TASK_STATUS_TYPE_CODE,"+
        "GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE, GT.TYPE AS TASK_TYPE ,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.ACTUAL_COMPLETION_DATE,GT.LAST_UPDATED_DATE FROM gnieprojectmanagement.GPM_TASKS GT "+
        "WHERE GT.TENANT_ID = ? AND PROJECT_ID=? AND TASK_STATUS_TYPE_CODE in (?) ORDER BY LAST_UPDATED_DATE DESC ;",
        
        delayedTaskCountForEmployee:"SELECT GT.PROJECT_ID, GP.PROJECT_NAME project_name, GT.ID, GT.TENANT_ID, GT.TASK_NAME,GT.TASK_TYPE_CODE, "
            +"GT.TASK_STATUS_TYPE_CODE, GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE, GT.ACTUAL_COMPLETION_DATE, "
            +"GT.ACTUAL_EFFORT,case when GT.ASSIGNED_TO is null then 'Not Assigned' else (select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) end FULL_NAME, "
            +"GT.ASSIGNED_TO,GT.ASSIGNED_BY,(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) ASSIGNED_BY_NAME, "
            +"(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.CREATED_BY) AS CREATED_BY_NAME,"
            +"(select DISPLAY_VALUE from gnieplatform.GPF_LOOKUP where LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE and TENANT_ID = GT.TENANT_ID AND LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY DISPLAY_VALUE LIMIT 1) DISPLAY_VALUE,DATEDIFF(NOW(),GT.ESTIMATED_COMPLETION_DATE) AS DUE_IN "
            +"FROM gnieprojectmanagement.GPM_TASKS GT, gnieprojectmanagement.GPM_PROJECTS GP WHERE GT.ASSIGNED_TO=? AND GT.TASK_STATUS_TYPE_CODE IN('IP','OPEN','NS') AND GT.ACTUAL_COMPLETION_DATE <= NOW() AND GT.PROJECT_ID = GP.ID group by GT.ID ORDER BY GT.ACTUAL_COMPLETION_DATE DESC",
        delayedTaskCountForManager:"SELECT GT.PROJECT_ID, GP.PROJECT_NAME project_name, GT.ID, GT.TENANT_ID, GT.TASK_NAME,GT.TASK_TYPE_CODE,GT.TASK_STATUS_TYPE_CODE, GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE, GT.ACTUAL_COMPLETION_DATE, "
            +"GT.ACTUAL_EFFORT,case when GT.ASSIGNED_TO is null then 'Not Assigned' else (select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) end FULL_NAME,GT.ASSIGNED_TO,GT.ASSIGNED_BY,(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) ASSIGNED_BY_NAME, "
            +"(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.CREATED_BY) AS CREATED_BY_NAME,"
            +"(select DISPLAY_VALUE from gnieplatform.GPF_LOOKUP where LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE and TENANT_ID = GT.TENANT_ID AND LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY DISPLAY_VALUE LIMIT 1) DISPLAY_VALUE,DATEDIFF(NOW(),GT.ESTIMATED_COMPLETION_DATE) AS DUE_IN "
            +"FROM gnieprojectmanagement.GPM_TASKS GT, gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GT.TASK_STATUS_TYPE_CODE  IN ('IP','NS','OPEN') "
            +"AND GT.ACTUAL_COMPLETION_DATE <= NOW() AND GPT.ROLE_TYPE_CODE='OWNER' AND GT.PROJECT_ID=GPT.PROJECT_ID AND GT.TENANT_ID=GPT.TENANT_ID AND GT.PROJECT_ID = GP.ID AND GPT.USER_ID=? group by GT.ID ORDER BY GT.ACTUAL_COMPLETION_DATE DESC",
        getTaskExpiringSoonForEmployee:"SELECT COUNT(*)  AS COUNT FROM gnieprojectmanagement.GPM_TASKS WHERE ASSIGNED_TO=? AND "+
            "TENANT_ID=? AND TASK_STATUS_TYPE_CODE  IN('IP','OPEN','NS') AND "+
            "ESTIMATED_COMPLETION_DATE between ? and ?",
        getTaskExpiringSoonForManager:"SELECT count(*) AS COUNT FROM gnieprojectmanagement.GPM_TASKS GT, "+
            "gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE "+
            "GT.TENANT_ID=? AND GT.TASK_STATUS_TYPE_CODE  IN('IP','OPEN','COM') AND ESTIMATED_COMPLETION_DATE between ? and ? "+
            "AND GT.PROJECT_ID=GPT.PROJECT_ID AND GT.TENANT_ID=GPT.TENANT_ID AND GPT.USER_ID=? ;",
        getIssuesCountByEmp: "select GPT.ID,GPT.ISSUE_NAME issueName,GPT.PRIORITY,GPT.SEVERITY,GPT.PROJECT_ID,GP.PROJECT_NAME projectName,GPT.STATUS as STATUS_CODE,GPT.CREATION_DATE,case when GPT.ASSIGNED_TO is null then 'Not Assigned' else (select FULL_NAME from gnieplatform.GPF_USER GU where id=GPT.ASSIGNED_TO) end ASSIGNED_TO, DATEDIFF(NOW(),GPT.CREATION_DATE) AS DUE_IN, "
            +"(select FULL_NAME from gnieplatform.GPF_USER GU where id=GPT.CREATED_BY) CREATED_BY, "
            +"(select DISPLAY_VALUE from gnieplatform.GPF_LOOKUP where LOOKUP_TYPE = 'ISSUE_STATUS' and TENANT_ID = GPT.TENANT_ID AND GPT.STATUS = LOOKUP_CODE) as STATUS, "
            +"(select FULL_NAME from gnieplatform.GPF_USER GU where id=GPT.ASSIGNED_BY) ASSIGNED_BY FROM (SELECT ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER where SEVERITY = 'CRITICAL' AND DATE_FORMAT(CREATION_DATE, '%Y-%m-%d') <= DATE_FORMAT(now(), '%Y-%m-%d') UNION "
            +"SELECT ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER where SEVERITY = 'MAJOR' and DATE_FORMAT(CREATION_DATE, '%Y-%m-%d') <= ? UNION "
            +"SELECT ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER where SEVERITY = 'MINOR' and DATE_FORMAT(CREATION_DATE, '%Y-%m-%d') <= ? ) A, "
            +"gnieprojectmanagement.GPM_ISSUE_TRACKER GPT,gnieprojectmanagement.GPM_PROJECTS GP WHERE GPT.ASSIGNED_TO = ? AND GP.ID = GPT.PROJECT_ID AND GPT.STATUS in ('OPEN','IP','REOPEN','NS') AND A.ID = GPT.ID group by GPT.ID ORDER BY GPT.CREATION_DATE DESC",
        getIssuesCountByManager: "select GPT.ID,GPT.ISSUE_NAME issueName,GPT.PRIORITY,GPT.SEVERITY,GPT.PROJECT_ID, GP.PROJECT_NAME projectName,GPT.STATUS as STATUS_CODE,GPT.CREATION_DATE,case when GPT.ASSIGNED_TO is null then 'Not Assigned' else (select FULL_NAME from gnieplatform.GPF_USER GU where id=GPT.ASSIGNED_TO) end ASSIGNED_TO, DATEDIFF(NOW(),GPT.CREATION_DATE) AS DUE_IN,"
            +"(select FULL_NAME from gnieplatform.GPF_USER GU where id=GPT.CREATED_BY) CREATED_BY, "
            +"(select DISPLAY_VALUE from gnieplatform.GPF_LOOKUP where LOOKUP_TYPE = 'ISSUE_STATUS' and TENANT_ID = GPT.TENANT_ID AND GPT.STATUS = LOOKUP_CODE) as STATUS, "
            +"(select FULL_NAME from gnieplatform.GPF_USER GU where id=GPT.ASSIGNED_BY) ASSIGNED_BY FROM (SELECT ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER where SEVERITY = 'CRITICAL' AND DATE_FORMAT(CREATION_DATE, '%Y-%m-%d') <= DATE_FORMAT(now(), '%Y-%m-%d') UNION "
            +"SELECT ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER where SEVERITY = 'MAJOR' and DATE_FORMAT(CREATION_DATE, '%Y-%m-%d') <= ? UNION "
            +"SELECT ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER where SEVERITY = 'MINOR' and DATE_FORMAT(CREATION_DATE, '%Y-%m-%d') <= ? ) A, "
            +"gnieprojectmanagement.GPM_ISSUE_TRACKER GPT,gnieprojectmanagement.GPM_PROJECT_TEAM GPTM, gnieprojectmanagement.GPM_PROJECTS GP WHERE GPTM.USER_ID = ? "
            +"AND GP.ID = GPT.PROJECT_ID AND GPT.STATUS in ('OPEN','IP','REOPEN','NS') AND A.ID = GPT.ID AND GPTM.PROJECT_ID = GP.ID AND GPTM.ROLE_TYPE_CODE='OWNER' group by GPT.ID ORDER BY GPT.CREATION_DATE DESC",
        getSubTaskDetails:"SELECT ID,SUB_TASK_NAME,SUB_TASK_DESCRIPTION,ASSIGNED_TO,ASSIGNED_BY,TASK_STATUS_TYPE_CODE,PRIORITY_TYPE_CODE,CAN_CONTINUE,ORDER_OF_EXECUTION, "+
        "IS_AUTOMATED,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ESTIMATED_EFFORT, "+
        "ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,ACTUAL_EFFORT,CREATION_DATE,CREATED_BY, "+
        "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE "+
        "AND GL.LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY GL.DISPLAY_VALUE LIMIT 1) AS DISPLAY_VALUE, DATEDIFF(NOW(),ESTIMATED_COMPLETION_DATE) AS DUE_IN ,"+
        "(SELECT GU.FULL_NAME FROM gnieplatform.GPF_USER GU WHERE GU.ID=CREATED_BY AND GU.TENANT_ID=TENANT_ID AND ID=?) AS CREATED_BY_NAME,"+
        "(SELECT GU.FULL_NAME FROM gnieplatform.GPF_USER GU WHERE GU.ID=ASSIGNED_BY AND GU.TENANT_ID=TENANT_ID) AS ASSIGNED_BY_NAME, "+
        "(SELECT GU.FULL_NAME FROM gnieplatform.GPF_USER GU WHERE GU.ID=ASSIGNED_TO AND GU.TENANT_ID=TENANT_ID) AS ASSIGNED_TO_NAME "+
        "FROM gnieprojectmanagement.GPM_SUB_TASKS WHERE ID=? AND TENANT_ID=?",
        getSubTaskDetails:"SELECT T.ID, T.PROJECT_ID,P.PROJECT_NAME,T.TASK_NAME,T.TASK_DESCRIPTION, T.TASK_TYPE_CODE, T.TYPE,T.MAIN_TASK_ID,"+
            "T.ASSIGNED_TO, T.ASSIGNED_BY, T.TASK_STATUS_TYPE_CODE,T.PRIORITY_TYPE_CODE,T.CAN_CONTINUE, "+
            "T.ORDER_OF_EXECUTION,T.IS_AUTOMATED,T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE, "+
            "T.ESTIMATED_EFFORT,T.ACTUAL_START_DATE,T.ACTUAL_COMPLETION_DATE,T.ACTUAL_EFFORT,T.CREATION_DATE,T.CREATED_BY, "+ 
            "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.ASSIGNED_TO AND T.TENANT_ID=U.TENANT_ID) AS ASSIGNED_TO_NAME, "+ 
            "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.ASSIGNED_BY AND T.TENANT_ID=U.TENANT_ID) AS ASSIGNED_BY_NAME, "+
            "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.CREATED_BY AND T.TENANT_ID=U.TENANT_ID) AS CREATED_BY_NAME, "+
            "(SELECT GROUP_CONCAT(PT.USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM PT  WHERE P.ID=PT.PROJECT_ID AND P.TENANT_ID=PT.TENANT_ID AND PT.ROLE_TYPE_CODE='OWNER') AS PROJECT_OWNERS,"+
            "DATEDIFF(NOW(),T.ESTIMATED_COMPLETION_DATE) AS DUE_IN "+
            "FROM gnieprojectmanagement.GPM_TASKS T, gnieprojectmanagement.GPM_PROJECTS P WHERE T.TENANT_ID=? AND T.PROJECT_ID=?  AND T.ID=? AND "+
            "P.ID=T.PROJECT_ID",

        addTaskToMilestone:"INSERT INTO gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING "+
            "(TENANT_ID,MILESTONE_ID,TASK_ID,EFFECTIVE_START_DATE,CREATED_BY,UPDATED_BY) "+
            "VALUES ?;",
        deleteMilestone:"UPDATE  gnieprojectmanagement.GPM_MILESTONE SET  STATUS='INACTIVE', UPDATED_BY=? WHERE ID=? AND PROJECT_ID=? AND TENANT_ID=?;",
        deleteTaskInMilestone:"UPDATE  gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING SET  EFFECTIVE_END_DATE= ?, UPDATED_BY=? WHERE MILESTONE_ID=?  AND TENANT_ID=?;",

        getTaskUnderMilestone:"SELECT T.ID,T.TASK_NAME,T.TASK_DESCRIPTION,T.TYPE ,T.ASSIGNED_TO,T.ASSIGNED_BY,T.TASK_STATUS_TYPE_CODE, "+
            "M.EFFECTIVE_START_DATE,M.EFFECTIVE_END_DATE,T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE,T.ACTUAL_START_DATE,T.ACTUAL_COMPLETION_DATE,ACTUAL_EFFORT,ESTIMATED_EFFORT, "+
            "M.CREATED_BY, "+
            "(SELECT CASE WHEN EXISTS (SELECT WL.USER_ID  FROM gnieprojectmanagement.GPM_WATCH_LIST WL WHERE "+ 
            "WL.ENTITY_ID=T.ID  AND WL.STATUS='ACTIVE' ) THEN 'true' ELSE 'false' END ) ADDED_TO_WATCH_LIST, "+
            "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE  GL.LOOKUP_TYPE='PROJECT_STATUS' AND "+
            "T.TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.TENANT_ID=T.TENANT_ID) AS DISPLAY_VALUE , "+
            "(SELECT U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=T.ASSIGNED_TO ) AS ASSIGNED_TO_NAME,"+
            "(SELECT U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=T.ASSIGNED_BY ) AS ASSIGNED_BY_NAME, "+
            "(SELECT U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=M.CREATED_BY ) AS CREATED_BY_NAME, "+
            "CASE WHEN (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = T.PROJECT_ID and GPT.USER_ID = T.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) IS NULL THEN 'EMPLOYEE' ELSE (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = T.PROJECT_ID and GPT.USER_ID = T.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) END ROLE_NAME, "+
            "(SELECT CASE WHEN EXISTS (SELECT ST.ID FROM gnieprojectmanagement.GPM_TASKS ST WHERE "+
            "T.ID = ST.MAIN_TASK_ID AND TASK_STATUS_TYPE_CODE !='CLOSED' AND TASK_STATUS_TYPE_CODE !='OBSOLETE' )THEN 'true' ELSE 'false' END ) HAS_SUB_TASK "+
            "FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING  M ,"+
            "gnieprojectmanagement.GPM_TASKS T WHERE M.TASK_ID=T.ID AND M.MILESTONE_ID=? AND M.TENANT_ID=? "+
            "AND M.TENANT_ID=T.TENANT_ID AND T.TYPE='MAIN'  AND M.EFFECTIVE_END_DATE IS NULL AND T.TASK_STATUS_TYPE_CODE != 'CLOSED' AND T.TASK_STATUS_TYPE_CODE != 'OBSOLETE' ",
			
        
        getModuleIdByName:"SELECT ID FROM gnieprojectmanagement.GPM_MODULES where NAME = ? and PROJECT_ID = ?",

        getLookupStatus: "SELECT LOOKUP_CODE, DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_TYPE = ? AND TENANT_ID = ? GROUP BY DISPLAY_VALUE,LOOKUP_CODE",
        getManagerDataToNotify:"SELECT GU.ID Id,GU.EMAIL AS Email,GU.WHATSAPP_NUMBER AS PM_WHATSAPP_NUMBER,GT.ID AS TASK_ID,GT.PROJECT_ID,GT.ESTIMATED_COMPLETION_DATE, "
            +"GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.ASSIGNED_BY,GT.ASSIGNED_TO, GP.PROJECT_NAME, (SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID=GT.ASSIGNED_TO) AS ASSIGNED_TO_NAME, "
            +"(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID=GT.TENANT_ID) AS TENANT_NAME,(SELECT WHATSAPP_ID FROM gnieplatform.GPF_TENANTS WHERE ID=GT.TENANT_ID) AS WHATSAPP_ID, "
            +"(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE AND TENANT_ID=10001 AND LOOKUP_TYPE = 'PROJECT_STATUS') AS STATUS FROM "
            +"gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE FR,gnieplatform.GPF_USER GU "
            +"WHERE GT.ID = ? AND GP.ID=GT.PROJECT_ID AND GP.ID=GPT.PROJECT_ID AND GPT.EFFECTIVE_END_DATE IS NULL AND FR.ID = GPT.FUNCTIONAL_ROLE_ID AND LOWER(FR.ROLE_NAME) = 'project manager' AND GU.ID = GPT.USER_ID",
        getTeamMailData:"SELECT U.ID ,U.FULL_NAME,U.EMAIL FROM gnieplatform.GPF_USER U, "+
            "gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
            "WHERE U.TENANT_ID=? AND "+
            "GPT.USER_ID=U.ID  AND GPT.PROJECT_ID=? AND GPT.TENANT_ID=U.TENANT_ID AND (GPT.EFFECTIVE_END_DATE IS NULL OR  "+
            "GPT.EFFECTIVE_END_DATE > NOW())  ;",
        anySubTaskExits:"SELECT ID,TASK_STATUS_TYPE_CODE,TASK_NAME FROM gnieprojectmanagement.GPM_TASKS WHERE TENANT_ID=? AND "+
            "TYPE='SUB' AND MAIN_TASK_ID=? AND TASK_STATUS_TYPE_CODE!='CLOSED' AND TASK_STATUS_TYPE_CODE!='OBSOLETE' ;",
        updateSubTaskStatus:"UPDATE  gnieprojectmanagement.GPM_TASKS  SET TASK_STATUS_TYPE_CODE=?, UPDATED_BY=? "+
            "WHERE TASK_STATUS_TYPE_CODE NOT IN('CLOSED','COM','NS','OBSOLETE') AND TENANT_ID=? AND "+
            "TYPE='SUB' AND MAIN_TASK_ID=?;",
        anyActiveTasksUnderProject:"SELECT COUNT(ID) AS TASK_COUNT FROM gnieprojectmanagement.GPM_TASKS WHERE TENANT_ID=? AND PROJECT_ID=? AND "+
            "TASK_STATUS_TYPE_CODE IN('OPEN','NS','IP','HOLD');",
        anyActiveIssueUnderProject  :"SELECT COUNT(ID) AS ISSUE_COUNT FROM gnieprojectmanagement.GPM_ISSUE_TRACKER WHERE TENANT_ID=? AND PROJECT_ID=? AND "+
            "STATUS IN('OPEN','NS','IP','REOPEN');",
        closeAllIssueQuery:"UPDATE  gnieprojectmanagement.GPM_ISSUE_TRACKER SET STATUS='VC',UPDATED_BY=?, END_DATE=NOW() WHERE "+
            "PROJECT_ID=? AND TENANT_ID=? AND STATUS!='VC' ;",
        changeIssueStatusIP:"UPDATE  gnieprojectmanagement.GPM_ISSUE_TRACKER SET STATUS='IP',UPDATED_BY=?,START_DATE=? WHERE ID=? AND "+
            "PROJECT_ID=? AND TENANT_ID=? ;",
        changeIssueStatusVC:"UPDATE  gnieprojectmanagement.GPM_ISSUE_TRACKER SET STATUS='VC',UPDATED_BY=?,END_DATE=? WHERE ID=? AND "+
        "PROJECT_ID=? AND TENANT_ID=? ;",
        removeDependancy:"UPDATE  gnieprojectmanagement.GPM_DEPENDENT_TASKS SET EFFECTIVE_END_DATE=NOW() , UPDATED_BY=? "+
            "WHERE TASK_ID=? AND TENANT_ID=?;",

        getProjectDetailData:"SELECT GP.ID AS PROJECT_ID,"+
            "(SELECT IS_AUTOMATED FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID=GP.ID AND ID = (SELECT MAX(ID) FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID)) AS IS_AUTOMATED,"+
            "GP.PROJECT_NAME,GP.LOCATION_NAME, GP.PROJECT_DESCRIPTION,GP.PROJECT_TYPE_CODE,GP.PROJECT_STATUS_TYPE_CODE,GP.LOCATION_NAME,GP.CREATION_DATE,GP.LAST_UPDATED_DATE,GP.ESTIMATED_START_DATE,GP.ESTIMATED_COMPLETION_DATE,"+
            "(SELECT GC.CLIENT_NAME FROM gnieplatform.GPF_CLIENTS GC WHERE GC.ID IN (SELECT GPM.CLIENT_ID FROM gnieprojectmanagement.GPM_CLIENT_PROJECT_MAPPING GPM WHERE GPM.PROJECT_ID = GP.ID)) AS CLIENT_NAME,"+            
            "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE PROJECT_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.TENANT_ID=GP.TENANT_ID  AND GL.LOOKUP_TYPE='PROJECT_STATUS'  GROUP BY GL.DISPLAY_VALUE) AS DISPLAY_VALUE,"+
            "(SELECT group_concat(distinct(SGU.FULL_NAME))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM SGPT,gnieplatform.GPF_USER SGU WHERE SGPT.PROJECT_ID = GP.ID AND SGPT.USER_ID = SGU.ID AND SGPT.EFFECTIVE_END_DATE IS NULL ) AS MEMBERS_NAME,"+
            "(SELECT COUNT(distinct(USER_ID))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID = GP.ID AND EFFECTIVE_END_DATE IS NULL ) AS TOTAL_MEMBERS,"+
            "(SELECT IFNULL(SUM(HOURS),0) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID IN (SELECT ID FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID ) AND UPPER(WORKLOG_STATUS) = 'ACTIVE') AS TOTAL_HOURS,"+
            "(SELECT group_concat(USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT LEFT JOIN gnieplatform.GPF_USER U ON U.ID=USER_ID LEFT JOIN gnieplatform.GPF_FUNCTIONAL_ROLE FR ON GPT.FUNCTIONAL_ROLE_ID = FR.ID "+
            "WHERE GPT.PROJECT_ID = GP.ID AND UPPER(GPT.ROLE_TYPE_CODE) ='OWNER' AND GPT.EFFECTIVE_END_DATE IS NULL AND (U.EFFECTIVE_END_DATE IS NULL OR U.EFFECTIVE_END_DATE > NOW() ) AND FR.TENANT_ID = U.TENANT_ID AND lower(FR.ROLE_NAME) like '%project manager%' ) AS PROJECT_OWNERS,"+
            "(SELECT IF((SELECT COUNT(ID) FROM gnieprojectmanagement.GPM_FAVOURITE_PROJECTS WHERE PROJECT_ID = GP.ID AND USER_ID = ? AND EFFECTIVE_END_DATE IS NULL  > 0), 'Y','N')) AS IS_FAVOURITE, GP.CREATED_BY, "+
            "case when GP.PROJECT_STATUS_TYPE_CODE in ('CLOSED','HOLD') then GP.LAST_UPDATED_DATE else null end as CLOSING_DATE, "+
            "(SELECT group_concat(FULL_NAME) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT LEFT JOIN gnieplatform.GPF_USER U ON U.ID=USER_ID LEFT JOIN gnieplatform.GPF_FUNCTIONAL_ROLE FR ON GPT.FUNCTIONAL_ROLE_ID = FR.ID "+
            "WHERE GPT.PROJECT_ID = GP.ID AND UPPER(GPT.ROLE_TYPE_CODE) ='OWNER' AND GPT.EFFECTIVE_END_DATE IS NULL AND (U.EFFECTIVE_END_DATE IS NULL OR U.EFFECTIVE_END_DATE > NOW() ) AND FR.TENANT_ID = U.TENANT_ID AND lower(FR.ROLE_NAME) like '%project manager%') AS PROJECT_OWNERS_NAME,"+
            "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GPT.PROJECT_ID) AS TOTAL_TASKS, "+
            "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE TASK_STATUS_TYPE_CODE = 'COM' AND TASK_STATUS_TYPE_CODE != 'CLOSED' AND TASK_STATUS_TYPE_CODE != 'OBSOLETE'  AND PROJECT_ID = GPT.PROJECT_ID ) AS COMPLETED_TASK, "+ 
            "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) is null then 0 "+
			"else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) end AS PROJECT_MIN_AMT, "+
			"case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) is null then 0 "+
			"else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) end AS PROJECT_MAX_AMT,  "+  
            "(SELECT TYPE FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) AS BUDGET_TYPE, "+
            "(SELECT CURRENCY_CODE FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) AS CURRENCY_CODE, "+
			"case when (SELECT CURRENCY_CODE FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) is null then NULL "+
			"else (SELECT GC.SYMBOL FROM gnieprojectmanagement.GPM_BUDGET GB,gnieplatform.GPF_CURRENCY GC WHERE GB.CLASS_ID=GP.ID AND GB.CLASS_TYPE='PROJECT' AND GB.TENANT_ID=GP.TENANT_ID AND GC.CODE = GB.CURRENCY_CODE) end AS CURRENCY_SYMBOL "+
            "FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GP.TENANT_ID= ? AND GPT.USER_ID = ? AND GP.ID=?  AND (ESTIMATED_COMPLETION_DATE IS NULL OR "+
            "ESTIMATED_COMPLETION_DATE > CURRENT_DATE) AND GP.ID = GPT.PROJECT_ID "+
            "GROUP BY PROJECT_ID,IS_AUTOMATED,PROJECT_NAME,LOCATION_NAME,PROJECT_DESCRIPTION,PROJECT_DESCRIPTION,PROJECT_TYPE_CODE,PROJECT_STATUS_TYPE_CODE,LOCATION_NAME,CREATION_DATE,LAST_UPDATED_DATE,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,DISPLAY_VALUE,MEMBERS_NAME,TOTAL_MEMBERS,TOTAL_HOURS,PROJECT_OWNERS,IS_FAVOURITE "+
            "ORDER BY IS_FAVOURITE DESC,LAST_UPDATED_DATE DESC;",
        getProjectOwnerToNotify:"SELECT  U.ID,U.EMAIL FROM gnieplatform.GPF_USER U,gnieprojectmanagement.GPM_PROJECT_TEAM T "+
            "WHERE T.TENANT_ID=? AND T.PROJECT_ID=? AND U.TENANT_ID=T.TENANT_ID AND T.USER_ID=U.ID AND T.ROLE_TYPE_CODE='OWNER' ",

        getTaskImages:"SELECT ACTION_ID,ACTION_CODE,FILE_NAME,DESCRIPTION,FILE_URL FROM gnieplatform.GPF_ATTACHMENTS WHERE ACTION_ID = ? AND ACTION_CODE ='A1001' AND TENANT_ID=? "+
            "UNION ALL "+
            "SELECT ACTION_ID,ACTION_CODE,FILE_NAME,DESCRIPTION,FILE_URL FROM gnieplatform.GPF_ATTACHMENTS WHERE ACTION_ID IN ( "+
            "SELECT ID FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID = ?) AND ACTION_CODE='A1003' AND TENANT_ID=? ",
		

        isClosedOrCompleted:"SELECT PROJECT_STATUS_TYPE_CODE  FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=? AND TENANT_ID=? ",

        isArchived:"SELECT IS_ARCHIVED  FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=? AND TENANT_ID=? ",

        archiveProject:"UPDATE gnieprojectmanagement.GPM_PROJECTS SET IS_ARCHIVED='Y', UPDATED_BY=? WHERE ID=? AND TENANT_ID=?",

        unArchiveProject:"UPDATE gnieprojectmanagement.GPM_PROJECTS SET IS_ARCHIVED='N', UPDATED_BY=? WHERE ID=? AND TENANT_ID=?",

        viewArchiveProjects:"SELECT GP.ID AS PROJECT_ID,"+
        "(SELECT IS_AUTOMATED FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID=GP.ID AND ID = (SELECT MAX(ID) FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID)) AS IS_AUTOMATED,"+
        "GP.PROJECT_NAME,GP.LOCATION_NAME, GP.PROJECT_DESCRIPTION,GP.PROJECT_TYPE_CODE,GP.PROJECT_STATUS_TYPE_CODE,GP.LOCATION_NAME,GP.CREATION_DATE,GP.LAST_UPDATED_DATE,GP.ESTIMATED_START_DATE,GP.ESTIMATED_COMPLETION_DATE,"+
        "(SELECT GC.CLIENT_NAME FROM gnieplatform.GPF_CLIENTS GC WHERE GC.ID IN (SELECT GPM.CLIENT_ID FROM gnieprojectmanagement.GPM_CLIENT_PROJECT_MAPPING GPM WHERE GPM.PROJECT_ID = GP.ID)) AS CLIENT_NAME,"+            
        "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE PROJECT_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.TENANT_ID=GP.TENANT_ID  AND GL.LOOKUP_TYPE='PROJECT_STATUS'  GROUP BY GL.DISPLAY_VALUE) AS DISPLAY_VALUE,"+
        "(SELECT group_concat(distinct(SGU.FULL_NAME))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM SGPT,gnieplatform.GPF_USER SGU WHERE SGPT.PROJECT_ID = GP.ID AND SGPT.USER_ID = SGU.ID AND SGPT.EFFECTIVE_END_DATE IS NULL ) AS MEMBERS_NAME,"+
        "(SELECT COUNT(distinct(USER_ID))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID = GP.ID AND EFFECTIVE_END_DATE IS NULL ) AS TOTAL_MEMBERS,"+
        "(SELECT IFNULL(SUM(HOURS),0) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID IN (SELECT ID FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID ) AND UPPER(WORKLOG_STATUS) = 'ACTIVE') AS TOTAL_HOURS,"+
        "(SELECT group_concat(USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT LEFT JOIN gnieplatform.GPF_USER U ON U.ID=USER_ID LEFT JOIN gnieplatform.GPF_FUNCTIONAL_ROLE FR ON GPT.FUNCTIONAL_ROLE_ID = FR.ID "+
        "WHERE GPT.PROJECT_ID = GP.ID AND UPPER(GPT.ROLE_TYPE_CODE) ='OWNER' AND GPT.EFFECTIVE_END_DATE IS NULL AND (U.EFFECTIVE_END_DATE IS NULL OR U.EFFECTIVE_END_DATE > NOW() ) AND FR.TENANT_ID = U.TENANT_ID AND lower(FR.ROLE_NAME) like  '%project manager%') AS PROJECT_OWNERS,"+
        "(SELECT IF((SELECT COUNT(ID) FROM gnieprojectmanagement.GPM_FAVOURITE_PROJECTS WHERE PROJECT_ID = GP.ID AND USER_ID = ? AND EFFECTIVE_END_DATE IS NULL  > 0), 'Y','N')) AS IS_FAVOURITE, GP.CREATED_BY, "+
        "case when GP.PROJECT_STATUS_TYPE_CODE in ('CLOSED','HOLD') then GP.LAST_UPDATED_DATE else null end as CLOSING_DATE, "+
        "(SELECT group_concat(FULL_NAME) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT LEFT JOIN gnieplatform.GPF_USER U ON U.ID=USER_ID LEFT JOIN gnieplatform.GPF_FUNCTIONAL_ROLE FR ON GPT.FUNCTIONAL_ROLE_ID = FR.ID "+
        "WHERE GPT.PROJECT_ID = GP.ID AND UPPER(GPT.ROLE_TYPE_CODE) ='OWNER' AND GPT.EFFECTIVE_END_DATE IS NULL AND (U.EFFECTIVE_END_DATE IS NULL OR U.EFFECTIVE_END_DATE > NOW() ) AND FR.TENANT_ID = U.TENANT_ID AND lower(FR.ROLE_NAME) like '%project manager%' ) AS PROJECT_OWNERS_NAME,"+
        "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GPT.PROJECT_ID) AS TOTAL_TASKS, "+
        "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE TASK_STATUS_TYPE_CODE = 'COM' AND TASK_STATUS_TYPE_CODE != 'CLOSED' AND TASK_STATUS_TYPE_CODE != 'OBSOLETE'  AND PROJECT_ID = GPT.PROJECT_ID ) AS COMPLETED_TASK "+ 
        "FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GP.TENANT_ID= ? AND GPT.USER_ID = ?  AND (ESTIMATED_COMPLETION_DATE IS NULL OR "+
        "ESTIMATED_COMPLETION_DATE > CURRENT_DATE) AND GP.ID = GPT.PROJECT_ID  AND GP.IS_ARCHIVED='Y' "+
        "GROUP BY PROJECT_ID,IS_AUTOMATED,PROJECT_NAME,LOCATION_NAME,PROJECT_DESCRIPTION,PROJECT_DESCRIPTION,PROJECT_TYPE_CODE,PROJECT_STATUS_TYPE_CODE,LOCATION_NAME,CREATION_DATE,LAST_UPDATED_DATE,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,DISPLAY_VALUE,MEMBERS_NAME,TOTAL_MEMBERS,TOTAL_HOURS,PROJECT_OWNERS,IS_FAVOURITE "+
        "ORDER BY IS_FAVOURITE DESC,LAST_UPDATED_DATE DESC;",

        fetchSubTaskForMilestone:"SELECT ID FROM gnieprojectmanagement.GPM_TASKS WHERE TYPE='SUB' AND MAIN_TASK_ID IN (?) AND TENANT_ID=?;",

        createGroup:"INSERT INTO  gnieprojectmanagement.GPM_GROUPS (TENANT_ID,PROJECT_ID,NAME,DESCRIPTION, "+
            "STATUS,GROUP_ORDER,CREATED_BY,UPDATED_BY) VALUES (?,?,?,?,?,?,?,?);",
        fetchGroup:"SELECT  ID,NAME,DESCRIPTION,STATUS FROM gnieprojectmanagement.GPM_GROUPS WHERE PROJECT_ID=? AND TENANT_ID=?  ORDER BY CREATION_DATE ",

        isGroupNameExists:"SELECT ID FROM gnieprojectmanagement.GPM_GROUPS WHERE TENANT_ID=? AND PROJECT_ID=? AND UPPER(NAME)=? ",

        getGroupStatus:"SELECT G.ID, G.STATUS FROM gnieprojectmanagement.GPM_GROUPS G, gnieprojectmanagement.GPM_TASKS T "
        +"WHERE G.TENANT_ID=? AND T.ID=? AND T.PROJECT_ID=G.PROJECT_ID AND  G.ID=T.GROUP_ID AND "
        +"G.TENANT_ID=T.TENANT_ID",
        updateGroupStatus:"UPDATE  gnieprojectmanagement.GPM_GROUPS SET STATUS=? ,UPDATED_BY=? WHERE TENANT_ID=?  AND ID=? ;",

        checkTaskStatusInGroup:"SELECT CASE WHEN EXISTS (SELECT ID,TASK_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_TASKS WHERE GROUP_ID=(SELECT GROUP_ID FROM "+
            "gnieprojectmanagement.GPM_TASKS WHERE ID=? AND TENANT_ID=?) AND TASK_STATUS_TYPE_CODE IN(?))  "+
            "THEN 'true' ELSE 'false' END  TASK_EXISTS",
        getStartDateEndDateOfTask:"SELECT min(ACTUAL_START_DATE) AS START_DATE , max(ACTUAL_COMPLETION_DATE) AS END_DATE  FROM gnieprojectmanagement.GPM_TASKS "+
            "WHERE TENANT_ID=? AND  GROUP_ID=?  AND PROJECT_ID=? AND TYPE=?;",
        setStartDateEndDateOfGroup:"UPDATE  gnieprojectmanagement.GPM_GROUPS SET START_DATE =? , END_DATE=?,  UPDATED_BY=? "+
            "WHERE ID=? AND PROJECT_ID=? AND TENANT_ID=?  ;",
        getStartDateEndDateOfSubTask:"SELECT  MIN(ACTUAL_START_DATE) AS START_DATE, MAX(ACTUAL_COMPLETION_DATE) AS END_DATE FROM "+
            "gnieprojectmanagement.GPM_TASKS WHERE TENANT_ID=? AND PROJECT_ID=? AND MAIN_TASK_ID=? AND TYPE=? AND TASK_STATUS_TYPE_CODE!='CLOSED' AND TASK_STATUS_TYPE_CODE!='OBSOLETE' ;",
        setStartDateEndDateOfTask:"UPDATE  gnieprojectmanagement.GPM_TASKS SET ACTUAL_START_DATE = ?,ACTUAL_COMPLETION_DATE=?,ESTIMATED_START_DATE=? , ESTIMATED_COMPLETION_DATE=?,  UPDATED_BY=? "+
        "WHERE ID=? AND PROJECT_ID=? AND TENANT_ID=? ",
        getStatusCountOfTask: "select max(case when a.TASK_STATUS_TYPE_CODE='OPEN' then a.count else 0 end)as OPEN,max(case when a.TASK_STATUS_TYPE_CODE='NS' then a.count else 0 end )as NS, "
        + "max(case when a.TASK_STATUS_TYPE_CODE='HOLD' then a.count else 0 end )as HOLD,max(case when a.TASK_STATUS_TYPE_CODE='CLOSED' then a.count else 0 end )as CLOSED,max(case when a.TASK_STATUS_TYPE_CODE='IP' then a.count else 0 end )as IP, "
        + "max(case when a.TASK_STATUS_TYPE_CODE='COM' then a.count else 0 end )as COM from (SELECT TASK_STATUS_TYPE_CODE,count(*) as COUNT "
        + "FROM gnieprojectmanagement.GPM_TASKS where PROJECT_ID in (?) AND GROUP_ID IN (?) AND TENANT_ID = ? AND TYPE='MAIN' group by TASK_STATUS_TYPE_CODE) a",

        getMainTaskStatus:"SELECT TASK_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_TASKS WHERE TYPE='MAIN' AND TENANT_ID=? AND ID=?;",

        getStatusCountOfSubByMainTask :"select (SELECT TASK_STATUS_TYPE_CODE FROM gnieprojectmanagement.GPM_TASKS WHERE ID=?)AS STATUS, "+
        "max(case when a.TASK_STATUS_TYPE_CODE='OPEN' then a.count else 0 end)as OPEN,max(case when a.TASK_STATUS_TYPE_CODE='NS' then a.count else 0 end )as NS, "
        +"max(case when a.TASK_STATUS_TYPE_CODE='HOLD' then a.count else 0 end )as HOLD,max(case when a.TASK_STATUS_TYPE_CODE='CLOSED' then a.count else 0 end )as CLOSED,max(case when a.TASK_STATUS_TYPE_CODE='IP' then a.count else 0 end )as IP, "
        +"max(case when a.TASK_STATUS_TYPE_CODE='COM' then a.count else 0 end )as COM from (SELECT TASK_STATUS_TYPE_CODE,count(*) as COUNT FROM gnieprojectmanagement.GPM_TASKS where MAIN_TASK_ID = ? group by TASK_STATUS_TYPE_CODE) a" ,

        updateMainTaskStatus:"UPDATE  gnieprojectmanagement.GPM_TASKS SET TASK_STATUS_TYPE_CODE = ? WHERE ID=?",

        changeSubTaskGroup:"UPDATE gnieprojectmanagement.GPM_TASKS SET GROUP_ID=?,UPDATED_BY=? WHERE TENANT_ID=? AND MAIN_TASK_ID=?;",
        isMainTaskAddedToMilestone:"SELECT MILESTONE_ID FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING WHERE TASK_ID=? AND TENANT_ID=?;",
        checkGroupExists:"select * FROM gnieprojectmanagement.GPM_GROUPS WHERE LOWER(NAME) = ? and PROJECT_ID = ? AND TENANT_ID = ?;",
        insertGroup:"INSERT INTO gnieprojectmanagement.GPM_GROUPS(TENANT_ID,PROJECT_ID,NAME,DESCRIPTION,STATUS,GROUP_ORDER,START_DATE,END_DATE,CREATED_BY,UPDATED_BY) "
        +" VALUES (?,?,?,?,'NS',?,?,?,?,?);",
        checkIfTaskExists:"select * FROM gnieprojectmanagement.GPM_TASKS WHERE LOWER(TASK_NAME) = ? and PROJECT_ID=? AND GROUP_ID=?;",
        insertTask:"INSERT INTO gnieprojectmanagement.GPM_TASKS "+
            "(PROJECT_ID,TENANT_ID,TASK_NAME,TASK_DESCRIPTION,TYPE,GROUP_ID,TASK_TYPE_CODE,TASK_STATUS_TYPE_CODE,ASSIGNED_BY"+
            ",PRIORITY_TYPE_CODE,ORDER_OF_EXECUTION,IS_AUTOMATED,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ESTIMATED_EFFORT,"+
            "ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,CREATED_BY,UPDATED_BY) VALUES "+
            "(?,?,?,?,?,?,?,'NS',?,?,?,TRUE,?,?,?,?,?,?,?);",
        insertSubTasks:"INSERT INTO gnieprojectmanagement.GPM_TASKS "+
            "(PROJECT_ID,TENANT_ID,TASK_NAME,TASK_DESCRIPTION,TYPE,MAIN_TASK_ID,GROUP_ID,TASK_TYPE_CODE,TASK_STATUS_TYPE_CODE,ASSIGNED_BY"+
        ",PRIORITY_TYPE_CODE,ORDER_OF_EXECUTION,IS_AUTOMATED,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ESTIMATED_EFFORT," +
        "ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE,CREATED_BY,UPDATED_BY) VALUES ? ",
    getProjectsOfEmployee: "SELECT ID,PROJECT_NAME,PROJECT_DESCRIPTION,PROJECT_TYPE_CODE FROM gnieprojectmanagement.GPM_PROJECTS "
        +"WHERE PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND ID "
        +"IN(SELECT PROJECT_ID FROM gnieprojectmanagement.GPM_PROJECT_TEAM where USER_ID=? and EFFECTIVE_END_DATE IS NULL) ORDER BY CREATION_DATE DESC;",

    changeTaskMilestone:"UPDATE gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING set MILESTONE_ID = ? where TASK_ID in (@StrParam1)",
    getIssueImages:"SELECT ACTION_ID,ACTION_CODE,FILE_NAME,DESCRIPTION,FILE_URL FROM gnieplatform.GPF_ATTACHMENTS "+
        "WHERE ACTION_ID = ? AND ACTION_CODE ='A1005' AND TENANT_ID=? ",

    getIssueCountByStatus:"select max(case when a.STATUS='OPEN' then a.count else 0 end)as OPEN_COUNT,max(case when a.STATUS='IP' then a.count else 0 end )as IP_COUNT, "
        +"max(case when a.STATUS='RESOLVED' then a.count else 0 end )as RESOLVED_COUNT, max(case when a.STATUS='NS' then a.count else 0 end )as NS_COUNT, "
        +"max(case when a.STATUS='VC' then a.count else 0 end )as VC_COUNT,max(case when a.STATUS='REOPEN' then a.count else 0 end )as REOPEN_COUNT, "
        +"max(case when a.STATUS='NR' then a.count else 0 end )as NR_COUNT,max(case when a.STATUS='DUPLICATE' then a.count else 0 end )as DUPLICATE_COUNT, "
        +"max(case when a.STATUS='NI' then a.count else 0 end )as NI_COUNT, max(case when a.STATUS='AD' then a.count else 0 end )as AD_COUNT, "
        +"max(case when a.STATUS='RFT' then a.count else 0 end )as RFT_COUNT from "
        +"(SELECT GIT.STATUS, count(GIT.STATUS) as count FROM gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_ISSUE_TRACKER GIT left join gnieprojectmanagement.GPM_MODULES GM on GIT.MODULE_ID = GM.ID where GIT.PROJECT_ID = GP.ID AND GIT.PROJECT_ID = ? group by STATUS) a",


    removeTaskFromMilestone:"UPDATE gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING SET EFFECTIVE_END_DATE=?, UPDATED_BY=? WHERE "+
        "TASK_ID IN (?) AND MILESTONE_ID=? AND TENANT_ID=?;"  ,  
    fetchRecurringRules:"SELECT ID,NAME,DESCRIPTION,TYPE,VALUE FROM gnieplatform.GPF_RULES WHERE TENANT_ID=? AND RULE_TYPE='RECURRING_TASK'; ",

    // addRecurringData:"INSERT INTO gnieprojectmanagement.GPM_RECURRING_TASK "+
    //     "(TENANT_ID,TASK_ID,RULE_ID,NEXT_OCCURANCE_DATE,START_DATE,END_DATE,CREATED_BY,UPDATED_BY) VALUES (?,?,?,?,?,?,?,?);",
    addRecurringData:"INSERT INTO gnieprojectmanagement.GPM_RECURRING_TASK "+
        "(TENANT_ID,TASK_ID,RULE_ID,NEXT_OCCURANCE_DATE,START_DATE,END_DATE,CREATED_BY,UPDATED_BY,RECURRING_COUNT) VALUES ? ;",
    
    updateRecurringTask:" UPDATE gnieprojectmanagement.GPM_RECURRING_TASK SET RULE_ID=?,NEXT_OCCURANCE_DATE=?,START_DATE=?, "+
        "END_DATE=?,UPDATED_BY=? WHERE TASK_ID IN (?) AND TENANT_ID=?;",

    getSubTask:" SELECT  ID FROM gnieprojectmanagement.GPM_TASKS WHERE MAIN_TASK_ID=? AND TYPE='SUB' AND TASK_STATUS_TYPE_CODE IN (?) AND TENANT_ID=?  ",
        // "AND ID IN (SELECT TASK_ID FROM  gnieprojectmanagement.GPM_RECURRING_TASK WHERE TENANT_ID=?  ) ",  

    getRecurringTasks:"SELECT GRT.ID, GRT.TENANT_ID, GRT.TASK_ID,GRT.RULE_ID,GRT.NEXT_OCCURANCE_DATE,GR.NAME as RULE_NAME, GR.VALUE,GT.PROJECT_ID,GT.TYPE,GT.MAIN_TASK_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GRT.SKIP_DATES,GRT.RECURRING_COUNT, "
        +"GT.TASK_TYPE_CODE, GT.ASSIGNED_BY,GT.ASSIGNED_TO,GT.PRIORITY_TYPE_CODE,GT.CAN_CONTINUE, GT.ORDER_OF_EXECUTION,GT.IS_AUTOMATED,GT.GROUP_ID,GT.ESTIMATED_EFFORT,GT.CREATED_BY FROM gnieprojectmanagement.GPM_RECURRING_TASK GRT,gnieprojectmanagement.GPM_TASKS GT,"
        +"gnieplatform.GPF_RULES GR ,gnieprojectmanagement.GPM_PROJECTS GP where GRT.NEXT_OCCURANCE_DATE = ? AND GRT.END_DATE > ? AND GRT.TASK_ID = GT.ID AND GR.ID = GRT.RULE_ID AND GP.ID = GT.PROJECT_ID AND GP.PROJECT_STATUS_TYPE_CODE not in ('COM','CLOSED','HOLD')",

    updateNextOcuurenceDate:"update gnieprojectmanagement.GPM_RECURRING_TASK set NEXT_OCCURANCE_DATE = ?,RECURRING_COUNT = ? where ID in (@StrParam1)",

    recurringTaskByProject:"SELECT T.ID,T.TASK_NAME,T.TASK_DESCRIPTION,T.ASSIGNED_BY,T.ASSIGNED_TO,T.TASK_STATUS_TYPE_CODE,T.TYPE, "+
        "T.ESTIMATED_COMPLETION_DATE,T.ACTUAL_START_DATE,T.ACTUAL_COMPLETION_DATE,T.ESTIMATED_EFFORT, "+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=T.ASSIGNED_TO AND T.TENANT_ID=U.TENANT_ID) AS ASSIGNED_TO_NAME, "+
        "(SELECT DISPLAY_VALUE FROM gnieplatform .GPF_LOOKUP WHERE LOOKUP_TYPE='PROJECT_STATUS' "+
        "AND LOOKUP_CODE=T.TASK_STATUS_TYPE_CODE AND TENANT_ID=T.TENANT_ID) AS DISPLAY_VALUE, "+
        "(SELECT G.NAME FROM gnieprojectmanagement.GPM_GROUPS G WHERE G.ID=T.GROUP_ID AND G.TENANT_ID=T.TENANT_ID) AS GROUP_NAME, "+
        "(SELECT R.START_DATE FROM gnieprojectmanagement.GPM_RECURRING_TASK R WHERE T.ID=R.TASK_ID AND R.TENANT_ID=T.TENANT_ID) AS RECURRING_START_DATE, "+
        "(SELECT R.END_DATE FROM gnieprojectmanagement.GPM_RECURRING_TASK R WHERE T.ID=R.TASK_ID AND R.TENANT_ID=T.TENANT_ID) AS RECURRING_END_DATE, "+
        "(SELECT R.NEXT_OCCURANCE_DATE FROM gnieprojectmanagement.GPM_RECURRING_TASK R WHERE T.ID=R.TASK_ID AND R.TENANT_ID=T.TENANT_ID) AS NEXT_OCCURANCE_DATE,"+
        "(SELECT R.RECURRING_COUNT FROM gnieprojectmanagement.GPM_RECURRING_TASK R WHERE T.ID=R.TASK_ID AND R.TENANT_ID=T.TENANT_ID) AS RECURRING_COUNT, "+
        "(SELECT CASE WHEN EXISTS (SELECT ST.ID FROM gnieprojectmanagement.GPM_TASKS ST WHERE "+
        "T.ID = ST.MAIN_TASK_ID AND TASK_STATUS_TYPE_CODE !='CLOSED' AND TASK_STATUS_TYPE_CODE !='OBSOLETE'  AND ST.ID IN (SELECT TASK_ID FROM gnieprojectmanagement.GPM_RECURRING_TASK WHERE TENANT_ID=ST.TENANT_ID) )THEN 'true' ELSE 'false' END ) HAS_SUB_TASK, "+
        "(SELECT G.NAME FROM gnieplatform.GPF_RULES G,gnieprojectmanagement.GPM_RECURRING_TASK R WHERE G.ID =R.RULE_ID AND R.TASK_ID=T.ID AND R.TENANT_ID=T.TENANT_ID) AS RULE_NAME, "+
        "(SELECT CASE WHEN EXISTS (SELECT TASK_ID FROM gnieprojectmanagement.GPM_RECURRING_TASK WHERE "+
        "END_DATE<=NOW() AND T.ID=TASK_ID)THEN 'true' ELSE 'false' END ) STOPPED "+
        "FROM gnieprojectmanagement.GPM_TASKS T WHERE T.ID IN (SELECT TASK_ID FROM gnieprojectmanagement.GPM_RECURRING_TASK WHERE "+
        "TENANT_ID=?) AND T.PROJECT_ID=? AND T.TYPE='MAIN' AND TASK_STATUS_TYPE_CODE !='CLOSED' AND TASK_STATUS_TYPE_CODE !='OBSOLETE' ",

    getRecurringSubTask:"SELECT  ST.ID,ST.TASK_NAME AS SUB_TASK_NAME, ST.TASK_DESCRIPTION,ST.PRIORITY_TYPE_CODE,ST.TASK_STATUS_TYPE_CODE ,L.DISPLAY_VALUE, "+
        "ST.ASSIGNED_TO , ST.ASSIGNED_BY, ST.ESTIMATED_EFFORT, ST.ACTUAL_EFFORT,ST.ACTUAL_START_DATE,  'Sub Task' AS TASK_TYPE , "+
        "ST.ACTUAL_COMPLETION_DATE,ST.ESTIMATED_START_DATE,ST.ESTIMATED_COMPLETION_DATE, "+
        "(SELECT  U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=ST.CREATED_BY AND U.TENANT_ID=ST.TENANT_ID) AS CREATED_BY_NAME, "+
        "(SELECT  U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=ST.ASSIGNED_BY AND U.TENANT_ID=ST.TENANT_ID) AS FULL_NAME, "+
        "(SELECT  U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=ST.ASSIGNED_TO AND U.TENANT_ID=ST.TENANT_ID) AS ASSIGNED_TO_NAME , "+
        "(SELECT R.START_DATE FROM gnieprojectmanagement.GPM_RECURRING_TASK R WHERE ST.ID=R.TASK_ID AND R.TENANT_ID=ST.TENANT_ID) AS RECURRING_START_DATE, "+
        "(SELECT R.END_DATE FROM gnieprojectmanagement.GPM_RECURRING_TASK R WHERE ST.ID=R.TASK_ID AND R.TENANT_ID=ST.TENANT_ID) AS RECURRING_END_DATE, "+
        "(SELECT G.NAME FROM gnieplatform.GPF_RULES G,gnieprojectmanagement.GPM_RECURRING_TASK R WHERE G.ID =R.RULE_ID AND R.TASK_ID=ST.ID AND R.TENANT_ID=ST.TENANT_ID ) AS RULE_NAME,"+
        "(SELECT CASE WHEN EXISTS (SELECT TASK_ID FROM gnieprojectmanagement.GPM_RECURRING_TASK WHERE "+
        "END_DATE<=NOW() AND ST.ID=TASK_ID )THEN 'true' ELSE 'false' END ) STOPPED "+
        "FROM gnieprojectmanagement.GPM_TASKS ST,gnieplatform.GPF_LOOKUP L "+
        "WHERE ST.MAIN_TASK_ID=? AND  ST.TENANT_ID=? AND L.TENANT_ID=ST.TENANT_ID  AND TASK_STATUS_TYPE_CODE!='CLOSED' AND TASK_STATUS_TYPE_CODE!='OBSOLETE' AND L.LOOKUP_CODE=ST.TASK_STATUS_TYPE_CODE AND LOOKUP_TYPE='PROJECT_STATUS'  "+
        "AND ST.ID IN (SELECT TASK_ID FROM gnieprojectmanagement.GPM_RECURRING_TASK WHERE TENANT_ID=ST.TENANT_ID) "+
        "GROUP BY ST.ID,ST.TASK_NAME, ST.TASK_DESCRIPTION,ST.PRIORITY_TYPE_CODE,ST.TASK_STATUS_TYPE_CODE ,L.DISPLAY_VALUE,  "+
        "ST.ASSIGNED_TO , ST.ASSIGNED_BY, ST.ESTIMATED_EFFORT, ST.ACTUAL_EFFORT,ST.ACTUAL_START_DATE,ST.ACTUAL_COMPLETION_DATE, "+
        "ST.ESTIMATED_START_DATE,ST.ESTIMATED_COMPLETION_DATE,TASK_TYPE,FULL_NAME",
        
    getTaskNSubTaskIds:"SELECT ID FROM gnieprojectmanagement.GPM_TASKS where ID IN (@StrParam1) OR MAIN_TASK_ID IN (@StrParam1)",
    stopRecurringTask:"UPDATE gnieprojectmanagement.GPM_RECURRING_TASK SET END_DATE= NOW() where TASK_ID IN (@StrParam1)",
    
	updateRecurringData:"UPDATE  gnieprojectmanagement.GPM_RECURRING_TASK SET RULE_ID=?, NEXT_OCCURANCE_DATE=?,START_DATE=?,END_DATE=?, "+
    "UPDATED_BY=? WHERE TASK_ID IN(?) AND TENANT_ID=?;",
    getMilestoneSubTask:"SELECT ID FROM gnieprojectmanagement.GPM_TASKS WHERE MAIN_TASK_ID IN(?) AND TENANT_ID=?",

    getRecurringData:" SELECT TASK_ID,RULE_ID,NEXT_OCCURANCE_DATE,START_DATE,END_DATE FROM gnieprojectmanagement.GPM_RECURRING_TASK "+
 "WHERE TASK_ID=? AND TENANT_ID=?",

    checkIssueExists:"SELECT * FROM gnieprojectmanagement.GPM_ISSUE_TRACKER where UPPER(ISSUE_NAME)=? and STATUS not in ('OBSOLETE')",
    postponeTask:"UPDATE gnieprojectmanagement.GPM_TASKS SET ESTIMATED_START_DATE = DATE_ADD(ESTIMATED_START_DATE, INTERVAL ? DAY),ESTIMATED_COMPLETION_DATE = DATE_ADD(ESTIMATED_START_DATE, INTERVAL (ESTIMATED_EFFORT/8) DAY) WHERE ID = ?;",
    getUpdatedTaskDates:"select ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE FROM gnieprojectmanagement.GPM_TASKS WHERE ID=?;",
    updateNewRecTasksDate:"UPDATE gnieprojectmanagement.GPM_TASKS SET ESTIMATED_START_DATE = ?,ACTUAL_START_DATE = ?,ESTIMATED_COMPLETION_DATE = DATE_ADD(?, INTERVAL (ESTIMATED_EFFORT/8) DAY),ACTUAL_COMPLETION_DATE = DATE_ADD(?, INTERVAL (ESTIMATED_EFFORT/8) DAY) WHERE ID in (@StrParam1)",

    getGroupRule:"SELECT T.ID,T.TASK_NAME ,R.RULE_ID,RU.NAME AS RULE_NAME FROM gnieprojectmanagement.GPM_TASKS T  LEFT JOIN "+
    "gnieprojectmanagement.GPM_RECURRING_TASK R ON T.ID=R.TASK_ID AND T.TENANT_ID=R.TENANT_ID "+
    "LEFT JOIN gnieplatform.GPF_RULES RU  ON R.RULE_ID=RU.ID "+
    "WHERE T.GROUP_ID=? AND T.PROJECT_ID=? AND T.TENANT_ID=?",

    cancelRecurringTask:"UPDATE gnieprojectmanagement.GPM_RECURRING_TASK SET SKIP_DATES=? where TASK_ID IN (@StrParam1);",
    getRecuringTaskDetails:"SELECT GRT.ID,GRT.TASK_ID,GRT.TENANT_ID,GRT.NEXT_OCCURANCE_DATE,GRT.START_DATE,GRT.END_DATE,GRT.SKIP_DATES,GRT.RULE_ID, "+
    "(SELECT NAME FROM gnieplatform.gpf_rules GR WHERE GRT.RULE_ID = GR.ID) AS RULE_NAME, "+
    "(SELECT VALUE FROM gnieplatform.gpf_rules GR WHERE GRT.RULE_ID = GR.ID) AS RULE_VALUE "+
    "FROM gnieprojectmanagement.GPM_RECURRING_TASK GRT WHERE TASK_ID = ?;",
    getIssueMangerDetails:"SELECT GU.EMAIL AS PM_EMAIL,GU.WHATSAPP_NUMBER AS PM_WHATSAPP_NUMBER,GU.TENANT_ID,"+
    "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS GT WHERE GU.TENANT_ID = GT.ID) AS TENANT_NAME,"+
    "(SELECT WHATSAPP_ID FROM gnieplatform.GPF_TENANTS GT WHERE GU.TENANT_ID = GT.ID) AS WHATSAPP_ID "+
    "FROM gnieplatform.GPF_USER GU WHERE "+
    "GU.ID IN (SELECT USER_ID FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID=? AND ROLE_TYPE_CODE = 'OWNER' AND EFFECTIVE_END_DATE IS NULL)",

    addIssueToMilestone:"INSERT INTO gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING (TENANT_ID,MILESTONE_ID,ISSUE_ID,EFFECTIVE_START_DATE,CREATED_BY,UPDATED_BY) VALUES ?",
    removeIssueFromMilestone:"UPDATE gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING SET EFFECTIVE_END_DATE=now(), UPDATED_BY=? WHERE ISSUE_ID IN (?) AND MILESTONE_ID=?"  ,  
    changeIssueMilestone:"UPDATE gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING set MILESTONE_ID = ?, UPDATED_BY=? where ISSUE_ID in (?)",
    getIssuesUnderMilestone:"SELECT GMIM.ID, GMIM.ISSUE_ID,GMIM.CREATED_BY, GIT.ASSIGNED_TO,GIT.ASSIGNED_BY,GIT.ISSUE_NAME,GIT.DESCRIPTION,GIT.PRIORITY,GIT.SEVERITY,GIT.STATUS,GIT.CREATION_DATE,GIT.START_DATE,GIT.END_DATE, "
        +"case when GIT.MODULE_ID is null then 'GENERAL' else (select UPPER(NAME) from gnieprojectmanagement.GPM_MODULES where ID = GIT.MODULE_ID) end as MODULE,DATEDIFF(NOW(),GIT.CREATION_DATE) AS DAYS_COUNT,GIT.MODULE_ID,"
        +"(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE  GL.LOOKUP_TYPE='ISSUE_STATUS' AND GIT.STATUS = GL.LOOKUP_CODE AND GL.TENANT_ID=GIT.TENANT_ID) AS DISPLAY_VALUE , "
        +"(SELECT U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=GIT.ASSIGNED_TO ) AS ASSIGNED_TO_NAME,(SELECT U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=GIT.ASSIGNED_BY ) AS ASSIGNED_BY_NAME, "
        +"CASE WHEN (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = GIT.PROJECT_ID and GPT.USER_ID = GIT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) IS NULL THEN 'EMPLOYEE' ELSE (SELECT ROLE_NAME FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_FUNCTIONAL_ROLE GFR where GPT.PROJECT_ID = GIT.PROJECT_ID and GPT.USER_ID = GIT.ASSIGNED_TO AND GPT.FUNCTIONAL_ROLE_ID = GFR.ID AND GPT.EFFECTIVE_END_DATE IS NULL) END ROLE_NAME, "
        +"(SELECT U.FULL_NAME FROM gnieplatform.GPF_USER U WHERE U.ID=GMIM.CREATED_BY ) AS CREATED_BY_NAME FROM gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING  GMIM , "
        +"gnieprojectmanagement.GPM_ISSUE_TRACKER GIT  WHERE GMIM.ISSUE_ID=GIT.ID AND GMIM.MILESTONE_ID=? AND GMIM.TENANT_ID=? AND GMIM.EFFECTIVE_END_DATE IS NULL ",
     getMangersData:"SELECT  GU.EMAIL AS PM_EMAIL,GU.WHATSAPP_NUMBER AS PM_WHATSAPP_NUMBER,GT.ID AS "+
        "TASK_ID,GT.PROJECT_ID,GT.ESTIMATED_COMPLETION_DATE, GT.TENANT_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION, "+
         "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID=GT.PROJECT_ID) AS PROJECT_NAME, "+
         "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID=GT.CREATED_BY) AS CREATED_BY_NAME, "+
         "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS WHERE ID=GT.TENANT_ID) AS TENANT_NAME, "+
         "(SELECT WHATSAPP_ID FROM gnieplatform.GPF_TENANTS WHERE ID=GT.TENANT_ID) AS WHATSAPP_ID, "+
         "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE LOOKUP_CODE = GT.TASK_STATUS_TYPE_CODE AND "+
         "TENANT_ID=? AND LOOKUP_TYPE = 'PROJECT_STATUS') AS STATUS FROM gnieplatform.GPF_USER GU, "+
         "gnieprojectmanagement.GPM_TASKS GT WHERE GT.ID = ?  "+
         "AND GU.ID=(SELECT MANAGER_ID FROM gnieplatform.GPF_USER WHERE ID=?);",
         convertTaskToIssue:"INSERT INTO gnieprojectmanagement.GPM_ISSUE_TRACKER (`TENANT_ID`,`PROJECT_ID`,`ISSUE_NAME`,`DESCRIPTION`,`PRIORITY`,`SEVERITY`,`ASSIGNED_TO`,`ASSIGNED_BY`,`STATUS`,"
         +"`CREATION_DATE`,`CREATED_BY`,`LAST_UPDATED_DATE`,`UPDATED_BY`,`MODULE_ID`) VALUES (?,?,?,?,?,?,?,?,?,now(),? ,now(),?,?)",
         getMilestoneIfExists:"SELECT * FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING where TASK_ID = ? AND EFFECTIVE_END_DATE IS NULL;",
         removeTaskFromMilestoneMapping:"UPDATE gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING  SET EFFECTIVE_END_DATE = now() WHERE TASK_ID = ?",
         updateStatusOfTask:"UPDATE gnieprojectmanagement.GPM_TASKS  SET TASK_STATUS_TYPE_CODE = 'OBSOLETE' WHERE ID = ?",

    deleteFromMilestone:"DELETE  FROM gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING WHERE ISSUE_ID=? AND MILESTONE_ID=? AND  TENANT_ID=?;",
    addFunctionalRoles:"INSERT INTO gnieplatform.GPF_FUNCTIONAL_ROLE (TENANT_ID,ROLE_NAME,DESCRIPTION,EFFECTIVE_START_DATE,CREATED_BY,UPDATED_BY) values(?,?,?,now(),?,?);",
    checkRoleExists:"SELECT * FROM gnieplatform.GPF_FUNCTIONAL_ROLE where UPPER(ROLE_NAME) = ? AND TENANT_ID = ?;",
    getFunctionalRoles:"SELECT ID,TENANT_ID,ROLE_NAME,DESCRIPTION FROM gnieplatform.GPF_FUNCTIONAL_ROLE where TENANT_ID = ? AND EFFECTIVE_END_DATE IS NULL;",


projectCountByStatus:"SELECT L.DISPLAY_VALUE AS STATUS ,COUNT(GP.PROJECT_STATUS_TYPE_CODE) TOTAL_COUNT FROM gnieprojectmanagement.GPM_PROJECTS GP, "+
    "gnieprojectmanagement.GPM_PROJECT_TEAM GPT,"+
    "gnieplatform.GPF_LOOKUP L  WHERE  L.LOOKUP_TYPE='PROJECT_STATUS' AND L.TENANT_ID=? AND "+
    "L.LOOKUP_CODE=GP.PROJECT_STATUS_TYPE_CODE AND "+
    "GPT.USER_ID=? AND GPT.PROJECT_ID=GP.ID AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND "+
    "GPT.EFFECTIVE_END_DATE IS NULL  AND L.TENANT_ID=GP.TENANT_ID  GROUP BY L.DISPLAY_VALUE;",
specificProjectByStatus:"SELECT L.DISPLAY_VALUE AS STATUS, COUNT(GP.PROJECT_STATUS_TYPE_CODE) TOTAL_COUNT FROM gnieprojectmanagement.GPM_PROJECTS GP,"+
  "gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L WHERE L.LOOKUP_TYPE = 'PROJECT_STATUS' AND L.TENANT_ID =? AND L.LOOKUP_CODE = GP.PROJECT_STATUS_TYPE_CODE "+
  "AND GPT.USER_ID = ? AND GPT.PROJECT_ID = GP.ID AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED', 'COM') AND GPT.EFFECTIVE_END_DATE IS NULL AND L.TENANT_ID = GP.TENANT_ID"+
" AND GP.ID IN (?) GROUP BY L.DISPLAY_VALUE;",

updateAttachment:"UPDATE gnieplatform.GPF_ATTACHMENTS SET ACTION_ID=? , ACTION_CODE=? , CREATED_BY=? , "+
    "UPDATED_BY=?  WHERE ACTION_ID IN (?) AND TENANT_ID=?;",
allIssueCountByAssignee:"SELECT GIT.ASSIGNED_TO,GU.FULL_NAME,COUNT(GIT.ASSIGNED_TO) ISSUE_COUNT FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+
"gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_USER GU WHERE GIT.PROJECT_ID = GP.ID "+
"AND GPT.PROJECT_ID = GP.ID AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED', 'COM') AND GPT.USER_ID =? "+
"AND GPT.EFFECTIVE_END_DATE IS NULL AND GU.TENANT_ID =? AND GIT.ASSIGNED_TO = GU.ID AND GIT.STATUS IN('NS', 'OPEN', 'IP', 'REOPEN', 'NR','DUPLICATE','NI','AD') "+
"GROUP BY GIT.ASSIGNED_TO;",
    allIssueCountByStatus:"SELECT l.DISPLAY_VALUE,COUNT(git.STATUS) TOTAL FROM gnieprojectmanagement.GPM_ISSUE_TRACKER git,"+
    "gnieprojectmanagement.GPM_PROJECTS gp,gnieprojectmanagement.GPM_PROJECT_TEAM gpt, gnieplatform.GPF_LOOKUP l "+
    "where l.LOOKUP_CODE=git.STATUS AND l.TENANT_ID=git.TENANT_ID AND l.LOOKUP_TYPE='ISSUE_STATUS' AND "+
    "git.ASSIGNED_TO = gpt.USER_ID AND git.PROJECT_ID = gpt.PROJECT_ID AND gpt.PROJECT_ID = gp.ID AND gp.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND  "+
    "gpt.USER_ID = ? AND l.TENANT_ID=?  AND gpt.EFFECTIVE_END_DATE is null "+
    "GROUP BY git.STATUS,l.DISPLAY_VALUE ;",

issueCountByStatus:"SELECT l.DISPLAY_VALUE,COUNT(git.STATUS) TOTAL FROM gnieprojectmanagement.GPM_ISSUE_TRACKER git,"+
"gnieprojectmanagement.GPM_PROJECTS gp,gnieprojectmanagement.GPM_PROJECT_TEAM gpt, gnieplatform.GPF_LOOKUP l where l.LOOKUP_CODE=git.STATUS AND l.TENANT_ID=git.TENANT_ID AND l.LOOKUP_TYPE='ISSUE_STATUS' AND "+
"git.ASSIGNED_TO = gpt.USER_ID AND git.PROJECT_ID = gpt.PROJECT_ID AND gpt.PROJECT_ID = gp.ID AND  gp.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM')  AND gpt.USER_ID = ? AND l.TENANT_ID=? AND gp.ID IN (?) AND gpt.EFFECTIVE_END_DATE is null "+
 "GROUP BY git.STATUS,l.DISPLAY_VALUE ;",


    checkroleIsMpped:"SELECT * FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE FUNCTIONAL_ROLE_ID = (SELECT ID FROM gnieplatform.GPF_FUNCTIONAL_ROLE WHERE ID = ?);",
    deletFunctionalRole:"UPDATE gnieplatform.GPF_FUNCTIONAL_ROLE SET EFFECTIVE_END_DATE = now() WHERE ID = ? AND TENANT_ID =?",
    editFunctionalRoles:"UPDATE gnieplatform.GPF_FUNCTIONAL_ROLE SET ROLE_NAME = ?,DESCRIPTION=?,CREATED_BY=?,LAST_UPDATED_DATE=now(),UPDATED_BY=? WHERE ID = ? AND TENANT_ID = ? ",
    checkRoleExistsForEdit:"SELECT * FROM gnieplatform.GPF_FUNCTIONAL_ROLE where ID = ? AND TENANT_ID = ?;",


    updateComment:"UPDATE gnieplatform.GPF_COMMENTS SET ACTION_ID=? , ACTION_CODE=? , CREATED_BY=? , "+
        "UPDATED_BY=?  WHERE ACTION_ID IN (?) AND TENANT_ID=?;",
    allTaskCountByAssignee:"SELECT T.ASSIGNED_TO,GU.FULL_NAME, COUNT(T.ASSIGNED_TO) TASK_COUNT FROM gnieprojectmanagement.GPM_TASKS T,"+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, "+
        "gnieplatform.GPF_USER GU WHERE "+
        "T.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID "+
        "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND T.ASSIGNED_TO=GU.ID AND T.TASK_STATUS_TYPE_CODE NOT IN('CLOSED','OBSOLETE')  AND T.TYPE='MAIN' AND "+
        "GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') "+
        "GROUP BY T.ASSIGNED_TO,GU.FULL_NAME;",
    taskCountByAssignee:"SELECT T.ASSIGNED_TO, GU.FULL_NAME,  COUNT(T.ASSIGNED_TO) TASK_COUNT FROM  gnieprojectmanagement.GPM_TASKS T,"+
    "gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_USER GU WHERE T.PROJECT_ID = GP.ID "+ 
    "AND GPT.PROJECT_ID = GP.ID AND GPT.USER_ID = ? AND GPT.EFFECTIVE_END_DATE IS NULL AND GU.TENANT_ID = ? AND T.ASSIGNED_TO = GU.ID "+
    "AND T.TASK_STATUS_TYPE_CODE NOT IN ('CLOSED', 'OBSOLETE') AND T.TYPE = 'MAIN' AND GP.PROJECT_STATUS_TYPE_CODE NOT IN ('CLOSED', 'COM') AND GPT.ROLE_TYPE_CODE = 'OWNER' " +
    "AND T.PROJECT_ID IN (?) GROUP BY T.ASSIGNED_TO, GU.FULL_NAME;",
    allTaskCountByStatusForPM:"SELECT L.DISPLAY_VALUE,COUNT(T.TASK_STATUS_TYPE_CODE) TOTAL FROM gnieprojectmanagement.GPM_TASKS T, "+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L "+
        "WHERE L.LOOKUP_CODE=T.TASK_STATUS_TYPE_CODE AND L.TENANT_ID=T.TENANT_ID AND L.LOOKUP_TYPE='PROJECT_STATUS'  AND T.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID AND "+
        "GPT.ROLE_TYPE_CODE='OWNER' AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND "+
        "GPT.USER_ID = ? AND L.TENANT_ID=? AND GPT.EFFECTIVE_END_DATE IS NULL AND T.TYPE='MAIN'  AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND T.TASK_STATUS_TYPE_CODE NOT IN('CLOSED') AND T.TASK_STATUS_TYPE_CODE NOT IN('OBSOLETE') "+
        "GROUP BY T.TASK_STATUS_TYPE_CODE,L.DISPLAY_VALUE;",
    allTaskCountByStatusForEmp:"SELECT L.DISPLAY_VALUE,COUNT(T.TASK_STATUS_TYPE_CODE) TOTAL FROM gnieprojectmanagement.GPM_TASKS T, "+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L "+
        "WHERE L.LOOKUP_CODE=T.TASK_STATUS_TYPE_CODE AND L.TENANT_ID=T.TENANT_ID AND L.LOOKUP_TYPE='PROJECT_STATUS' AND T.ASSIGNED_TO = GPT.USER_ID AND T.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID AND "+
        "GPT.USER_ID = ? AND L.TENANT_ID=? AND GPT.EFFECTIVE_END_DATE IS NULL AND T.TYPE='MAIN' AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND T.TASK_STATUS_TYPE_CODE NOT IN('CLOSED') AND T.TASK_STATUS_TYPE_CODE NOT IN('OSOLETE')  "+
        "GROUP BY T.TASK_STATUS_TYPE_CODE,L.DISPLAY_VALUE;",
    taskCountByStatusForPM:"SELECT L.DISPLAY_VALUE,COUNT(T.TASK_STATUS_TYPE_CODE) TOTAL FROM gnieprojectmanagement.GPM_TASKS T, "+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L "+
        "WHERE L.LOOKUP_CODE=T.TASK_STATUS_TYPE_CODE AND L.TENANT_ID=T.TENANT_ID AND L.LOOKUP_TYPE='PROJECT_STATUS'  AND T.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID AND "+
        " GPT.ROLE_TYPE_CODE='OWNER' AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND "+
        "GPT.USER_ID = ? AND L.TENANT_ID=? AND GP.ID IN (?) AND GPT.EFFECTIVE_END_DATE IS NULL AND T.TYPE='MAIN' AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND T.TASK_STATUS_TYPE_CODE NOT IN('CLOSED') AND T.TASK_STATUS_TYPE_CODE NOT IN('OBSOLETE')  "+
        "GROUP BY T.TASK_STATUS_TYPE_CODE,L.DISPLAY_VALUE;",
    taskCountByStatusForEmp:"SELECT L.DISPLAY_VALUE,COUNT(T.TASK_STATUS_TYPE_CODE) TOTAL FROM gnieprojectmanagement.GPM_TASKS T, "+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L "+
        "WHERE L.LOOKUP_CODE=T.TASK_STATUS_TYPE_CODE AND L.TENANT_ID=T.TENANT_ID AND L.LOOKUP_TYPE='PROJECT_STATUS' AND  T.ASSIGNED_TO = GPT.USER_ID AND T.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID AND "+
        "GPT.USER_ID = ? AND L.TENANT_ID=?  AND  GP.ID IN(?) AND GPT.EFFECTIVE_END_DATE IS NULL AND T.TYPE='MAIN'  AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') "+
        "GROUP BY T.TASK_STATUS_TYPE_CODE,L.DISPLAY_VALUE;",
    issueCountByAssignee:"SELECT GIT.ASSIGNED_TO,GU.FULL_NAME, COUNT(GIT.ASSIGNED_TO) ISSUE_COUNT FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, "+
        "gnieplatform.GPF_USER GU WHERE "+
        "GIT.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID  AND GPT.ROLE_TYPE_CODE='OWNER' AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM')"+
        "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND GU.TENANT_ID=? AND GIT.PROJECT_ID IN (?) AND GIT.ASSIGNED_TO=GU.ID AND GIT.STATUS IN('NS', 'OPEN', 'IP', 'REOPEN', 'NR','DUPLICATE','NI','AD') "+
        "GROUP BY GIT.ASSIGNED_TO,GU.FULL_NAME;",
		
    
        getTaskDetails:"SELECT * FROM gnieprojectmanagement.GPM_TASKS WHERE ID = ?; ",
        updateAutomatedProjectDetail:"update gnieprojectmanagement.GPM_TASKS set ORDER_OF_EXECUTION = (ORDER_OF_EXECUTION-1) WHERE PROJECT_ID = ? AND ORDER_OF_EXECUTION > ?;",

    allTaskCountByPriorityForPM:"SELECT L.DISPLAY_VALUE,COUNT(T.PRIORITY_TYPE_CODE) TOTAL FROM gnieprojectmanagement.GPM_TASKS T, "+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L "+
        "WHERE L.LOOKUP_CODE=T.PRIORITY_TYPE_CODE AND L.TENANT_ID=T.TENANT_ID AND L.LOOKUP_TYPE='TASK_PRIORITY' "+
        "AND T.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID AND GPT.ROLE_TYPE_CODE='OWNER' AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM')"+
        " AND GPT.USER_ID = ? AND L.TENANT_ID=?  AND GPT.EFFECTIVE_END_DATE IS NULL AND T.TYPE='MAIN' "+
        "GROUP BY T.PRIORITY_TYPE_CODE,L.DISPLAY_VALUE",
    taskCountByPriorityForPM:"SELECT L.DISPLAY_VALUE,COUNT(T.PRIORITY_TYPE_CODE) TOTAL FROM gnieprojectmanagement.GPM_TASKS T, gnieprojectmanagement.GPM_PROJECTS GP,"+
    "gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L  WHERE L.LOOKUP_CODE = T.PRIORITY_TYPE_CODE AND L.TENANT_ID = T.TENANT_ID AND L.LOOKUP_TYPE = 'TASK_PRIORITY' "+
    "AND T.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID  AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED') AND GPT.ROLE_TYPE_CODE = 'OWNER' AND GPT.USER_ID = ? AND L.TENANT_ID = ? "+
    "AND GP.ID IN (?) AND GPT.EFFECTIVE_END_DATE IS NULL AND T.TYPE = 'MAIN' GROUP BY T.PRIORITY_TYPE_CODE, L.DISPLAY_VALUE;",
    allTaskCountByPriorityForEmp:"SELECT L.DISPLAY_VALUE,COUNT(T.PRIORITY_TYPE_CODE) TOTAL FROM gnieprojectmanagement.GPM_TASKS T, "+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L "+
        "WHERE L.LOOKUP_CODE=T.PRIORITY_TYPE_CODE AND L.TENANT_ID=T.TENANT_ID AND L.LOOKUP_TYPE='TASK_PRIORITY' "+
        "AND T.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID AND  T.ASSIGNED_TO=GPT.USER_ID AND  "+
        "GPT.USER_ID = ? AND L.TENANT_ID=?  AND GPT.EFFECTIVE_END_DATE IS NULL AND T.TYPE='MAIN' "+
        "GROUP BY T.PRIORITY_TYPE_CODE,L.DISPLAY_VALUE",
    taskCountByPriorityForEmp:"SELECT L.DISPLAY_VALUE,COUNT(T.PRIORITY_TYPE_CODE) TOTAL FROM gnieprojectmanagement.GPM_TASKS T, "+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L "+
        "WHERE L.LOOKUP_CODE=T.PRIORITY_TYPE_CODE AND L.TENANT_ID=T.TENANT_ID AND L.LOOKUP_TYPE='TASK_PRIORITY' "+
        "AND T.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID AND  T.ASSIGNED_TO=GPT.USER_ID AND  "+
        "GPT.USER_ID = ? AND L.TENANT_ID=? AND GP.ID IN(?) AND GPT.EFFECTIVE_END_DATE IS NULL AND T.TYPE='MAIN' "+
        "GROUP BY T.PRIORITY_TYPE_CODE,L.DISPLAY_VALUE",
    issueCountByProjectForPM:"SELECT  COUNT(GIT.ID) ISSUE_COUNT,GP.PROJECT_NAME,GP.ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE "+
        "GIT.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID AND GPT.ROLE_TYPE_CODE='OWNER'"+
        "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND GIT.TENANT_ID=? "+
        "AND GIT.STATUS IN('NS', 'OPEN', 'IP', 'REOPEN', 'NR','DUPLICATE','NI','AD') AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED')"+
        "GROUP BY GP.ID,GP.PROJECT_NAME;",
    specificIssueCountByProjectForPM:"SELECT  COUNT(GIT.ID) ISSUE_COUNT,GP.PROJECT_NAME,GP.ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+
    "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GIT.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID AND GPT.ROLE_TYPE_CODE='OWNER' "+
    "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND GIT.TENANT_ID=? AND GIT.STATUS IN('NS', 'OPEN', 'IP', 'REOPEN', 'NR','DUPLICATE','NI','AD') AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED')"+
    " AND GP.ID IN (?) GROUP BY GP.ID,GP.PROJECT_NAME;",
    issueCountByProjectForEmp:"SELECT  COUNT(GIT.ID) ISSUE_COUNT,GP.PROJECT_NAME,GP.ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE "+
        "GIT.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID "+
        "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND GIT.TENANT_ID=? "+
        "AND GIT.STATUS IN ('NS', 'OPEN', 'IP', 'REOPEN', 'NR','DUPLICATE','NI','AD')  AND GIT.ASSIGNED_TO=GPT.USER_ID "+
        "GROUP BY GP.ID,GP.PROJECT_NAME;",
    specificIssueCountByProjectForEmp:"SELECT  COUNT(GIT.ID) ISSUE_COUNT,GP.PROJECT_NAME,GP.ID FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+
    "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GIT.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID "+
    "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND GIT.TENANT_ID=? AND GIT.STATUS IN ('NS', 'OPEN', 'IP', 'REOPEN', 'NR','DUPLICATE','NI','AD')  AND GIT.ASSIGNED_TO=GPT.USER_ID "+
    "AND GP.ID IN (?) GROUP BY GP.ID,GP.PROJECT_NAME;",
    taskCountByProjectForPM:"SELECT  COUNT(T.ID) TASK_COUNT,GP.PROJECT_NAME,GP.ID FROM gnieprojectmanagement.GPM_TASKS T, "+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE "+
        "T.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID AND T.TYPE='MAIN' "+
        "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND T.TENANT_ID=?  AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED') "+
        "AND T.TASK_STATUS_TYPE_CODE  IN ('NS','OPEN','IP','HOLD','COM') AND GPT.ROLE_TYPE_CODE='OWNER' "+
        "GROUP BY GP.ID,GP.PROJECT_NAME;",
    specificTaskCountByProjectForPM:"SELECT  COUNT(T.ID) TASK_COUNT,GP.PROJECT_NAME,GP.ID FROM gnieprojectmanagement.GPM_TASKS T, "+
    "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE "+
    "T.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID AND T.TYPE='MAIN' "+
    "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND T.TENANT_ID=? AND GP.ID IN (?) AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED') "+
    "AND T.TASK_STATUS_TYPE_CODE  IN ('NS','OPEN','IP','HOLD','COM') AND GPT.ROLE_TYPE_CODE='OWNER' "+
    "GROUP BY GP.ID,GP.PROJECT_NAME;",
    taskCountByProjectForEmp:"SELECT  COUNT(T.ID) TASK_COUNT,GP.PROJECT_NAME,GP.ID FROM gnieprojectmanagement.GPM_TASKS T, "+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE "+
        "T.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID AND T.TYPE='MAIN' "+
        "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND T.TENANT_ID=? AND T.ASSIGNED_TO=GPT.USER_ID "+
        "AND T.TASK_STATUS_TYPE_CODE  IN('NS','OPEN','IP','HOLD','COM') "+
        "GROUP BY GP.ID,GP.PROJECT_NAME;",
    specificTaskCountByProjectForEmp:"SELECT  COUNT(T.ID) TASK_COUNT,GP.PROJECT_NAME,GP.ID FROM gnieprojectmanagement.GPM_TASKS T,"+ 
   "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE T.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID AND T.TYPE='MAIN' "+
    "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND T.TENANT_ID=? AND GP.ID IN (?)  AND T.ASSIGNED_TO=GPT.USER_ID "+
    "AND T.TASK_STATUS_TYPE_CODE  IN('NS','OPEN','IP','HOLD','COM') GROUP BY GP.ID,GP.PROJECT_NAME;",
    allIssueCountByAssignedBy:"SELECT GIT.ASSIGNED_BY, GU.FULL_NAME, COUNT(GIT.ASSIGNED_BY) ISSUE_COUNT FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+ 
    "gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_USER GU WHERE GIT.PROJECT_ID = GP.ID "+
    "AND GPT.PROJECT_ID = GP.ID AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED', 'COM') AND GPT.USER_ID =? AND GPT.EFFECTIVE_END_DATE IS NULL "+ 
    "AND  GU.TENANT_ID =? AND GIT.ASSIGNED_BY = GU.ID AND GIT.STATUS IN('NS', 'OPEN', 'IP', 'REOPEN', 'NR','DUPLICATE','NI','AD') GROUP BY "+
    "GIT.ASSIGNED_BY, GU.FULL_NAME;",
    issueCountByAssignedBy:"SELECT GIT.ASSIGNED_BY,GU.FULL_NAME, COUNT(GIT.ASSIGNED_BY) ISSUE_COUNT FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+
    "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_USER GU WHERE  GPT.ROLE_TYPE_CODE='OWNER' AND "+
    "GIT.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID  AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') "+
    "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL AND GU.TENANT_ID=? AND GP.ID IN(?) AND GIT.ASSIGNED_BY=GU.ID AND GIT.STATUS IN('NS','OPEN','IP','REOPEN','NR')"+ 
    " GROUP BY GIT.ASSIGNED_BY,GU.FULL_NAME;",
    allIssueCountByPriority:"SELECT L.DISPLAY_VALUE,COUNT(GIT.PRIORITY) TOTAL FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L "+
        "where L.LOOKUP_CODE=GIT.PRIORITY AND L.TENANT_ID=GIT.TENANT_ID AND L.LOOKUP_TYPE='TASK_PRIORITY' AND GIT.STATUS IN ('NS','OPEN','IP','REOPEN','NR') "+
        "AND GIT.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID AND  GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND "+
        "GPT.USER_ID = ? AND L.TENANT_ID=? AND GPT.EFFECTIVE_END_DATE IS NULL AND GPT.ROLE_TYPE_CODE='OWNER' "+ 
        "GROUP BY GIT.PRIORITY,L.DISPLAY_VALUE ;",
    issueCountByPriority:"SELECT L.DISPLAY_VALUE,COUNT(GIT.PRIORITY) TOTAL FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT, gnieplatform.GPF_LOOKUP L "+
        "where L.LOOKUP_CODE=GIT.PRIORITY AND L.TENANT_ID=GIT.TENANT_ID AND L.LOOKUP_TYPE='TASK_PRIORITY' AND GIT.STATUS IN('NS','OPEN','IP','REOPEN','NR') "+
        "AND GIT.PROJECT_ID = GPT.PROJECT_ID AND GPT.PROJECT_ID = GP.ID AND GP.PROJECT_STATUS_TYPE_CODE NOT IN ('CLOSED','COM') AND GPT.ROLE_TYPE_CODE='OWNER' AND "+
        "GPT.USER_ID = ? AND L.TENANT_ID=?  AND GP.ID IN(?) AND GPT.EFFECTIVE_END_DATE IS NULL "+ 
        "GROUP BY GIT.PRIORITY,L.DISPLAY_VALUE ;",
    addBudget:"INSERT INTO gnieprojectmanagement.GPM_BUDGET (TENANT_ID,CLASS_TYPE,CLASS_ID,CURRENCY_CODE,TYPE,BUDGET_AMOUNT_MAX,BUDGET_AMOUNT_MIN,CREATED_BY,LAST_UPDATED_DATE,UPDATED_BY) "+
        "VALUES(?,?,?,?,?,?,?,?,now(),?)",
    allIssueCountByCreatedBy:"SELECT GIT.CREATED_BY,GU.FULL_NAME, COUNT(GIT.CREATED_BY) ISSUE_COUNT FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT, gnieprojectmanagement.GPM_PROJECTS GP, "+
    "gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_USER GU WHERE GIT.PROJECT_ID = GP.ID AND GPT.PROJECT_ID = GP.ID AND GPT.USER_ID = ? AND GPT.EFFECTIVE_END_DATE IS NULL "+ 
    "AND GU.ID=GIT.CREATED_BY AND GIT.CREATED_BY = GU.ID AND GU.TENANT_ID=? AND GIT.STATUS IN ('NS', 'OPEN', 'IP', 'REOPEN', 'NR','DUPLICATE','NI','AD') AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED', 'COM') "+
    "GROUP BY  GIT.CREATED_BY, GU.FULL_NAME;",
    issueCountByCreatedBy:"SELECT GIT.CREATED_BY,GU.FULL_NAME, COUNT(GIT.CREATED_BY) ISSUE_COUNT FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT,"+ 
    "gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT,  gnieplatform.GPF_USER GU WHERE GIT.PROJECT_ID = GP.ID AND GPT.PROJECT_ID=GP.ID "+
    "AND GPT.USER_ID=? AND  GPT.EFFECTIVE_END_DATE IS NULL  AND GU.TENANT_ID=? AND GIT.CREATED_BY=GU.ID AND GIT.STATUS IN "+
    "('NS', 'OPEN', 'IP', 'REOPEN', 'NR','DUPLICATE','NI','AD') AND GP.ID IN(?) AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM')"+
    "GROUP BY GIT.CREATED_BY,GU.FULL_NAME;",
    getAllCurrency: "SELECT * FROM gnieplatform.GPF_CURRENCY",
    fetchSubTaskBudget:"SELECT * FROM gnieprojectmanagement.GPM_TASKS GT ,gnieprojectmanagement.GPM_BUDGET GB WHERE MAIN_TASK_ID = ? AND "+
        "GT.ID = GB.CLASS_ID AND TASK_STATUS_TYPE_CODE NOT IN ('OBSOLETE','CLOSED');",
    fetchMainTask:"SELECT * FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID = ? AND CLASS_TYPE = ? AND TENANT_ID = ?;",

    updateMainTaskBudget:"UPDATE gnieprojectmanagement.GPM_BUDGET SET BUDGET_AMOUNT_MIN = ?,BUDGET_AMOUNT_MAX = ?,LAST_UPDATED_DATE = now(),UPDATED_BY=? WHERE CLASS_ID = ? AND CLASS_TYPE = ? AND TENANT_ID = ?",
    updateBudgetOfGroup:"UPDATE gnieprojectmanagement.GPM_BUDGET SET BUDGET_AMOUNT_MAX = case when ? is null then BUDGET_AMOUNT_MIN when BUDGET_AMOUNT_MAX > ? and BUDGET_AMOUNT_MIN >= ? then BUDGET_AMOUNT_MIN "
        +"when BUDGET_AMOUNT_MAX > ? and BUDGET_AMOUNT_MIN < ? then ? when BUDGET_AMOUNT_MAX < ? then ? else BUDGET_AMOUNT_MAX end, LAST_UPDATED_DATE = now(),UPDATED_BY=? WHERE CLASS_TYPE = 'GROUP' AND CLASS_ID = ?",
    updateBudgetOfProject : "UPDATE gnieprojectmanagement.GPM_BUDGET SET BUDGET_AMOUNT_MAX = case when BUDGET_AMOUNT_MAX < (SELECT total_budget FROM (SELECT SUM(GB.BUDGET_AMOUNT_MAX) AS total_budget "
        + "FROM gnieprojectmanagement.GPM_GROUPS GG INNER JOIN gnieprojectmanagement.GPM_BUDGET GB ON GG.ID = GB.CLASS_ID WHERE GG.PROJECT_ID = ? AND GG.TENANT_ID= ? AND GB.CLASS_TYPE = 'GROUP' ) AS subquery ) "
        + "then (SELECT total_budget FROM (SELECT SUM(GB.BUDGET_AMOUNT_MAX) AS total_budget FROM gnieprojectmanagement.GPM_GROUPS GG INNER JOIN gnieprojectmanagement.GPM_BUDGET GB ON GG.ID = GB.CLASS_ID WHERE GG.PROJECT_ID = ? AND GG.TENANT_ID= ? AND GB.CLASS_TYPE = 'GROUP' ) AS subquery ) else BUDGET_AMOUNT_MAX end, "
        + "BUDGET_AMOUNT_MIN = case when BUDGET_AMOUNT_MIN = 0 "
        + "then (SELECT total_budget FROM (SELECT SUM(GB.BUDGET_AMOUNT_MIN) AS total_budget FROM gnieprojectmanagement.GPM_GROUPS GG INNER JOIN gnieprojectmanagement.GPM_BUDGET GB ON GG.ID = GB.CLASS_ID WHERE GG.PROJECT_ID = ? AND GG.TENANT_ID= ? AND GB.CLASS_TYPE = 'GROUP' ) AS subquery ) else BUDGET_AMOUNT_MIN end, "
        + "LAST_UPDATED_DATE = now(),UPDATED_BY=? WHERE CLASS_TYPE = 'PROJECT' AND CLASS_ID = ?",

    editBudget: "UPDATE gnieprojectmanagement.GPM_BUDGET SET CURRENCY_CODE = ?,TYPE = ?,BUDGET_AMOUNT_MAX = ?,BUDGET_AMOUNT_MIN=?,LAST_UPDATED_DATE = now(),UPDATED_BY = ? where TENANT_ID = ? AND CLASS_TYPE = ? AND CLASS_ID = ? ",

    checkBudgetExists: "SELECT * from gnieprojectmanagement.GPM_BUDGET where TENANT_ID = ? AND CLASS_TYPE = ? AND CLASS_ID = ? ",
    getIssuesBasedOnSeverity: "SELECT git.SEVERITY,COUNT(git.SEVERITY) TOTAL FROM gnieprojectmanagement.GPM_ISSUE_TRACKER git," +
        "gnieprojectmanagement.GPM_PROJECTS gp,gnieprojectmanagement.GPM_PROJECT_TEAM gpt where " +
        "git.ASSIGNED_TO = gpt.USER_ID and git.PROJECT_ID = gpt.PROJECT_ID AND gpt.PROJECT_ID = gp.ID and gpt.USER_ID = ? " +
        "GROUP BY SEVERITY;",
    getIssuesBasedOnSeverityByProject: "SELECT git.SEVERITY,COUNT(git.SEVERITY) TOTAL FROM gnieprojectmanagement.GPM_ISSUE_TRACKER git," +
        "gnieprojectmanagement.GPM_PROJECTS gp,gnieprojectmanagement.GPM_PROJECT_TEAM gpt where " +
        "git.ASSIGNED_TO = gpt.USER_ID and git.PROJECT_ID = gpt.PROJECT_ID AND gpt.PROJECT_ID = gp.ID and gpt.USER_ID = ? " +
        "AND gp.ID IN (?) GROUP BY SEVERITY;",
    taskProgressAllProject: "SELECT GT.ID AS TASK_ID,GT.TASK_NAME, GT.ACTUAL_EFFORT,GT.ESTIMATED_EFFORT,GT.TASK_STATUS_TYPE_CODE,GT.ACTUAL_START_DATE, " +
        "GT.ESTIMATED_COMPLETION_DATE,GP.ID, GP.PROJECT_NAME FROM "+
        "gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
        "WHERE GT.PROJECT_ID=GP.ID  AND GT.TENANT_ID=GP.TENANT_ID AND GPT.USER_ID=? AND GT.TENANT_ID=? "+
        "AND GP.ID=GPT.PROJECT_ID "+
        "AND GPT.EFFECTIVE_END_DATE IS NULL AND GP.PROJECT_STATUS_TYPE_CODE NOT IN ('CLOSED','COM')  AND GPT.ROLE_TYPE_CODE='OWNER' "+
        "AND GT.TASK_STATUS_TYPE_CODE NOT IN ('COM','CLOSED','OBSOLETE') GROUP BY "+
        "GT.ID,GT.TASK_NAME,GP.ID, GP.PROJECT_NAME,GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.TASK_STATUS_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE ;",
    taskProgress:"SELECT GT.ID AS TASK_ID,GT.TASK_NAME, GT.ACTUAL_EFFORT,GT.ESTIMATED_EFFORT,GT.TASK_STATUS_TYPE_CODE,GT.ACTUAL_START_DATE, "+
        "GT.ESTIMATED_COMPLETION_DATE,GP.ID, GP.PROJECT_NAME FROM "+
        "gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
        "WHERE GT.PROJECT_ID=GP.ID  AND GT.TENANT_ID=GP.TENANT_ID AND GPT.USER_ID=? AND GT.TENANT_ID=? AND GP.ID IN (?) "+
        "AND GP.ID=GPT.PROJECT_ID AND GT.ASSIGNED_TO=GPT.USER_ID  "+
        "AND GPT.EFFECTIVE_END_DATE IS NULL AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM')  AND GPT.ROLE_TYPE_CODE='OWNER' "+
        "AND GT.TASK_STATUS_TYPE_CODE NOT IN ('COM','CLOSED','OBSOLETE') GROUP BY "+
        "GT.ID,GT.TASK_NAME,GP.ID, GP.PROJECT_NAME,GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.TASK_STATUS_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE ;",
    projectProgressForPM:"SELECT  SUM(GT.ACTUAL_EFFORT) AS ACTUAL_EFFORT,GP.PROJECT_NAME,GP.ID,GP.ACTUAL_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_STATUS_TYPE_CODE "+
        "FROM gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECT_TEAM GPT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP WHERE GP.ID=GT.PROJECT_ID AND GP.ID=GPT.PROJECT_ID AND GPT.USER_ID=? AND "+
        "GPT.TENANT_ID=? AND GP.TENANT_ID=GPT.TENANT_ID AND "+
        "GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM','NS') AND GPT.ROLE_TYPE_CODE ='OWNER' "+
        "GROUP BY GP.PROJECT_NAME,GP.ID,GP.ACTUAL_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_STATUS_TYPE_CODE ;",
    specificProjectProgressForPM:"SELECT  SUM(GT.ACTUAL_EFFORT) AS ACTUAL_EFFORT,GP.PROJECT_NAME,GP.ID,GP.ACTUAL_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_STATUS_TYPE_CODE "+
        "FROM gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECT_TEAM GPT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP WHERE GP.ID=GT.PROJECT_ID AND GP.ID=GPT.PROJECT_ID AND GPT.USER_ID=? AND "+
        "GPT.TENANT_ID=? AND GP.TENANT_ID=GPT.TENANT_ID AND GP.ID IN (?) AND " +
        "GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM','NS') AND GPT.ROLE_TYPE_CODE ='OWNER' "+
        "GROUP BY GP.PROJECT_NAME,GP.ID,GP.ACTUAL_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_STATUS_TYPE_CODE ;",
    addCurrencyData:"INSERT INTO gnieplatform.GPF_CURRENCY (CODE,NAME,SYMBOL) VALUES ?",

    getBalanceAmtOfProject:"SELECT GB.BUDGET_AMOUNT_MAX, (GB.BUDGET_AMOUNT_MAX - (SELECT case when count(GB.BUDGET_AMOUNT_MAX) = 0 then 0 else SUM(GB.BUDGET_AMOUNT_MAX) end FROM gnieprojectmanagement.GPM_GROUPS GG INNER JOIN gnieprojectmanagement.GPM_BUDGET GB "
        +"ON GG.ID = GB.CLASS_ID WHERE GG.PROJECT_ID = ? AND GG.TENANT_ID= ? AND GB.CLASS_TYPE = 'GROUP')) as BALANCE_AMT, "
        +"GC.SYMBOL FROM gnieprojectmanagement.GPM_BUDGET GB, gnieplatform.GPF_CURRENCY GC WHERE GB.CURRENCY_CODE = GC.CODE AND GB.CLASS_ID = ? AND GB.TENANT_ID= ? AND GB.CLASS_TYPE = 'PROJECT'",

    updateExistBudget:"UPDATE gnieprojectmanagement.GPM_BUDGET SET CURRENCY_CODE = case when CURRENCY_CODE is null then null else CURRENCY_CODE end,TYPE = case when TYPE is null then null else TYPE end, "
        +"BUDGET_AMOUNT_MAX = case when BUDGET_AMOUNT_MAX < ? then ? else BUDGET_AMOUNT_MAX end,BUDGET_AMOUNT_MIN = BUDGET_AMOUNT_MIN , "
        +"LAST_UPDATED_DATE = now(),UPDATED_BY = ? where TENANT_ID = ? AND CLASS_TYPE = ? AND CLASS_ID = ? ",

    checkGroupAmt: "select BUDGET_AMOUNT_MAX, (SELECT SUM(GB.BUDGET_AMOUNT_MAX) AS total_budget FROM gnieprojectmanagement.GPM_TASKS GT INNER JOIN gnieprojectmanagement.GPM_BUDGET GB "
        +"ON GT.ID = GB.CLASS_ID WHERE GT.GROUP_ID = ? AND GT.TENANT_ID= ? AND GB.CLASS_TYPE = 'TASK' AND GT.TASK_STATUS_TYPE_CODE NOT IN ('OBSOLETE','CLOSED')) TOTAL_AMT "
        +"from gnieprojectmanagement.GPM_BUDGET where CLASS_ID = ? AND TENANT_ID= ? AND CLASS_TYPE = 'GROUP' ",
    
    checkMainTaskAmt:"select BUDGET_AMOUNT_MAX, (SELECT SUM(GB.BUDGET_AMOUNT_MAX) AS total_budget FROM gnieprojectmanagement.GPM_TASKS GT INNER JOIN gnieprojectmanagement.GPM_BUDGET GB "
        +"ON GT.ID = GB.CLASS_ID WHERE GT.MAIN_TASK_ID in (?) AND GT.TENANT_ID= ? AND GB.CLASS_TYPE = 'SUBTASK' AND GT.TASK_STATUS_TYPE_CODE NOT IN ('OBSOLETE','CLOSED')) TOTAL_AMT "
        +"from gnieprojectmanagement.GPM_BUDGET where CLASS_ID = ? AND TENANT_ID= ? AND CLASS_TYPE = 'TASK'",

    getSumOfMainTask:"SELECT SUM(GB.BUDGET_AMOUNT_MAX) AS total_budget FROM gnieprojectmanagement.GPM_TASKS GT INNER JOIN gnieprojectmanagement.GPM_BUDGET GB ON GT.ID = GB.CLASS_ID WHERE GT.GROUP_ID = ? AND GT.TENANT_ID= ? AND GB.CLASS_TYPE = 'TASK' AND GT.TASK_STATUS_TYPE_CODE NOT IN ('OBSOLETE','CLOSED')",

    fetchDashboardProjectsForPM:"SELECT GP.ID,GP.PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_PROJECT_TEAM GPT  WHERE GP.ID=GPT.PROJECT_ID AND "+
        "GPT.USER_ID=? AND GPT.EFFECTIVE_END_DATE IS NULL  AND GP.PROJECT_STATUS_TYPE_CODE "+
        "NOT IN ('CLOSED','COM','NS')  AND GPT.ROLE_TYPE_CODE ='OWNER' "+
        "AND GP.TENANT_ID=? AND GP.TENANT_ID=GPT.TENANT_ID",

    fetchDashboardProjectsForEmp:"SELECT GP.ID,GP.PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS GP, gnieprojectmanagement.GPM_PROJECT_TEAM GPT  WHERE GP.ID=GPT.PROJECT_ID AND "+
        "GPT.USER_ID=? AND GPT.EFFECTIVE_END_DATE IS NULL  AND GP.PROJECT_STATUS_TYPE_CODE "+
        "NOT IN ('CLOSED','COM','NS')  "+
        "AND GP.TENANT_ID=? AND GP.TENANT_ID=GPT.TENANT_ID",
    projectProgressForEmp:"SELECT  SUM(GT.ACTUAL_EFFORT) AS ACTUAL_EFFORT,GP.PROJECT_NAME,GP.ID,GP.ACTUAL_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_STATUS_TYPE_CODE "+
        "FROM gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECT_TEAM GPT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP WHERE GP.ID=GT.PROJECT_ID AND GP.ID=GPT.PROJECT_ID AND GPT.USER_ID=? AND "+
        "GPT.TENANT_ID=? AND GP.TENANT_ID=GPT.TENANT_ID AND GT.ASSIGNED_TO=GPT.USER_ID AND "+
        "GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM','NS')  "+
        "GROUP BY GP.PROJECT_NAME,GP.ID,GP.ACTUAL_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_STATUS_TYPE_CODE ;",
    specificProjectProgressForEmp:"SELECT  SUM(GT.ACTUAL_EFFORT) AS ACTUAL_EFFORT,GP.PROJECT_NAME,GP.ID,GP.ACTUAL_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_STATUS_TYPE_CODE "+
        "FROM gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECT_TEAM GPT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP WHERE GP.ID=GT.PROJECT_ID AND GP.ID=GPT.PROJECT_ID AND GPT.USER_ID=? AND "+
        "GPT.TENANT_ID=? AND GP.TENANT_ID=GPT.TENANT_ID AND GT.ASSIGNED_TO=GPT.USER_ID AND "+
        "GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM','NS')  AND  GP.ID IN (?)"+
        "GROUP BY GP.PROJECT_NAME,GP.ID,GP.ACTUAL_START_DATE,GP.ESTIMATED_COMPLETION_DATE,GP.PROJECT_STATUS_TYPE_CODE ;",
    taskProgressAllProjectForEmp: "SELECT GT.ID AS TASK_ID,GT.TASK_NAME, GT.ACTUAL_EFFORT,GT.ESTIMATED_EFFORT,GT.TASK_STATUS_TYPE_CODE,GT.ACTUAL_START_DATE, " +
        "GT.ESTIMATED_COMPLETION_DATE,GP.ID, GP.PROJECT_NAME FROM "+
        "gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
        "WHERE GT.PROJECT_ID=GP.ID  AND GT.TENANT_ID=GP.TENANT_ID AND GPT.USER_ID=? AND GT.TENANT_ID=? "+
        "AND GP.ID=GPT.PROJECT_ID  AND GT.ASSIGNED_TO=GPT.USER_ID "+
        "AND GPT.EFFECTIVE_END_DATE IS NULL AND GP.PROJECT_STATUS_TYPE_CODE NOT IN ('CLOSED','COM')  "+
        "AND GT.TASK_STATUS_TYPE_CODE NOT IN ('COM','CLOSED','OBSOLETE') GROUP BY "+
        "GT.ID,GT.TASK_NAME,GP.ID, GP.PROJECT_NAME,GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.TASK_STATUS_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE ;",

    taskProgressForEmp:"SELECT GT.ID AS TASK_ID,GT.TASK_NAME, GT.ACTUAL_EFFORT,GT.ESTIMATED_EFFORT,GT.TASK_STATUS_TYPE_CODE,GT.ACTUAL_START_DATE, "+
        "GT.ESTIMATED_COMPLETION_DATE,GP.ID, GP.PROJECT_NAME FROM "+
        "gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT "+
        "WHERE GT.PROJECT_ID=GP.ID  AND GT.TENANT_ID=GP.TENANT_ID AND GPT.USER_ID=? AND GT.TENANT_ID=? AND GP.ID IN (?) "+
        "AND GP.ID=GPT.PROJECT_ID "+
        "AND GPT.EFFECTIVE_END_DATE IS NULL AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM')  "+
        "AND GT.TASK_STATUS_TYPE_CODE NOT IN ('COM','CLOSED','OBSOLETE') GROUP BY "+
        "GT.ID,GT.TASK_NAME,GP.ID, GP.PROJECT_NAME,GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.TASK_STATUS_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE ;",
    getAllExpTypes:"SELECT * FROM gnieplatform.GPF_EXPENSE_TYPE where TENANT_ID in (0,?);",
    addNewExpeType : "INSERT INTO `gnieplatform`.`GPF_EXPENSE_TYPE`  "+
    "( `TENANT_ID`,`NAME`, `DESCRIPTION`, `CREATED_BY`, `UPDATED_BY`)  "+
    "VALUES  "+
    "(?,?,?,?,?)",
    addExpenditure : "INSERT INTO `gnieprojectmanagement`.`GPM_EXPENSE`   "+
    " (`TENANT_ID`, `PROJECT_ID`, `TASK_ID`, `EXP_ID`, `EXP_AMNT`,`EXPENSE_DATE`, `DESCRIPTION`, `CREATED_BY`, `UPDATED_BY`)  "+ 
    " VALUES (?, ?, ?, ?, ?, ?, ?, ?,?)  ",

    getMainTaskEffort:"SELECT SUM(ACTUAL_EFFORT) AS TOTAL_EFFORT FROM gnieprojectmanagement.GPM_TASKS WHERE MAIN_TASK_ID=? AND TENANT_ID=?",

    updateMainTaskEffort:"UPDATE gnieprojectmanagement.GPM_TASKS SET ACTUAL_EFFORT=?, UPDATED_BY=? WHERE ID=? AND TENANT_ID=? ;",

    subTaskToMainTask:"UPDATE gnieprojectmanagement.GPM_TASKS SET TYPE='MAIN', MAIN_TASK_ID=?,UPDATED_BY=? WHERE ID=? AND TENANT_ID=?;",

    fetchSubTask:"SELECT * FROM gnieprojectmanagement.GPM_TASKS WHERE MAIN_TASK_ID = ? AND TENANT_ID = ?",
    updateTaskId:"UPDATE gnieprojectmanagement.GPM_TASKS SET MAIN_TASK_ID = ?,LAST_UPDATED_DATE = now(),UPDATED_BY = ? "+
    "WHERE ID IN (?) AND TENANT_ID = ?",
    udateMainTaskToSubTask:"UPDATE gnieprojectmanagement.GPM_TASKS SET MAIN_TASK_ID = ?,TYPE=?,LAST_UPDATED_DATE = now(),UPDATED_BY = ? "+
    "WHERE ID=? AND TENANT_ID = ?",
    updateStatusofmaintask:"UPDATE gnieprojectmanagement.GPM_TASKS SET TASK_STATUS_TYPE_CODE = ?,LAST_UPDATED_DATE = now(),UPDATED_BY = ? "+
    "WHERE ID=? AND TENANT_ID = ?",

    getTasksData:"SELECT ID,TYPE, MAIN_TASK_ID FROM gnieprojectmanagement.GPM_TASKS WHERE ID=? AND TENANT_ID=?;",

    getIPTasks :"SELECT GP.ID,GP.PROJECT_NAME,GT.TASK_NAME,GT.TASK_DESCRIPTION,GP.TENANT_ID,GTN.TENANT_NAME,GT.TYPE,GCPM.CLIENT_ID, GC.CLIENT_NAME, GT.ID, "
        +"(SELECT GROUP_CONCAT(GA.FILE_NAME) FROM gnieplatform.GPF_ATTACHMENTS GA left join gnieprojectmanagement.GPM_WORK_LOGS GWL ON GA.ACTION_ID = GWL.ID "
        +"WHERE (GA.ACTION_ID = GT.ID AND GA.ACTION_CODE = 'A1001') OR (GWL.TASK_ID = GT.ID AND GA.ACTION_CODE = 'A1003')) FILE_NAMES, "
        +"(SELECT GROUP_CONCAT(GA.FILE_URL) FROM gnieplatform.GPF_ATTACHMENTS GA left join gnieprojectmanagement.GPM_WORK_LOGS GWL ON GA.ACTION_ID = GWL.ID "
        +"WHERE (GA.ACTION_ID = GT.ID AND GA.ACTION_CODE = 'A1001') OR (GWL.TASK_ID = GT.ID  AND GA.ACTION_CODE = 'A1003') ) FILE_URLS "
        +"FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_TASKS GT,gnieplatform.GPF_TENANTS GTN,gnieprojectmanagement.GPM_CLIENT_PROJECT_MAPPING GCPM, "
        +"gnieplatform.GPF_CLIENTS GC where GP.TENANT_ID = GTN.ID AND GT.PROJECT_ID = GP.ID AND GT.TASK_STATUS_TYPE_CODE IN ('IP') AND GT.TYPE = 'MAIN' AND GP.ID = GCPM.PROJECT_ID AND GCPM.CLIENT_ID = GC.ID AND GCPM.EFFECTIVE_END_DATE IS NULL " ,

    completedTaskCountForPM:"SELECT COUNT(GT.ID) AS TASK_COUNT,GU.FULL_NAME FROM gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECTS GP,"+
        "gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_USER GU WHERE GU.ID = GT.ASSIGNED_TO AND "+
        "GT.PROJECT_ID = GPT.PROJECT_ID AND GP.ID=GT.PROJECT_ID AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND "+
        "TASK_STATUS_TYPE_CODE = 'COM' AND  GPT.USER_ID = ? AND GPT.ROLE_TYPE_CODE = 'OWNER' AND GT.TENANT_ID=? "+
        " AND GT.ACTUAL_COMPLETION_DATE BETWEEN ? AND ? GROUP BY ASSIGNED_TO",
    fetchTag:"SELECT  DISTINCT GT.TAG AS TASK_TAG FROM gnieprojectmanagement.GPM_TASKS GT WHERE GT.PROJECT_ID=? AND GT.TENANT_ID=? UNION ALL "+
        "SELECT DISTINCT GIT.TAG AS ISSUE_TAG  FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT "+
        "WHERE GIT.PROJECT_ID=? AND GIT.TENANT_ID=?",

    updateTaskTag:"UPDATE gnieprojectmanagement.GPM_TASKS SET TAG=?, UPDATED_BY=? WHERE ID=? AND TENANT_ID=?;",

    updateIssueTag:"UPDATE gnieprojectmanagement.GPM_ISSUE_TRACKER SET TAG=?, UPDATED_BY=? WHERE ID=? AND TENANT_ID=?",

    completedTasKCountForEmp:"SELECT COUNT(GT.ID) AS TASK_COUNT,GP.PROJECT_NAME FROM gnieprojectmanagement.GPM_TASKS GT,"+
        "gnieprojectmanagement.GPM_PROJECTS GP, "+
        "gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE  GPT.USER_ID=GT.ASSIGNED_TO AND "+
        "GT.PROJECT_ID = GPT.PROJECT_ID AND GP.ID=GT.PROJECT_ID AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND "+
        "GT.TASK_STATUS_TYPE_CODE = 'COM' AND  GPT.USER_ID =? AND GT.TENANT_ID=?  AND GT.ACTUAL_COMPLETION_DATE BETWEEN "+
         " ? AND ?  GROUP BY GP.PROJECT_NAME",

    fetchIssuesForPM:"SELECT GIT.ID,GIT.ISSUE_NAME,GIT.DESCRIPTION,GIT.SEVERITY,GIT.CREATION_DATE,"+
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS WHERE "+
        "ID=GIT.PROJECT_ID AND TENANT_ID=GIT.TENANT_ID ) AS PROJECT_NAME,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID=GIT.CREATED_BY AND TENANT_ID=GIT.TENANT_ID) AS CREATED_BY_NAME,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID=GIT.ASSIGNED_TO AND TENANT_ID=GIT.TENANT_ID) AS ASSIGNED_TO_NAME,"+
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE  LOOKUP_TYPE='ISSUE_STATUS' AND LOOKUP_CODE=GIT.STATUS AND "+
        "TENANT_ID=GIT.TENANT_ID) AS STATUS "+
        "FROM gnieprojectmanagement.GPM_ISSUE_TRACKER GIT, gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE "+
        "GPT.USER_ID=? AND GPT.ROLE_TYPE_CODE='OWNER' AND GIT.PROJECT_ID=GPT.PROJECT_ID  "+
        "AND GIT.TENANT_ID=?;",

    getMainTaskExpense:"SELECT GE.ID,GE.TENANT_ID,GE.PROJECT_ID,GE.TASK_ID,GE.EXP_ID,GE.EXP_AMNT,GE.DESCRIPTION,GE.PAYMENT_STATUS,T.TASK_NAME,T.TYPE,T.TASK_DESCRIPTION, "+
    "T.GROUP_ID,GEXT.NAME AS EXPENSE_TYPE,GEXT.DESCRIPTION AS EXP_TYPE_DESCRIPTION,GPG.NAME AS GROUP_NAME,EXPENSE_DATE, "+
    "(SELECT COUNT(distinct(GA.ID)) FROM gnieplatform.GPF_ATTACHMENTS GA WHERE GA.ACTION_CODE = 'A1006' AND GE.ID = GA.ACTION_ID) AS HAS_ATTACHMENT, "+
    "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) is null then 0  "+
    "else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) end AS GROUP_MIN_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) end AS GROUP_MAX_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) end AS TASK_MIN_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) end AS TASK_MAX_AMT, "+
    "(SELECT GC.SYMBOL FROM gnieplatform.GPF_CURRENCY GC, gnieprojectmanagement.GPM_BUDGET GB WHERE CLASS_ID=T.PROJECT_ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=T.TENANT_ID AND GC.CODE = GB.CURRENCY_CODE) AS CURRENCY_SYMBOL, "+
    "(SELECT GC.CODE FROM gnieplatform.GPF_CURRENCY GC, gnieprojectmanagement.GPM_BUDGET GB WHERE CLASS_ID=T.PROJECT_ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=T.TENANT_ID AND GC.CODE = GB.CURRENCY_CODE) AS CURRENCY_CODE "+
    "FROM gnieprojectmanagement.GPM_EXPENSE GE,gnieprojectmanagement.GPM_TASKS T,gnieplatform.GPF_EXPENSE_TYPE GEXT, "+
    "gnieprojectmanagement.GPM_GROUPS GPG "+
    "WHERE GE.PROJECT_ID =? AND GE.STATUS = 'ACTIVE' AND GE.TENANT_ID =? AND GE.TASK_ID = T.ID AND GE.EXP_ID = GEXT.ID AND T.GROUP_ID = GPG.ID ORDER BY GE.ID DESC",

    getSubTaskExpense:"SELECT GE.ID, GE.TENANT_ID,GE.PROJECT_ID,GE.TASK_ID,GE.EXP_ID,GE.EXP_AMNT,GE.DESCRIPTION,GE.PAYMENT_STATUS,T.TASK_NAME,T.TYPE,T.TASK_DESCRIPTION, "+
    "T.GROUP_ID,GEXT.NAME AS EXPENSE_TYPE,GEXT.DESCRIPTION AS EXP_TYPE_DESCRIPTION,GPG.NAME AS GROUP_NAME, "+
    "(SELECT COUNT(distinct(GA.ID)) FROM gnieplatform.GPF_ATTACHMENTS GA WHERE GA.ACTION_CODE = 'A1006' AND GE.ID = GA.ACTION_ID) AS HAS_ATTACHMENT, "+
    "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) is null then 0  "+
    "else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) end AS GROUP_MIN_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.GROUP_ID AND CLASS_TYPE='GROUP' AND TENANT_ID=T.TENANT_ID) end AS GROUP_MAX_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) end AS TASK_MIN_AMT, "+
    "case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) is null then 0 "+
    "else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=T.ID AND CLASS_TYPE='TASK' AND TENANT_ID=T.TENANT_ID) end AS TASK_MAX_AMT, "+
    "(SELECT GC.SYMBOL FROM gnieplatform.GPF_CURRENCY GC, gnieprojectmanagement.GPM_BUDGET GB WHERE CLASS_ID=T.PROJECT_ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=T.TENANT_ID AND GC.CODE = GB.CURRENCY_CODE) AS CURRENCY_SYMBOL, "+
    "(SELECT GC.CODE FROM gnieplatform.GPF_CURRENCY GC, gnieprojectmanagement.GPM_BUDGET GB WHERE CLASS_ID=T.PROJECT_ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=T.TENANT_ID AND GC.CODE = GB.CURRENCY_CODE) AS CURRENCY_CODE "+
    "FROM gnieprojectmanagement.GPM_EXPENSE GE,gnieprojectmanagement.GPM_TASKS T,gnieplatform.GPF_EXPENSE_TYPE GEXT, "+
    "gnieprojectmanagement.GPM_GROUPS GPG WHERE GE.PROJECT_ID =?  AND GE.TENANT_ID =? AND GE.TASK_ID = T.ID AND GE.EXP_ID = GEXT.ID AND T.GROUP_ID = GPG.ID AND T.MAIN_TASK_ID = ? AND GE.STATUS = 'ACTIVE'",

    getExpenseImages:"SELECT ACTION_ID,ACTION_CODE,FILE_NAME,DESCRIPTION,FILE_URL FROM gnieplatform.GPF_ATTACHMENTS "+
        "WHERE ACTION_ID = ? AND ACTION_CODE ='A1006' AND TENANT_ID=? ",

    editExpenditure:"UPDATE `gnieprojectmanagement`.`GPM_EXPENSE` SET `TASK_ID` =?, `EXP_ID` = ?, `EXP_AMNT` =?, `DESCRIPTION` = ?, `CREATED_BY` = ?, "+
    "`UPDATED_BY` = ? ,`LAST_UPDATED_DATE` = now() WHERE ID = ? AND TENANT_ID = ?;",

    deleteExpenditure:"UPDATE gnieprojectmanagement.GPM_EXPENSE SET STATUS = 'INACTIVE' WHERE ID = ? AND TENANT_ID = ?",

    getPMDetails:"SELECT GU.ID Id, GU.FULL_NAME, GU.EMAIL Email from gnieplatform.GPF_FUNCTIONAL_ROLE GFR, gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_USER GU "
        +"WHERE GFR.ID= GPT.FUNCTIONAL_ROLE_ID AND GU.ID = GPT.USER_ID AND UPPER(GFR.ROLE_NAME)='PROJECT MANAGER' AND GPT.PROJECT_ID = ? and GU.EFFECTIVE_END_DATE IS NULL",

    getClientDetails:"SELECT GU.WHATSAPP_NUMBER,GU.EMAIL, GU.TENANT_ID , GT.TENANT_NAME, GT.WHATSAPP_ID from gnieplatform.GPF_CLIENTS GC,gnieprojectmanagement.GPM_CLIENT_PROJECT_MAPPING GCPM, "
        +"gnieplatform.GPF_CLIENT_USER_MAPPING GCUM,gnieplatform.GPF_USER GU,gnieplatform.GPF_TENANTS GT WHERE GCPM.PROJECT_ID = ? "
        +"AND GC.ID = GCPM.CLIENT_ID AND GCUM.CLIENT_ID = GC.ID AND GU.ID = GCUM.USER_ID AND GT.ID = GU.TENANT_ID and GU.EFFECTIVE_END_DATE IS NULL",
    

    addPayment:"INSERT INTO `gnieprojectmanagement`.`GPM_PAYMENTS`(`TENANT_ID`, `EXPENSE_ID`, `AMOUNT`, `PAY_REC`, `DESCRIPTION`,`TRANSACTION_DATE`,`CREATED_BY`, `UPDATED_BY`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)  ",
    editPayment:"UPDATE `gnieprojectmanagement`.`GPM_PAYMENTS` SET `AMOUNT` =?, `PAY_REC` = ?, `DESCRIPTION` =?, `TRANSACTION_DATE` = ?, `CREATED_BY` = ?,`UPDATED_BY` = ? WHERE ID = ?;",
    deletePayment:"UPDATE gnieprojectmanagement.GPM_PAYMENTS SET STATUS = 'INACTIVE' WHERE ID = ?;" ,
    fetchPayment:"SELECT GE.EXP_AMNT,GE.PAYMENT_STATUS,GP.ID,GP.TENANT_ID,GP.EXPENSE_ID,GP.AMOUNT,GP.PAY_REC,GP.DESCRIPTION,GP.TRANSACTION_DATE FROM gnieprojectmanagement.GPM_EXPENSE GE,gnieprojectmanagement.GPM_PAYMENTS GP WHERE GE.ID = ? AND GP.EXPENSE_ID = GE.ID AND GP.STATUS = 'ACTIVE' AND GE.STATUS = 'ACTIVE'",
    updatePaymentStatus:"UPDATE gnieprojectmanagement.GPM_EXPENSE SET PAYMENT_STATUS = 'PARTIAL' WHERE ID = ?",
    closeSettlement:"UPDATE gnieprojectmanagement.GPM_EXPENSE SET PAYMENT_STATUS = 'FULL' WHERE ID = ?",

    addLabourExpense:"INSERT INTO `gnieprojectmanagement`.`GPM_LABOUR_EXPENSE`(`TENANT_ID`, `EXPENSE_ID`, `NAME`,`WORKER_TYPE`,`UOM`,`RATE`, `WORKED_UNIT`,`LOG_DATE`,`CREATED_BY`, `UPDATED_BY`) VALUES ? ",
    editLabourExpense:"UPDATE `gnieprojectmanagement`.`GPM_LABOUR_EXPENSE` SET `NAME` =?,`WORKER_TYPE`=?,`UOM`=?, `RATE` = ?, `WORKED_UNIT` =?, `LOG_DATE` = ?,`UPDATED_BY` = ? WHERE ID = ?;",
    fetchLabourExpense:"SELECT GLE.ID,GLE.TENANT_ID,GLE.EXPENSE_ID,GLE.NAME,GLE.WORKER_TYPE,GLE.UOM,GLE.RATE,GLE.WORKED_UNIT,GLE.LOG_DATE, "+
    "(SELECT GL.DISPLAY_VALUE FROM  gnieplatform.GPF_LOOKUP GL WHERE GL.TENANT_ID = GLE.TENANT_ID AND GLE.UOM = GL.LOOKUP_CODE)AS DISPLAY_VALUE "+
    "FROM gnieprojectmanagement.GPM_LABOUR_EXPENSE GLE WHERE GLE.EXPENSE_ID = ?",
    fetchExpData:"SELECT GE.EXP_AMNT,GE.PAYMENT_STATUS  FROM gnieprojectmanagement.GPM_EXPENSE GE  WHERE GE.ID = ? AND GE.STATUS = 'ACTIVE'",
    updateProjectDetails:"UPDATE gnieprojectmanagement.GPM_PROJECTS  SET PROJECT_NAME=?, PROJECT_DESCRIPTION=? ,ESTIMATED_START_DATE=?, "+
        "ESTIMATED_COMPLETION_DATE=?,UPDATED_BY=? WHERE ID=? AND TENANT_ID=? ;",

    addLExpToMasterTable:"INSERT INTO `gnieprojectmanagement`.`GPM_LABOUR_EXPENSE_MASTER`(`TENANT_ID`, `PROJECT_ID`, `NAME`, `TYPE`, `UOM`,`RATE`,`CREATED_BY`, `UPDATED_BY`) VALUES ? ",
    editLExpToMasterTable:"UPDATE `gnieprojectmanagement`.`GPM_LABOUR_EXPENSE_MASTER` SET EFFECTIVE_END_DATE = ?,`UPDATED_BY` = ? WHERE ID = ?;",
    fetchLExpFromMasterTable:"SELECT ID,TENANT_ID,PROJECT_ID,NAME,TYPE,UOM,RATE FROM gnieprojectmanagement.GPM_LABOUR_EXPENSE_MASTER WHERE TYPE = ? AND PROJECT_ID =? AND TENANT_ID = ? AND EFFECTIVE_END_DATE IS NULL", 
    updateProjectDetails:"UPDATE gnieprojectmanagement.GPM_PROJECTS  SET PROJECT_NAME=?, PROJECT_DESCRIPTION=? ,ESTIMATED_START_DATE=?, "+
        "ESTIMATED_COMPLETION_DATE=?,UPDATED_BY=? WHERE ID=? AND TENANT_ID=? ;",
    updateWatchList:"UPDATE gnieprojectmanagement.GPM_WATCH_LIST SET STATUS=?, UPDATED_BY=? WHERE ENTITY_ID IN (?) AND TYPE=? AND TENANT_ID=? ",
    setWatchList:"INSERT INTO gnieprojectmanagement.GPM_WATCH_LIST (TENANT_ID,TYPE,ENTITY_ID,USER_ID,STATUS,CREATED_BY,UPDATED_BY) VALUES ?",
    updateProjectWatchList:"UPDATE gnieprojectmanagement.GPM_PROJECTS SET IS_WATCHABLE=? WHERE ID=? AND TENANT_ID=? ",

    getTaskInWatchList:"SELECT GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.TASK_STATUS_TYPE_CODE,GT.TYPE, "+
        "GT.ACTUAL_START_DATE,GT.ACTUAL_COMPLETION_DATE,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE, "+
        "(SELECT DISPLAY_VALUE from gnieplatform.GPF_LOOKUP WHERE LOOKUP_TYPE = 'PROJECT_STATUS' AND TENANT_ID =GT.TENANT_ID AND "+
        "LOOKUP_CODE=GT.TASK_STATUS_TYPE_CODE ) AS STATUS, "+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=GT.ASSIGNED_TO AND GT.TENANT_ID=U.TENANT_ID) AS ASSIGNED_TO_NAME "+
        "FROM gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_WATCH_LIST GW "+
        "WHERE  GT.PROJECT_ID=? AND GT.ID=GW.ENTITY_ID AND GW.TYPE='TASK' AND GW.USER_ID=?  "+
        "AND GT.TENANT_ID=? AND GW.STATUS='ACTIVE';",
    getIssueInWatchList:"SELECT IT.ISSUE_NAME,IT.DESCRIPTION,IT.PRIORITY,IT.SEVERITY,IT.ASSIGNED_TO,IT.ASSIGNED_BY,"+
        "IT.STATUS,IT.MODULE_ID,IT.START_DATE,IT.END_DATE,"+
        "(SELECT DISPLAY_VALUE from gnieplatform.GPF_LOOKUP WHERE LOOKUP_TYPE = 'ISSUE_STATUS' AND TENANT_ID =IT.TENANT_ID AND "+
        "LOOKUP_CODE=IT.STATUS ) AS STATUS, "+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=IT.ASSIGNED_TO AND IT.TENANT_ID=U.TENANT_ID) AS ASSIGNED_TO_NAME, "+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=IT.ASSIGNED_BY AND IT.TENANT_ID=U.TENANT_ID) AS ASSIGNED_BY_NAME, "+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER U  WHERE U.ID=IT.CREATED_BY AND IT.TENANT_ID=U.TENANT_ID) AS CREATED_BY_NAME "+
        "FROM gnieprojectmanagement.GPM_ISSUE_TRACKER IT,gnieprojectmanagement.GPM_WATCH_LIST GW WHERE GW.TYPE='ISSUE' "+
        "AND IT.ID=GW.ENTITY_ID AND IT.PROJECT_ID=?  AND GW.USER_ID=? AND IT.TENANT_ID=? AND GW.STATUS='ACTIVE'; ",
    getProjectInWatchList:"SELECT GP.PROJECT_NAME,GP.PROJECT_DESCRIPTION,GP.ESTIMATED_START_DATE,GP.ESTIMATED_COMPLETION_DATE, "+
        "GP.ACTUAL_START_DATE,GP.ACTUAL_COMPLETION_DATE,GP.PROJECT_STATUS_TYPE_CODE, "+
        "(SELECT DISPLAY_VALUE from gnieplatform.GPF_LOOKUP WHERE LOOKUP_TYPE = 'PROJECT_STATUS' AND TENANT_ID =GP.TENANT_ID AND "+
        "LOOKUP_CODE=GP.PROJECT_STATUS_TYPE_CODE ) AS STATUS "+
        "FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_WATCH_LIST GW "+
        "WHERE GP.ID=GW.ENTITY_ID AND GW.TYPE='PROJECT'AND GW.USER_ID=? AND GP.TENANT_ID=? AND GW.STATUS='ACTIVE';",
    addTaskProgress:"UPDATE  gnieprojectmanagement.GPM_TASKS  SET PROGRESS=? , UPDATED_BY=? WHERE ID=? AND TENANT_ID=?",
    getWatchListTasksOfEmployee:"SELECT (select employee_number from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMPLOYEE_NUMBER,"+
        "(select ID from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_TO) EMPLOYEE_ID, "+
        "(select FULL_NAME from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) FULL_NAME,"+
        "(select EMAIL from gnieplatform.GPF_USER GU where id=GT.ASSIGNED_BY) EMAIL,"+
        "(select PROJECT_NAME from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_NAME,"+
        "(select PROJECT_DESCRIPTION from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_DESCRIPTION,"+
        "(select PROJECT_TYPE_CODE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_TYPE_CODE, "+
        "(select ESTIMATED_START_DATE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ESTIMATED_START_DATE, "+
        "(select ESTIMATED_COMPLETION_DATE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ESTIMATED_COMPLETION_DATE,"+
        "(select PROJECT_STATUS_TYPE_CODE from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_STATUS_TYPE_CODE,"+
        "(select ID from gnieprojectmanagement.GPM_PROJECTS where ID=GT.PROJECT_ID) AS PROJECT_ID,GT.ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,"+
        "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE GT.TASK_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.LOOKUP_TYPE = 'PROJECT_STATUS' GROUP BY GL.DISPLAY_VALUE LIMIT 1) AS DISPLAY_VALUE, "+
        "(SELECT IFNULL(SUM(HOURS),0) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID = GT.ID AND WORKLOG_STATUS = 'ACTIVE' ) AS TOTAL_HOURS,"+
        "(SELECT group_concat(USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID = GT.PROJECT_ID AND UPPER(ROLE_TYPE_CODE) ='OWNER' ) AS PROJECT_OWNERS,"+
        "GT.ASSIGNED_TO,GT.ASSIGNED_BY,GT.TASK_STATUS_TYPE_CODE,GT.PRIORITY_TYPE_CODE,GT.ACTUAL_START_DATE,GT.ESTIMATED_COMPLETION_DATE AS DUE_DATE,GT.ACTUAL_COMPLETION_DATE,"+
        "GT.ESTIMATED_EFFORT,GT.ACTUAL_EFFORT,GT.CREATED_BY FROM gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_WATCH_LIST GW WHERE  GW.TYPE='TASK' AND GW.ENTITY_ID=GT.ID AND GT.TENANT_ID =?  AND GT.TASK_STATUS_TYPE_CODE IN ? AND GW.STATUS='ACTIVE' AND GW.USER_ID = ? ORDER BY ID DESC;",
		

        createDefaultMilestones: "INSERT INTO gnieprojectmanagement.GPM_MILESTONE (TENANT_ID,PROJECT_ID,NAME,DESCRIPTION,START_DATE,END_DATE,CREATED_BY,UPDATED_BY) VALUES ? ",

        fetchLExpType: "SELECT ID,TENANT_ID,LOOKUP_TYPE,LOOKUP_CODE,DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP WHERE  LOOKUP_TYPE = ? AND TENANT_ID = ?",
        getExpData: "SELECT GLEM.ID,GLEM.TENANT_ID,GLEM.PROJECT_ID,GLEM.NAME,GLEM.TYPE,GLEM.UOM,GLEM.RATE,GLE.WORKED_UNIT FROM gnieprojectmanagement.GPM_LABOUR_EXPENSE_MASTER GLEM,gnieprojectmanagement.GPM_LABOUR_EXPENSE GLE " +
        "WHERE GLEM.TYPE = ? AND GLEM.PROJECT_ID = ? AND GLEM.TENANT_ID = ? AND GLEM.NAME = ? AND GLE.TENANT_ID = GLEM.TENANT_ID AND GLEM.TYPE = GLE.WORKER_TYPE AND GLEM.NAME = GLE.NAME; ",
    changeTaskApprovalStatus:"UPDATE gnieprojectmanagement.GPM_TASKS SET UPDATED_BY=?, SUB_STATUS = ? WHERE ID=?",
    addComment:"INSERT INTO gnieplatform.GPF_COMMENTS(`TENANT_ID`,`ACTION_ID`,`ACTION_CODE`,`COMMENTS`,`REPLY_COMMENT_ID`,`EFFECTIVE_START_DATE`,`CREATION_DATE`,`CREATED_BY`,`LAST_UPDATED_DATE`,`UPDATED_BY`) VALUES (?,?,?,?,?,now(),now(),?,now(),?)",
    getPMsProjectIds:"SELECT PROJECT_ID FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE ROLE_TYPE_CODE = 'OWNER' AND USER_ID=?;",
    getAllTasksListofPM:"SELECT ID,TASK_NAME,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ACTUAL_START_DATE,ACTUAL_COMPLETION_DATE, "+
        "(SELECT DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP gl WHERE LOOKUP_CODE = gt.TASK_STATUS_TYPE_CODE "+
        "AND  LOOKUP_TYPE='PROJECT_STATUS' group by DISPLAY_VALUE) STATUS, "+
        "(SELECT PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS gp WHERE ID = gt.PROJECT_ID) PROJECT_NAME, "+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER gu WHERE ID = gt.ASSIGNED_TO) ASSIGNEE, "+
        "ASSIGNED_TO,PROJECT_ID FROM gnieprojectmanagement.GPM_TASKS gt WHERE  PROJECT_ID IN "+
        "(SELECT PROJECT_ID FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE ROLE_TYPE_CODE = 'OWNER' AND USER_ID=?) "+
        "AND gt.TASK_STATUS_TYPE_CODE NOT IN ('COM','CLOSED') AND "+
        "(ESTIMATED_START_DATE BETWEEN ? AND ? OR "+
        "ACTUAL_START_DATE BETWEEN ? AND ? OR "+
        "ESTIMATED_COMPLETION_DATE BETWEEN ? AND ? OR "+
        "ACTUAL_COMPLETION_DATE BETWEEN ? AND ?);",
    getAllWatchlist:"SELECT  GWL.USER_ID as Id,GU.FULL_NAME,GU.EMAIL,GU.WHATSAPP_NUMBER,GU.TENANT_ID,GPFT.TENANT_NAME,GPFT.WHATSAPP_ID, GT.TASK_NAME, GT.TASK_DESCRIPTION,GT.TASK_STATUS_TYPE_CODE,GT.PROGRESS,GT.PROJECT_ID,GP.PROJECT_NAME, "
        +"case when GB.BUDGET_AMOUNT_MAX is null then 0 else GB.BUDGET_AMOUNT_MAX END BUDGET,case when GB.BUDGET_AMOUNT_MAX is null then 0 else case when (select BUDGET_AMOUNT_MAX from gnieprojectmanagement.GPM_BUDGET "
        +"where CLASS_ID = GT.PROJECT_ID AND CLASS_TYPE = 'PROJECT') is null then 0 else FLOOR((GB.BUDGET_AMOUNT_MAX/(select BUDGET_AMOUNT_MAX from gnieprojectmanagement.GPM_BUDGET "
        +"where CLASS_ID = GT.PROJECT_ID AND CLASS_TYPE = 'PROJECT'))*100) end END BUDGET_PROGRESS FROM gnieprojectmanagement.GPM_WATCH_LIST GWL, gnieplatform.GPF_USER GU,gnieplatform.GPF_TENANTS GPFT,gnieprojectmanagement.GPM_PROJECTS GP, "
        +"gnieprojectmanagement.GPM_TASKS GT left join gnieprojectmanagement.GPM_BUDGET GB on GT.ID = GB.CLASS_ID AND GB.CLASS_TYPE = 'TASK' WHERE "
        +"GWL.TYPE = 'TASK' AND GWL.ENTITY_ID = GT.ID AND GT.TASK_STATUS_TYPE_CODE NOT IN ('COM','CLOSED','HOLD') AND GU.ID = GWL.USER_ID AND GPFT.ID = GU.TENANT_ID AND GT.PROJECT_ID = GP.ID",
    getUserDetailsInWatchList :"SELECT GU.ID,GU.EMAIL,GU.EMPLOYEE_NUMBER,GU.WHATSAPP_NUMBER,GT.WHATSAPP_ID "+
        "FROM gnieprojectmanagement.GPM_WATCH_LIST WL,gnieplatform.GPF_USER GU,gnieplatform.GPF_TENANTS GT "+
        "WHERE WL.USER_ID=GU.ID AND WL.STATUS='ACTIVE' AND GU.STATUS='ACTIVE'  AND GT.ID=WL.TENANT_ID "+
        "AND WL.TYPE='TASK' AND WL.ENTITY_ID IN (?) AND   WL.TENANT_ID=?; ",
    checkMilestoneExists:"SELECT * FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING WHERE TASK_ID = ? AND TENANT_ID = ? AND EFFECTIVE_END_DATE IS NULL;",
    updateMilestone:"UPDATE gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING SET MILESTONE_ID = ?,UPDATED_BY =? WHERE TASK_ID IN (?) AND TENANT_ID = ?",
    addMilestone:"INSERT INTO gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING (TENANT_ID,MILESTONE_ID,TASK_ID,EFFECTIVE_START_DATE,CREATED_BY,UPDATED_BY) VALUES ?",
    endDateMilestone:"UPDATE gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING SET EFFECTIVE_END_DATE = ?,UPDATED_BY =?, WHERE TASK_ID IN (?) AND TENANT_ID = ?",
    updateIssueDetails: "UPDATE gnieprojectmanagement.GPM_ISSUE_TRACKER SET SEVERITY=?,PRIORITY=?,UPDATED_BY=? WHERE `ID` = ?",
    getTaskZonesTimeline:"SELECT ID,TASK_NAME,TASK_DESCRIPTION,STATUS,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ROUND(PROGRESS) AS ACTUAL_COMPLETION_PERCENTAGE,ROUND((DAYS_WORKED*ESTIMATED_COMPLETION_PER_DAY)) "
        +"AS ESTIMATED_COMPLETION_PERCENTAGE,IF(ROUND((DAYS_WORKED*ESTIMATED_COMPLETION_PER_DAY))>100, 100, ROUND((DAYS_WORKED*ESTIMATED_COMPLETION_PER_DAY))) AS ESTIMATED_PROGRESS FROM (SELECT T.ID,T.TASK_NAME,T.TASK_DESCRIPTION,T.PROGRESS,T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE,"
        +"T.ACTUAL_START_DATE,T.TASK_STATUS_TYPE_CODE,GPL.DISPLAY_VALUE AS STATUS,(DATEDIFF(T.ESTIMATED_COMPLETION_DATE,T.ESTIMATED_START_DATE)+1) AS ESTIMATED_DAYS,"
        +"(DATEDIFF(sysdate(),T.ACTUAL_START_DATE)+1) AS DAYS_WORKED,(1/(DATEDIFF(T.ESTIMATED_COMPLETION_DATE,T.ESTIMATED_START_DATE)+1))*100 AS ESTIMATED_COMPLETION_PER_DAY "
        +"FROM gnieprojectmanagement.GPM_TASKS T,gnieplatform.GPF_LOOKUP GPL WHERE GPL.LOOKUP_TYPE ='PROJECT_STATUS' AND GPL.TENANT_ID=T.TENANT_ID AND  GPL.LOOKUP_CODE = T.TASK_STATUS_TYPE_CODE AND T.PROJECT_ID = ? AND T.TASK_STATUS_TYPE_CODE NOT IN ('COM','CLOSED','OBSOLETE')) TABLE2",
    getTaskZonesBudgets:"SELECT ID,TASK_NAME,TASK_DESCRIPTION,STATUS,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,ALLOCATED_BUDGET,EXPENSE,PROGRESS,IFNULL((EXPENSE/ALLOCATED_BUDGET)*100,0.00) as BUDGET_UTILIZED,"
	    +"IFNULL((((PROGRESS/100)*ALLOCATED_BUDGET)/ALLOCATED_BUDGET)*100,0.00)  AS BUDGET_ON_PROGRESS FROM (SELECT T.ID,T.TASK_NAME,T.TASK_DESCRIPTION,T.PROGRESS,T.ESTIMATED_START_DATE,T.ESTIMATED_COMPLETION_DATE,T.TASK_STATUS_TYPE_CODE,GPL.DISPLAY_VALUE AS STATUS,"
	    +"IFNULL((SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_TYPE = 'TASK' and CLASS_ID = T.ID),0) AS ALLOCATED_BUDGET,"
	    +"IFNULL((SELECT SUM(EXP_AMNT) FROM gnieprojectmanagement.GPM_EXPENSE WHERE TASK_ID = T.ID),0) AS EXPENSE "
	    +"FROM gnieprojectmanagement.GPM_TASKS T,gnieplatform.GPF_LOOKUP GPL WHERE GPL.LOOKUP_TYPE ='PROJECT_STATUS' AND GPL.TENANT_ID=T.TENANT_ID AND  GPL.LOOKUP_CODE = T.TASK_STATUS_TYPE_CODE AND T.PROJECT_ID = ? AND T.TASK_STATUS_TYPE_CODE NOT IN ('COM','CLOSED','OBSOLETE')) AS TABLE1;",
    getCostChart:"SELECT GPB.BUDGET_AMOUNT_MAX AS BUDGET,SUM(EXP.EXP_AMNT) AS ACTUAL,(SELECT SUM(BUDGET_AMOUNT_MAX) FROM gnieprojectmanagement.GPM_BUDGET WHERE  CLASS_ID IN "
        +"(SELECT ID  FROM gnieprojectmanagement.GPM_GROUPS WHERE PROJECT_ID = ?) AND CLASS_TYPE = 'GROUP') AS PLANNED FROM gnieprojectmanagement.GPM_BUDGET GPB,gnieprojectmanagement.GPM_EXPENSE EXP "
        +"WHERE EXP.PROJECT_ID = GPB.CLASS_ID AND GPB.CLASS_ID = ?  AND GPB.CLASS_TYPE = 'PROJECT' GROUP BY BUDGET"  ,
    getTotalProgressOfSubTask:"SELECT SUM(PROGRESS) AS TOTAL_PROGRESS ,COUNT(ID) AS SUBTASK_COUNT FROM gnieprojectmanagement.GPM_TASKS WHERE "+
        "MAIN_TASK_ID=?  AND TENANT_ID=?" ,

    getProjectOwnerDetail:"SELECT GPT.USER_ID,GPT.PROJECT_ID,GPT.ROLE_TYPE_CODE,GU.ID,GU.EMAIL,GU.WHATSAPP_NUMBER,GU.TELEPHONE_NUMBER,GU.FULL_NAME,GT.WHATSAPP_ID,GT.ID,GT.TENANT_NAME "+
        "FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_USER GU,gnieplatform.GPF_TENANTS GT "+
        "WHERE GT.ID = GU.TENANT_ID AND GU.ID = GPT.USER_ID AND GPT.EFFECTIVE_END_DATE IS NULL AND GU.EFFECTIVE_END_DATE IS NULL AND GPT.ROLE_TYPE_CODE = 'OWNER' AND GPT.PROJECT_ID = ?",

    getPlannerProjects:"SELECT GP.ID,GP.PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT  "+
        "WHERE GP.ID = GPT.PROJECT_ID AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND GPT.ROLE_TYPE_CODE = 'OWNER' AND GPT.USER_ID = ? "+
        "AND EXISTS (SELECT 1 FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID AND ((TASK_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND ESTIMATED_START_DATE BETWEEN ? AND ?) OR (TASK_STATUS_TYPE_CODE = 'IP'))) "+
        "ORDER BY PROJECT_NAME",

    getPlannerResources:"SELECT GU.ID,GU.FULL_NAME FROM gnieplatform.GPF_USER GU,gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieprojectmanagement.GPM_TASKS GT WHERE  "+
        "GU.ID = GT.ASSIGNED_TO  "+
        "AND GU.TENANT_ID = GPT.TENANT_ID  "+
        "AND GT.PROJECT_ID=GPT.PROJECT_ID  "+
        "AND GPT.USER_ID = ? AND GPT.ROLE_TYPE_CODE ='OWNER'  "+
        "AND GT.ASSIGNED_TO IS NOT NULL  "+
        "AND ((GT.TASK_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND GT.ESTIMATED_START_DATE BETWEEN ? AND ?) OR (GT.TASK_STATUS_TYPE_CODE = 'IP'))  "+
        "GROUP BY ID,FULL_NAME",

    getPlannerDataOnProjects:"SELECT GP.PROJECT_NAME,GP.APPROVAL_REQUIRED,GT.PROJECT_ID,GT.ID AS TASK_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.PRIORITY_TYPE_CODE,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GPL.LOOKUP_CODE AS STATUS_CODE,GPL.DISPLAY_VALUE AS STATUS_DISPLAY_VALUE,"+
        "GU.ID AS ASSIGNED_TO,GU.FULL_NAME AS ASSIGNED_TO_NAME,GU.EMAIL AS ASSIGNED_TO_EMAIL,GT.IS_AUTOMATED,GT.TYPE,GT.ORDER_OF_EXECUTION,GT.MAIN_TASK_ID,"+
        "GT.ACTUAL_START_DATE,GT.ACTUAL_COMPLETION_DATE,(CASE "+
        "WHEN GT.PRIORITY_TYPE_CODE ='LOW' THEN 1 "+
        "WHEN GT.PRIORITY_TYPE_CODE ='MEDIUM' THEN 2 "+
        "WHEN GT.PRIORITY_TYPE_CODE ='HIGH' THEN 3 "+
        "END) AS PRIORITY,GG.NAME AS GROUP_NAME,GG.ID AS GROUP_ID,(SELECT CASE WHEN EXISTS (SELECT WL.USER_ID  FROM gnieprojectmanagement.GPM_WATCH_LIST WL WHERE  "+
        "WL.ENTITY_ID=GT.ID  AND WL.STATUS='ACTIVE' ) THEN 'true' ELSE 'false' END ) ADDED_TO_WATCH_LIST,"+
        "(SELECT ID FROM gnieplatform.GPF_USER WHERE ID = GT.CREATED_BY) AS CREATED_BY_ID,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.CREATED_BY) AS CREATED_BY_NAME "+
        "FROM gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_PROJECTS GP,gnieplatform.GPF_LOOKUP GPL,gnieplatform.GPF_USER GU,gnieprojectmanagement.GPM_GROUPS GG "+
        "WHERE GP.ID = GT.PROJECT_ID AND GG.ID = GT.GROUP_ID AND GPL.LOOKUP_TYPE='PROJECT_STATUS' AND GPL.TENANT_ID = GU.TENANT_ID AND GPL.LOOKUP_CODE=GT.TASK_STATUS_TYPE_CODE AND GU.ID = GT.ASSIGNED_TO AND GT.PROJECT_ID IN (?) "+
        "AND ((GT.ESTIMATED_START_DATE BETWEEN ? AND ? AND GT.TASK_STATUS_TYPE_CODE NOT IN ('CLOSED','COM','HOLD')) OR (GT.TASK_STATUS_TYPE_CODE = 'IP')) ORDER BY ESTIMATED_START_DATE,PRIORITY DESC",

    getPlannerDataOnResources:"SELECT GP.APPROVAL_REQUIRED,GT.ID AS TASK_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.PRIORITY_TYPE_CODE,GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GPL.LOOKUP_CODE AS STATUS_CODE,GPL.DISPLAY_VALUE AS STATUS_DISPLAY_VALUE,"+
        "GP.PROJECT_NAME,GP.ID AS PROJECT_ID,GU.ID AS ASSIGNED_TO,GU.FULL_NAME AS ASSIGNED_TO_NAME,GU.EMAIL AS ASSIGNED_TO_EMAIL,GT.IS_AUTOMATED,GT.TYPE,GT.ORDER_OF_EXECUTION,"+
        "GT.MAIN_TASK_ID,GT.ACTUAL_START_DATE,GT.ACTUAL_COMPLETION_DATE,(CASE "+
        "WHEN GT.PRIORITY_TYPE_CODE ='LOW' THEN 1 "+
        "WHEN GT.PRIORITY_TYPE_CODE ='MEDIUM' THEN 2 "+
        "WHEN GT.PRIORITY_TYPE_CODE ='HIGH' THEN 3 "+
        "END) AS PRIORITY,GG.NAME AS GROUP_NAME,GG.ID AS GROUP_ID,(SELECT CASE WHEN EXISTS (SELECT WL.USER_ID  FROM gnieprojectmanagement.GPM_WATCH_LIST WL WHERE  "+
        "WL.ENTITY_ID=GT.ID  AND WL.STATUS='ACTIVE' ) THEN 'true' ELSE 'false' END ) ADDED_TO_WATCH_LIST,"+
        "(SELECT ID FROM gnieplatform.GPF_USER WHERE ID = GT.CREATED_BY) AS CREATED_BY_ID,"+
        "(SELECT FULL_NAME FROM gnieplatform.GPF_USER WHERE ID = GT.CREATED_BY) AS CREATED_BY_NAME "+
        "FROM gnieplatform.GPF_USER GU,gnieprojectmanagement.GPM_TASKS GT,gnieplatform.GPF_LOOKUP GPL,gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_GROUPS GG "+
        "WHERE GG.ID = GT.GROUP_ID AND GU.ID = GT.ASSIGNED_TO AND GPL.LOOKUP_TYPE='PROJECT_STATUS' AND GPL.TENANT_ID = GP.TENANT_ID AND GPL.LOOKUP_CODE=GT.TASK_STATUS_TYPE_CODE AND GP.ID = GT.PROJECT_ID AND GT.ASSIGNED_TO IN (?) "+
        "AND GP.ID IN (SELECT ID FROM gnieprojectmanagement.GPM_PROJECTS WHERE ID IN (SELECT PROJECT_ID FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE USER_ID = ? AND ROLE_TYPE_CODE ='OWNER' AND EFFECTIVE_END_DATE IS NULL)) "+
        "AND ((GT.ESTIMATED_START_DATE BETWEEN ? AND ? AND GT.TASK_STATUS_TYPE_CODE NOT IN ('CLOSED','COM','HOLD')) OR (GT.TASK_STATUS_TYPE_CODE = 'IP')) AND EXISTS (SELECT 1 FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE USER_ID = ? AND PROJECT_ID = GP.ID) ORDER BY ESTIMATED_START_DATE,PRIORITY DESC",

        getPlannerData:"SELECT GP.ID,GP.PROJECT_NAME,GT.ID AS TASK_ID,GT.TASK_NAME,GT.TASK_DESCRIPTION,GT.PRIORITY_TYPE_CODE,"+
        "GT.ESTIMATED_START_DATE,GT.ESTIMATED_COMPLETION_DATE,GPL.LOOKUP_CODE AS STATUS_CODE,GPL.DISPLAY_VALUE AS STATUS_DISPLAY_VALUE,"+
        "GU.ID AS ASSIGNED_TO,GU.FULL_NAME AS ASSIGNED_TO_NAME,"+
        "(CASE "+
        "WHEN GT.PRIORITY_TYPE_CODE ='LOW' THEN 1 "+
        "WHEN GT.PRIORITY_TYPE_CODE ='MEDIUM' THEN 2 "+
        "WHEN GT.PRIORITY_TYPE_CODE ='HIGH' THEN 3 "+
        "END) AS PRIORITY "+
        "FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_TASKS GT,gnieplatform.GPF_LOOKUP GPL,gnieplatform.GPF_USER GU "+
        "WHERE GP.ID = GT.PROJECT_ID AND GPL.LOOKUP_TYPE='PROJECT_STATUS' AND GPL.TENANT_ID = GU.TENANT_ID AND GPL.LOOKUP_CODE=GT.TASK_STATUS_TYPE_CODE AND GU.ID = GT.ASSIGNED_TO AND "+
        "GT.PROJECT_ID IN (SELECT PROJECT_ID FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE USER_ID = ? AND ROLE_TYPE_CODE='OWNER') "+
        "AND ((TASK_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND GT.ESTIMATED_START_DATE BETWEEN ? AND ?) OR (TASK_STATUS_TYPE_CODE = 'IP')) "+
        "ORDER BY ESTIMATED_START_DATE,PRIORITY DESC;",

    getSpecificPlannerProjects:"SELECT GP.ID,GP.PROJECT_NAME FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GP.ID = GPT.PROJECT_ID AND GP.PROJECT_STATUS_TYPE_CODE NOT IN('CLOSED','COM') AND GPT.ROLE_TYPE_CODE = 'OWNER' AND GPT.USER_ID = ? AND GP.ID IN (?);",

    getSpecificPlannerResources:"SELECT ID,FULL_NAME FROM gnieplatform.GPF_USER WHERE EFFECTIVE_END_DATE IS NULL AND ID IN (?)",
    sendInAppNotifications:"INSERT INTO gnieplatform.GPF_NOTIFICATIONS (SENT_FROM,SENT_TO,MESSAGE,UNIT_ID,UNIT_TYPE,COMMENT,CREATED_BY,UPDATED_BY,TENANT_ID,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE)"+
    "VALUES(?,?,?,?,?,?,?,?,?,?,?)",

    taskRejection:"UPDATE gnieprojectmanagement.GPM_TASKS SET UPDATED_BY=?,TASK_STATUS_TYPE_CODE = ?, SUB_STATUS = ? WHERE ID=?",

    getProjectTeamMembers: "SELECT GU.ID,GU.FULL_NAME,GU.EMAIL FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT,gnieplatform.GPF_USER GU WHERE GU.ID = GPT.USER_ID AND GPT.PROJECT_ID = ? AND GPT.EFFECTIVE_END_DATE IS NULL",

    updateTaskPriority: "UPDATE gnieprojectmanagement.GPM_TASKS SET PRIORITY_TYPE_CODE = ?,UPDATED_BY = ? WHERE ID=?;",

    updateTaskStatus: "UPDATE gnieprojectmanagement.GPM_TASKS SET TASK_STATUS_TYPE_CODE = ?,UPDATED_BY = ?,SUB_STATUS = ? WHERE ID=?;",

    updateTaskDates: "UPDATE gnieprojectmanagement.GPM_TASKS SET ESTIMATED_START_DATE = ?,ACTUAL_START_DATE=?,ESTIMATED_COMPLETION_DATE=?,ACTUAL_COMPLETION_DATE=?,UPDATED_BY = ? WHERE ID=?;",

    getAssigneeDetails : "SELECT GU.WHATSAPP_NUMBER,GT.WHATSAPP_ID FROM gnieplatform.GPF_USER GU, gnieplatform.GPF_TENANTS GT WHERE GT.ID = GU.ID AND UPPER(GU.EMAIL) = ?;",

    setTaskCannotStart:"UPDATE  gnieprojectmanagement.GPM_DEPENDENCY_TASK SET CANNOT_START=?,  UPDATED_BY=? WHERE "+
    "ID IN(?) AND    TENANT_ID=? ",
    setTaskCannotComplete:"UPDATE  gnieprojectmanagement.GPM_DEPENDENCY_TASK SET CANNOT_COMPLETE=? , UPDATED_BY=? WHERE "+
    "TASK_ID IN(?) AND    TENANT_ID=? ",
    createCannotStartDependency:"INSERT INTO gnieprojectmanagement.GPM_DEPENDENT_TASKS (TENANT_ID,TASK_ID,PREDECESSOR_TASK_ID,SUCCESSOR_TASK_ID,CANNOT_START, "+
            "EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,CREATED_BY,UPDATED_BY)  VALUES ?;",
    createCannotCompleteDependency:"INSERT INTO gnieprojectmanagement.GPM_DEPENDENT_TASKS (TENANT_ID,TASK_ID,PREDECESSOR_TASK_ID,SUCCESSOR_TASK_ID,CANNOT_COMPLETE, "+
            "EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,CREATED_BY,UPDATED_BY)  VALUES ?;",
    updateGroupOrder:"UPDATE  gnieprojectmanagement.GPM_GROUPS SET GROUP_ORDER = ? WHERE PROJECT_ID = ? AND TENANT_ID = ? AND ID = ?",
    fetchGroups:"SELECT * FROM gnieprojectmanagement.GPM_GROUPS where PROJECT_ID = ? AND TENANT_ID = ?;",

    getEmpDetailsForAssignIssueWhatsappNotify:"SELECT GU.EMAIL AS PM_EMAIL,GU.WHATSAPP_NUMBER AS PM_WHATSAPP_NUMBER,GU.TENANT_ID, "+
    "(SELECT TENANT_NAME FROM gnieplatform.GPF_TENANTS GT WHERE GU.TENANT_ID = GT.ID) AS TENANT_NAME, "+
    "(SELECT WHATSAPP_ID FROM gnieplatform.GPF_TENANTS GT WHERE GU.TENANT_ID = GT.ID) AS WHATSAPP_ID "+
    "FROM gnieplatform.GPF_USER GU WHERE GU.ID = ?",


    deleteSuccessorDependency:"UPDATE gnieprojectmanagement.GPM_DEPENDENT_TASKS SET STATUS = 'INACTIVE' WHERE TASK_ID = ? AND SUCCESSOR_TASK_ID = ? AND TENANT_ID = ?",
    deletePredecessorDependency:"UPDATE gnieprojectmanagement.GPM_DEPENDENT_TASKS SET STATUS = 'INACTIVE' WHERE TASK_ID = ? AND PREDECESSOR_TASK_ID = ? AND TENANT_ID = ?",
    revertSuccessorQuery:"UPDATE gnieprojectmanagement.GPM_DEPENDENT_TASKS SET STATUS = 'ACTIVE' WHERE TASK_ID = ? AND SUCCESSOR_TASK_ID = ? AND TENANT_ID = ?",
    getProjectDetailsForSummary:"SELECT GP.ID AS PROJECT_ID,"+
            "(SELECT IS_AUTOMATED FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID=GP.ID AND ID = (SELECT MAX(ID) FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID)) AS IS_AUTOMATED,"+
            "GP.PROJECT_NAME,GP.LOCATION_NAME, GP.PROJECT_DESCRIPTION,GP.PROJECT_TYPE_CODE,GP.PROJECT_STATUS_TYPE_CODE,GP.LOCATION_NAME,GP.CREATION_DATE,GP.LAST_UPDATED_DATE,GP.ESTIMATED_START_DATE,GP.ESTIMATED_COMPLETION_DATE,"+
            "(SELECT GL.DISPLAY_VALUE FROM gnieplatform.GPF_LOOKUP GL WHERE PROJECT_STATUS_TYPE_CODE = GL.LOOKUP_CODE AND GL.TENANT_ID=GP.TENANT_ID  AND GL.LOOKUP_TYPE='PROJECT_STATUS'  GROUP BY GL.DISPLAY_VALUE) AS DISPLAY_VALUE,"+
            "(SELECT group_concat(distinct(SGU.FULL_NAME))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM SGPT,gnieplatform.GPF_USER SGU WHERE SGPT.PROJECT_ID = GP.ID AND SGPT.USER_ID = SGU.ID AND SGPT.EFFECTIVE_END_DATE IS NULL ) AS MEMBERS_NAME,"+
            "(SELECT COUNT(distinct(USER_ID))  FROM gnieprojectmanagement.GPM_PROJECT_TEAM WHERE PROJECT_ID = GP.ID AND EFFECTIVE_END_DATE IS NULL ) AS TOTAL_MEMBERS,"+
            "(SELECT IFNULL(SUM(HOURS),0) FROM gnieprojectmanagement.GPM_WORK_LOGS WHERE TASK_ID IN (SELECT ID FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GP.ID ) AND UPPER(WORKLOG_STATUS) = 'ACTIVE') AS TOTAL_HOURS,"+
            "(SELECT group_concat(USER_ID) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT LEFT JOIN gnieplatform.GPF_USER U ON U.ID=USER_ID LEFT JOIN gnieplatform.GPF_FUNCTIONAL_ROLE FR ON GPT.FUNCTIONAL_ROLE_ID = FR.ID "+
            "WHERE GPT.PROJECT_ID = GP.ID AND UPPER(GPT.ROLE_TYPE_CODE) ='OWNER' AND GPT.EFFECTIVE_END_DATE IS NULL AND (U.EFFECTIVE_END_DATE IS NULL OR U.EFFECTIVE_END_DATE > NOW() ) AND FR.TENANT_ID = U.TENANT_ID AND lower(FR.ROLE_NAME) like '%project manager%' ) AS PROJECT_OWNERS,"+
            "(SELECT IF((SELECT COUNT(ID) FROM gnieprojectmanagement.GPM_FAVOURITE_PROJECTS WHERE PROJECT_ID = GP.ID AND USER_ID = ? AND EFFECTIVE_END_DATE IS NULL  > 0), 'Y','N')) AS IS_FAVOURITE, GP.CREATED_BY, "+
            "case when GP.PROJECT_STATUS_TYPE_CODE in ('CLOSED','HOLD') then GP.LAST_UPDATED_DATE else null end as CLOSING_DATE, "+
            "(SELECT group_concat(FULL_NAME) FROM gnieprojectmanagement.GPM_PROJECT_TEAM GPT LEFT JOIN gnieplatform.GPF_USER U ON U.ID=USER_ID LEFT JOIN gnieplatform.GPF_FUNCTIONAL_ROLE FR ON GPT.FUNCTIONAL_ROLE_ID = FR.ID "+
            "WHERE GPT.PROJECT_ID = GP.ID AND UPPER(GPT.ROLE_TYPE_CODE) ='OWNER' AND GPT.EFFECTIVE_END_DATE IS NULL AND (U.EFFECTIVE_END_DATE IS NULL OR U.EFFECTIVE_END_DATE > NOW() ) AND FR.TENANT_ID = U.TENANT_ID AND lower(FR.ROLE_NAME) like '%project manager%') AS PROJECT_OWNERS_NAME,"+
            "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE PROJECT_ID = GPT.PROJECT_ID) AS TOTAL_TASKS, "+
            "(SELECT COUNT(*) FROM gnieprojectmanagement.GPM_TASKS WHERE TASK_STATUS_TYPE_CODE = 'COM' AND TASK_STATUS_TYPE_CODE != 'CLOSED' AND TASK_STATUS_TYPE_CODE != 'OBSOLETE'  AND PROJECT_ID = GPT.PROJECT_ID ) AS COMPLETED_TASK, "+ 
            "case when (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) is null then 0 "+
			"else (SELECT BUDGET_AMOUNT_MIN FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) end AS PROJECT_MIN_AMT, "+
			"case when (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) is null then 0 "+
			"else (SELECT BUDGET_AMOUNT_MAX FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) end AS PROJECT_MAX_AMT,  "+  
            "(SELECT TYPE FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) AS BUDGET_TYPE, "+
            "(SELECT CURRENCY_CODE FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) AS CURRENCY_CODE, "+
			"case when (SELECT CURRENCY_CODE FROM gnieprojectmanagement.GPM_BUDGET WHERE CLASS_ID=GP.ID AND CLASS_TYPE='PROJECT' AND TENANT_ID=GP.TENANT_ID) is null then NULL "+
			"else (SELECT GC.SYMBOL FROM gnieprojectmanagement.GPM_BUDGET GB,gnieplatform.GPF_CURRENCY GC WHERE GB.CLASS_ID=GP.ID AND GB.CLASS_TYPE='PROJECT' AND GB.TENANT_ID=GP.TENANT_ID AND GC.CODE = GB.CURRENCY_CODE) end AS CURRENCY_SYMBOL "+
            "FROM gnieprojectmanagement.GPM_PROJECTS GP,gnieprojectmanagement.GPM_PROJECT_TEAM GPT WHERE GP.TENANT_ID= ? AND GPT.USER_ID = ? AND GP.ID=? AND GP.ID = GPT.PROJECT_ID "+
            "GROUP BY PROJECT_ID,IS_AUTOMATED,PROJECT_NAME,LOCATION_NAME,PROJECT_DESCRIPTION,PROJECT_DESCRIPTION,PROJECT_TYPE_CODE,PROJECT_STATUS_TYPE_CODE,LOCATION_NAME,CREATION_DATE,LAST_UPDATED_DATE,ESTIMATED_START_DATE,ESTIMATED_COMPLETION_DATE,DISPLAY_VALUE,MEMBERS_NAME,TOTAL_MEMBERS,TOTAL_HOURS,PROJECT_OWNERS,IS_FAVOURITE "+
            "ORDER BY IS_FAVOURITE DESC,LAST_UPDATED_DATE DESC;",
    getInProgressMilestoneTaskCount:"SELECT COUNT(GMTM.ID) COUNT FROM gnieprojectmanagement.GPM_TASKS GT,gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING GMTM where MILESTONE_ID = ? AND EFFECTIVE_END_DATE IS NULL AND GT.ID = GMTM.TASK_ID AND GT.TASK_STATUS_TYPE_CODE = 'IP'",

    getConfigDetails:"SELECT TYPE,ATTRIBUTE_TYPE,ATTRIBUTE_VALUE FROM gnieplatform.GPF_TENANT_CONFIG WHERE TENANT_ID =  ?",

    updateProjectStatusFromPlanningPage: "UPDATE gnieprojectmanagement.GPM_PROJECTS SET PROJECT_STATUS_TYPE_CODE='IP',UPDATED_BY=? WHERE ID=?;",

    recipientData: "SELECT GU.WHATSAPP_NUMBER,GU.FULL_NAME,GFR.ROLE_NAME,GT.WHATSAPP_ID FROM gnieplatform.GPF_USER GU,gnieplatform.GPF_FUNCTIONAL_ROLE GFR, gnieplatform.GPF_TENANTS GT where GU.ID=? AND"+
                    " GU.TENANT_ID=? AND GFR.ID=? AND GFR.TENANT_ID=GU.TENANT_ID AND GT.ID=GU.TENANT_ID;",
    sendersData:"SELECT GU.FULL_NAME,GP.PROJECT_NAME FROM gnieplatform.GPF_USER GU,gnieprojectmanagement.GPM_PROJECTS GP WHERE GU.ID=? "+
                " AND GU.TENANT_ID=? AND GP.ID=?;",
    tenantTest:"SELECT GT.ID AS TENANT_ID,"+
              "(SELECT COUNT(GP.ID) FROM gnieprojectmanagement.GPM_PROJECTS GP WHERE GP.TENANT_ID=GT.ID AND  GP.LAST_UPDATED_DATE >=? AND DAYOFWEEK(GP.LAST_UPDATED_DATE) != 1) AS PROJECT_ID,"+
              "(SELECT COUNT(GTS.ID) FROM gnieprojectmanagement.GPM_TASKS GTS WHERE GTS.TENANT_ID=GT.ID AND GTS.LAST_UPDATED_DATE >=? AND DAYOFWEEK(GTS.LAST_UPDATED_DATE) != 1) AS TASK_ID,"+
              "(SELECT COUNT(GWL.ID) FROM gnieprojectmanagement.GPM_WORK_LOGS GWL WHERE GWL.TENANT_ID=GT.ID AND GWL.LAST_UPDATED_DATE >=? AND DAYOFWEEK(GWL.LAST_UPDATED_DATE) != 1) AS WORKLOG_ID,"+
              "(SELECT COUNT(GIT.ID) FROM gnieprojectmanagement.GPM_ISSUE_TRACKER  GIT WHERE GIT.TENANT_ID=GT.ID AND GIT.LAST_UPDATED_DATE >=? AND DAYOFWEEK(GIT.LAST_UPDATED_DATE) != 1) AS ISSUE_TRACKER_ID,"+
              "(SELECT COUNT(GMTM.ID) FROM gnieprojectmanagement.GPM_MILESTONE_TASK_MAPPING GMTM  WHERE GMTM.TENANT_ID=GT.ID AND GMTM.LAST_UPDATED_DATE >=? AND DAYOFWEEK(GMTM.LAST_UPDATED_DATE) != 1) AS MILESTON_TASK_ID,"+
              "(SELECT COUNT(GMIM.ID) FROM gnieprojectmanagement.GPM_MILESTONE_ISSUE_MAPPING GMIM WHERE GMIM.TENANT_ID=GT.ID AND GMIM.LAST_UPDATED_DATE >=? AND DAYOFWEEK(GMIM.LAST_UPDATED_DATE) != 1) AS MILESTON_ISSUE_ID FROM gnieplatform.GPF_TENANTS GT WHERE GT.ID=?;"
        
}
